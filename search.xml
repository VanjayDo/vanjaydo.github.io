<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[各开发环境换源方法集合]]></title>
    <url>%2Fpost%2F%E5%90%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%8D%A2%E6%BA%90%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88.html</url>
    <content type="text"><![CDATA[因为在平时的开发中, 由于绝大多数开发环境的官方镜像源都在国外, 拉取的时候速率受影响, 修改成国内源的时候都要临时去搜索一下, 有些源可能维护方更换资源导致无法使用, 就比较麻烦. 于是我在本文中整理了各个开发环境下包管理器的换源方法. 通用办法集合在这里推荐清华和中科大的两个镜像源帮助列表, 包括的范围很广(包括*nix/pypi/node/docker等), 如果网络环境是教育网的话比较推荐这两个 👇 清华大学镜像源帮助列表 中科大镜像源帮助列表 具体的换源方法里面都有. php composer推荐国内的 👉 Packagist, 具体用法官网上都有. npm国内的源淘宝的源 👇 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/ cnpm的源 👇 搜索地址：http://cnpmjs.org/ registry地址：http://r.cnpmjs.org/ 软件实现的换源方式smart-npm这是当前比较火的一个工具, 它可以让你在使用 npm install时自动从国内的镜像下载，而在你使用 npm publish 又能发布到官方的 registry 上, 相关详情请见 👉 GitHub项目地址 cnpm类似的软件还有cnpm使用命令npm install -g cnpm进行安装. 一般用法与npm一致，但是除了npm的功能之外，它还有一些自己的拓展命令，具体用法请使用命令cnpm -h进行帮助。 nrmnrm(npm registry manager)是npm的镜像源管理工具，我们可以用它来切换npm的镜像源。使用命令npm install -g nrm进行安装. 命令nrm ls用于展示所有可切换的镜像地址 命令nrm use cnpm可以直接切换到cnpm上了, 其他的源也可以如此切换还有添加和删除源等操作, 具体请使用命令nrm -h进行帮助.使用nrm需要注意的是当你切换到非官方源之后如果需要使用npm publish发布项目的话, 需要先手动切换回官方源才可以. maven官方的maven repo网站, 可以搜索需要的组件与相关依赖.就我所知, 目前国内的也就阿里的maven源算好用的了, 添加方法: 修改maven根目录下的conf文件夹下的settings.xml文件添加如下内容 &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;aliMaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; 也有老哥写好了的配置文件, 供参考👉阿里maven配置文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[取消Wox界面下的鼠标选中特性]]></title>
    <url>%2Fpost%2F%E5%8F%96%E6%B6%88Wox%E7%95%8C%E9%9D%A2%E4%B8%8B%E7%9A%84%E9%BC%A0%E6%A0%87%E9%80%89%E4%B8%AD%E7%89%B9%E6%80%A7.html</url>
    <content type="text"><![CDATA[Wox是一款windows系统下的快速启动器, 类似于OS X系统下的Alfred(当然了,没有Mac的我并没有用过…), 反正就是炒鸡好用的一款应用了, 具体的使用呢,可以参考少数派的这篇文章. 如果你用过, 那么你会发现在官方发布的版本里, 一直存在一个非常蛋疼的特性, 就是鼠标的选中: 搜索结果出现后, 如果你的鼠标停留在栏目下方, wox会默认鼠标所在的地方为焦点, 然后选中鼠标指向的那个搜索结果, 如果这时你直接回车的话, 会导致误选, 尤其是在误选了大型应用的时候, 不仅耽误时间而且影响心情, 但是官方一直没有在发布的版本中加入这个特性的开关. 问题解决过程在我误选了不知多少次并满怀希望的期待官方能加入该特性开关却一次次落空后, 我去官方的github项目上查找了一下相关的issue, 发现果然之前就有人提过这个问题, 而且不只一个, 而且有国内的网友也有国外的,而且最早在17年1月就有人提出了, 不知道Wox官方到底在不在乎用户体验. 看到这个issue下的CrazyCoder提出了解决办法, 刚好repo中已经写好了appveyor的配置文件, 于是我就直接fork了wox项目, 修改该句赋值为false, 然后在appveyor上直接build了该项目, 得到artifacts后, 我试用了下, 鼠标焦点的问题是解决了, 但是在你用鼠标点击某条搜索结果时, 会出现driver error的报错窗口, 如下图: 估计是应该是刚才修改代码导致的, 在项目里搜索了一下关键词driver, 并没有结果, 说明这个error应该是wox调用window相关接口的时候出现的, 那么我们要修改就该在wox代码里找到调用执行的地方, 那肯定是与刚才修改的OnMouseEnter函数有关了, 在项目里检索了一下关键词OnMouseEnter, 发现在该位置存在一句调用&lt;EventSetter Event=&quot;MouseEnter&quot; Handler=&quot;OnMouseEnter&quot; /&gt;,监听了MouseEnter事件, 于是直接将该句注释, 用appveyor又重新build了一遍, 这次成功了.虽然解决了鼠标影响搜索结果的焦点问题, 但是没法再使用鼠标来选择使用哪条搜索结果了(但是如果已经选中了一条结果, 这时用鼠标点击wox界面的任意一处,都会打开这条结果,也就是说,你在wox界面上不管使用鼠标的左击或右击,都操作的是当前键盘选中的那条结果), 只能使用键盘来进行选择, 这是一个局限性. 分享 该项目在我的github上的地址; 该项目在我的appveyor上的地址, 修正后的wox的artifacts文件下载地址, 需要使用的话直接下载exe文件即可, 注,这里的1.3.2版本对应的是官方发布的1.3.4版本,因为项目里的appveyor配置文件中的版本号我没有改;]]></content>
      <tags>
        <tag>工具</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ownCloud私有云搭建]]></title>
    <url>%2Fpost%2FownCloud%E7%A7%81%E6%9C%89%E4%BA%91%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[ownCloud是一个自由且开源的个人云存储解决方案, 提供服务器和客户端, 且客户端软件全平台支持, 也可以通过浏览器访问, 我们用来搭建私有云非常方便. 环境准备服务器需提前安装nginx/apache,mysql,以及php(5和7都可以,建议7). 我的环境是nginx+mysql+php7.建议直接安装lnmp, 我使用的是lnmp一键安装包. 安装在这里我使用手动安装的方式, 因为自主性更强. 从官网下载地址下载自己所需的安装包后(我下载的版本是10.0.7), 解压到网站主页目录, 例如, 我在自己的服务器上添加了一个owncloud.safeandsound.cn的虚拟主机, 那么lnmp会把该网站的主页目录设置为/home/wwwroot/owncloud.safeandsound.cn, 那么我将安装包解压到该目录即可:tar xvf owncloud-10.0.7.tar.bz2 -C /home/wwwroot/owncloud.safeandsound.cn, 随后将/home/wwwroot/owncloud.safeandsound.cn/owncloud目录中的所有内容全部提取到/home/wwwroot/owncloud.safeandsound.cn中即可: cd /home/wwwroot/owncloud.safeandsound.cn/owncloud &amp;&amp; mv * .. 随后进入mysql应用中添加owncloud以后需要使用的数据库: create database owncloud; grant all on owncloud.* to &#39;root&#39;@&#39;localhost&#39; identified by &#39;root用户的密码&#39;; flush privileges;` 访问所部署的服务器的地址，即可到达如下页面： 我们填写设置内容，数据库配置填写我们刚刚设置的mysql相关内容： 当完全部署成功后再访问该服务则会出现如下登录页面，登录即可使用： 注: 如果在设置管理员账号后跳转到404页面, 你可以在对应虚拟主机配置文件里的include enable-php.conf;替换为include enable-php-pathinfo.conf;lnmp一键安装包的nginx配置文件在/usr/local/nginx/conf/vhosts/ docker+owncloud我们也可以使用docker中的ownCloud镜像来进行我们自己云盘的搭建 docker pull owncloud docker run -itd --name owncloud -p 8081:80 -v /root/forDocker/owncloud:/var/www/html/data owncloud #owncloud镜像内置了有SQLite数据库,如果你想要使用mysql作为数据库的话, #你还需要提前构建mysql的容器, 然后在构建owncloud容器的时候使用--link参数将它们连接,这样两个容器才能够通信 参数-v /root/forDocker/owncloud:/var/www/html/data将/root/forDocker/owncloud挂载到容器的/var/www/html/data目录，让你上传的文件能保存到宿主机本地，这样即使删除容器你的文件也不会丢了。后续的配置与之前的安装一致, 使用docker镜像的安装方式更加的方便简单 关于上传文件这里以docker容器为例. 如果你尝试直接将文件移动到你的owncloud用户文件目录(/root/forDocker/owncloud/username/files)里, 然后想要从owncloud操作界面共享出去, 会发现根本找不到这个文件, 嗯对了, 文件信息是存在数据库里的, 虽然你上传了文件，但是ownCloud的数据库里并没有这个文件的信息, 所以前端也就展示不出来了。 我们需要使用owncloud安装目录中的occ脚本来帮我们扫描文件并添加到数据库中去:我们使用docker exec -it owncloud /bin/bash命令接入容器, 会发现进入后的当前目录就是/var/www/html, ls一下会看到有一个名为occ的文件, 我们使用命令sudo -u www-data php occ files:scan --all扫描所有文件(必须用sudo命令切换到www-data的用户身份, 因为owncloud的所有文件都是归属于该用户的),即可. occ脚本的其他一些用法: 列出用户: sudo -u www-data php occ user:list 扫描指定用户的所有文件: sudo -u www-data php occ files:scan username 扫描指定目录: sudo -u www-data php occ files:scan --path=/path/of/dir 如果不想要看执行后的消息可以加上-q参数 详细用法可以使用sudo -u www-data php occ -h查看 赘述如果登录后页面上方有黄色背景的提示:There were problems with the code integrity check. More information…, 说明配置方面存在某些细节问题, 点击进去查看根据提示逐一修复即可。]]></content>
      <tags>
        <tag>ownCloud</tag>
        <tag>私有云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习笔记(基础命令)]]></title>
    <url>%2Fpost%2FDocker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4).html</url>
    <content type="text"><![CDATA[本文记录了我对docker基础命令的学习, 并自己搭建了一个小的示例应用集群. docker相关产品简介关于docker的wiki介绍。docker官网在此。 docker hub是docker公司提供的公共registry, 有点类似于GitHub, 用户可以将自己的镜像免费保存到公共仓库里, 公共仓库不限, 每人有一个免费的私有仓库, 当然你也可以购买更多. docker store中的产品都是通过了docker官方认证的, 所以至少在官方看来肯定是安全的. docker提供的虚拟化方式使得我们可以快速搭建出一套可复用的开发环境, 而且docker在以镜像为基础构建出的容器十分轻量化, 大部分容器基本都可以实现秒开;它以容器为开发, 测试和发布的单元, 将所有相关的组件和环境都封装到容器中, 这样就巧妙的解决了开发的应用在不同平台之间依赖问题, 且能保证应用即使在不同平台下的实际使用中也能达到高度一致的效果. 情景举例举个可能不是很合适的例子吧, 比如以后工作, 有一天六点要下 班了, 老板突然打电话我说”哎,文杰, 明天有一个web应用要测试, 我给你一台服务器, 你现在简单部署一下吧”, 那我这(要)么(涨)热(工)心(资), 不能拒绝吧, 拿到后台的程序一看是Java写的, 那我在服务器上起码得装lnmp和jre吧, 好的, 就算装的快吧, 配置环境加上部署前后端再简单测试一下半个小时搞定, 我跟老板说完成了. 等我收拾完了要走了, 他又打过来说, “哎呀,搞错了, 给你的那台服务器是运维他们用的, 你重新弄一下吧”, 于是我又花了半个小时重新配置环境&amp;部署, 终于结束了, 老板又说”这个应用在明天测试里也有对负载方面的压力测试, 我再给你四台服务器, 你部署一下, 再做个负载均衡吧”(这时我会想是不是他故意针对我), 那我估计照我之前的方法来配置的话今晚我得八九点才能回家了. 当然, 这个例子可能并不契合现实(毕竟我没有实习过, 并不知道公司的实际生产环境/操作流程如何), 但是我们能够看出来对于这种在生产环境配置上的重复操作, 像我这种传统的方法是很浪费时间的, 而且如果对于生产环境还存在版本方面的要求, 那么在今后的维护与部署会更加麻烦, 项目的持续交付与持续部署过程中可能还存在版本回滚的问题. 这时, docker就是一个很好的选择, 我们可以在一台机器上构建需要的镜像, 然后发布我们镜像, 再在其他的主机上拉取镜像并进行部署. docker命令的学习我是参考着Docker——容器与容器云(第2版)学习的docker命令, 如果没有书的话可以参考此文中的命令讲解 搭建一个小的应用集群我们现在搭建一个后台是java,前端是php脚本与后台交互, 使用haproxy进行负载均衡的一个添加用户的小应用.内容只求简单, 主要是理解对docker的操作. 这里的示例是在linux环境下进行的。首先建议将docker的镜像源更换为国内的, 这样能大大提高下载速度(我这里更换的是中科大的源,尤其是用学校的服务器🙈教育网内传播,速度相当快了): echo &#39;{&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]}&#39; &gt; /etc/docker/daemon.json 如果是windows的环境则需要在图形化界面的docker -&gt; setting -&gt; daemon -&gt; Registry mirrors里面进行设置添加 创建容器接下来创建我们需要用到的容器: #创建mysql容器, 通过设置环境变量&quot;MYSQL_ROOT_PASSWORD&quot;来设置root用户密码, #最后的两个参数是设置编码的, 否则持久化到数据库的中文将成乱码 docker run -d --name mysql --env MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #创建java容器用来运行我们的java后台,将其8080端口映射到宿主机的8080端口, #使用--link参数将其与mysql容器链接,使二者可以通信 #将D盘的/forDocker/java目录挂载到其/root/java目录, 方便我们进行文件的传输 docker run -itd --name java -p 8080:8080 -v /root/forDocker/java:/root/java --link mysql:mysql java #创建一个php容器来运行我们的第一个前端 服务器,其8081端口映射到宿主机的8081端口, #使用--link参数将其与java容器链接,使二者可以通信, #将D盘的/forDocker/php-app1目录挂载到其/root/php-app1目录, 方便我们进行文件的传输 docker run -itd --name php-app1 -p 8081:8081 -v /root/forDocker/php-app1:/root/php-app1 --link java:java php #创建另外一个php容器来运行我们的第二个前端 服务器,其8082端口映射到宿主机的8082端口, #使用--link参数将其与java容器链接,使二者可以通信, #将D盘的/forDocker/php-app2目录挂载到其/root/php-app2目录, 方便我们进行文件的传输 docker run -itd --name php-app2 -p 8082:8082 -v /root/forDocker/php-app2:/root/php-app2 --link java:java php 配置后端容器这里我用spring简单写了个添加用户的程序, 项目地址, 前后端都在项目中(前端在web文件夹中,用php写的), 如果你本地有java/mysql/php的开发环境, 可以配置一下项目后跑一次试试, 如果没有, 我们下面就要使用docker进行部署了. 首先针对我们的java后端程序, 我们要先进入mysql容器新建一个我们要使用的数据库, 使用命令docker exec -it mysql mysql -uroot -p123456进入mysql后, 使用命令create database test;创建名为test的数据库.然后我们需要知道mysql容器的ip地址, 使用命令docker inspect mysql|grep &#39;&quot;IPAddress&quot;:&#39;, 我们将查出来的IP地址(例如172.17.0.2)填入项目配置文件src/main/resources/application.yml中的spring &gt; datasource &gt; url配置项中，需加协议头和在后面指出数据库(如jdbc:mysql://172.17.0.2/test)。 接下来我们要将spring项目打包，这里使用maven构建工具, 在项目根文件夹下使用命令mvn package -D skipTests进行打包处理, 得到target/test-0.0.1-SNAPSHOT.jar文件, 将其放到/root/forDocker/java下, 运行命令docker exec -d java java -jar /root/java/test-0.0.1-SNAPSHOT.jar, 这样后台程序就在运行了. 配置前端容器然后我们需要在php容器中运行前端的页面, 首先我们使用命令docker inspect java|grep &#39;&quot;IPAddress&quot;:&#39;得到java容器的ip地址(例如172.17.0.3), 然后使用命令docker inspect php-app1|grep &#39;&quot;IPAddress&quot;:&#39;和docker inspect php-app2|grep &#39;&quot;IPAddress&quot;:&#39;分别得到两个php容器的ip地址(例如172.17.0.4和172.17.0.5), 然后我们修改web/index.php文件:在&lt;h3&gt;添加一个用户&lt;/h3&gt;上方添加&lt;h1&gt;这是php-app1&lt;/h1&gt;然后将所有的http://localhost:8080都替换为http://172.17.0.3:8080(这是java容器的地址)共两处, 成功后将其保存并复制到/root/forDocker/php-app1目录下,然后继续修改,将&lt;h1&gt;这是php-app1&lt;/h1&gt;修改为&lt;h1&gt;这是php-app2&lt;/h1&gt;, 然后保存并复制到/root/forDocker/php-app2 接下来我们运行两个容器的前端脚本, 分别使用命令docker exec -d php-app1 php -S 172.17.0.4:8081 /root/php-app1/index.php和docker exec -d php-app2 php -S 172.17.0.5:8082 /root/php-app2/index.php后,我们分别访问宿主机地址的8081和8082端口, 都可以看到已经出现了相应的页面,而且已经可以进行用户的添加操作. 负载均衡其实到这里你已经对docker的操作有了一定认知了, 下面我们再进行一个简单的配置, 进行一下负载均衡(当然了,这里两个前端共用一个后台, 所以并没有多大的意义, 只是对于前端的一个分流而已):这里的负载均衡软件我使用的是haproxy, 不仅完全免费而且在负载均衡方案中也是很靠谱的一个选择, 有兴趣的可以去深入了解一下haproxy.cfg配置文件（这里haproxy并不是重点，所以就不细说了，直接贴出配置）: global log 127.0.0.1 local0 maxconn 4096 chroot /usr/local/sbin daemon nbproc 4 pidfile /usr/local/sbin/haproxy.pid defaults log 127.0.0.1 local3 mode http option dontlognull retries 2 maxconn 2000 balance roundrobin timeout connect 5000ms timeout client 50000ms timeout server 50000ms listen php_proxy bind *:8083 stats enable stats uri /haproxy-stats server php-app1 php-app1:8081 check inter 2000 rise 2 fall 5 server php-app2 php-app2:8082 check inter 2000 rise 2 fall 5 我们将该文件保存到/root/forDocker/haproxy目录中, 然后运行 docker run -itd --name haproxy -p 8083:8083 -v /root/forDocker/haproxy:/usr/local/etc/haproxy --link php-app1:php-app1 --link php-app2:php-app2 haproxy 如果成功的话, 那么这时你访问宿主机8083端口并不停的刷新页面,会出现php-app1和php-app2页面轮流出现的情况(因为我们在配置文件里选择的负载均衡策略是roundrobin,即简单的轮询). 构建镜像并推送到hub我们可以登录我们的docker hub账号, 使用docker login命令进行登录操作后即可将本地的容器打包成镜像后推送到dockerHub进行管理. 在推送之前, 我们需要先将容器构建成镜像, 这里以我们之前创建的java容器为例: 使用docker commit java java:java-test命令进行构建, 现在我们使用docker images命令查看本地的所有镜像会发现多了一个仓库名为java,标签名为java-test的镜像, 类似: REPOSITORY TAG IMAGE ID CREATED SIZE java java-test 6525b1d89a4e 12 minutes ago 643 MB 登录dockerHub后我们直接进行推送试试, docker push java, docker的守护进程提示error: Error response from daemon: You cannot push a &quot;root&quot; repository. Please rename your repository to docker.io/&lt;user&gt;/&lt;repo&gt; (ex: docker.io/yourusername/java) 这是因为我们直接推送的话(此时没有打tag也没有注明用户名), Docker会认为这是一个root仓库。root仓库是由Docker公司的团队管理的, 所以拒绝了我们的推送请求. 现在我们加上用户名再试试docker push yourusername/java, 结果提示我们: The push refers to a repository [docker.io/yourusername/java] An image does not exist locally with the tag: docker.io/yourusername/java 提示信息显示本地并没有标上docker.io/yourusername/javatag的镜像, 这是因为之前我们commit进行构建的时候没加上我们的我自己的用户名, 这样推的话这个镜像的repo是java而不是yourusername/java, 所以我们需要再打一次tag将repo改为yourusername/java: docker tag java:java-test yourusername/java:java-test, 这样再使用docker push yourusername/java就可以了, 所以你知道了最好就是在构建的时候就加上自己的用户名, 这样不用二次打tag就能推送了. 推送完成后就可以在你的dockerHub页面看到相关的镜像了. 注:打tag的时候如果不标明的话默认是lastest, rmi删除的时候默认也是lastest, 所以如果你的tag名并不是lastest而在rmi的时候不手动注明tag的话, docker会报错 赘述windows下disk image冲突有时我们修改了docker设置中disk image location的位置, 后来docker又因为崩溃被我们重置了, 重置后重启docker我们会发现原来的镜像都没有了, 我们修改disk image location到之前的位置也无法成功, 因为在现在的docker设置下(image默认存放在C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks文件夹)有一个MobyLinuxVM.vhdx, 原来我们修改的后保存的也有一个MobyLinuxVM.vhdx, 两个重名文件而且无法融合在一起, docker不知道如何去处理, 这样的情况下我们可以先退出docker, 然后将默认存放文件夹(C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks)下的MobyLinuxVM.vhdx删除, 再将之前修改位置的MobyLinuxVM.vhdx移动到默认文件夹下, 再启动docker, 就可以继续使用原来的image了, 你也可以重新修改 disk image location的位置]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网中实现免费上网的方法(2)]]></title>
    <url>%2Fpost%2F%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91%E7%9A%84%E6%96%B9%E6%B3%95(2).html</url>
    <content type="text"><![CDATA[该方法需要拥有校内服务器,且该服务器能正常访问外网.原理很简单,就是访问不需要花钱的内网,然后将流量全部发到校内服务器上,让该服务器做代理进行请求转发.该方法不讨论ipv6,因为在校园网有v6地址你就已经可以免费上网了. 代理服务器设置google搜索关键词 “shadowsocks 搭建 代理服务器” 本地配置 安装ss,配置代理服务器为校内的那台服务器地址即可,各项配置正确即可在能访问服务器的前提下访问到百度一类未被墙的网站. 这时浏览器能上网但是其他软件(像迅雷/百度网盘)没法上网怎么回事?首先要提一下ss在本地实现代理的机制.以Windows系统为例,设置里有“系统代理”的选项，如果启用该选项,填上相应的配置,那么系统会自动在浏览器的设置里添加代理地址,可以这样查看,这样的话，浏览器和其他的支持这种代理设置的软件就会在访问网络时将流量发到代理地址上,但是实际上,支持系统代理的软件非常少,一般来说只被浏览器普遍支持(所以你知道为什么直接启用ss后除了浏览器为什么其他软件都不走ss代理)。说明了这些,那么ss怎样实现在本地的代理就很容易明白了,你第一次运行ss,它会自动设置系统代理,代理地址为本地回环地址加上端口(默认为1080,可手动更改),那么浏览器的流量发到这个代理地址后,ss进行处理(根据代理规则出口流量与加密等),其实localhost:1080后面还跟了一个文件,它就是PAC里面定义了至少一个JS函数,代理规则也都在里面,它通过JS函数来确定访问每个URL时所选用的合适代理,再将流量出口.知道了这些,你就应该明白,如果想要其他软件也用上系统代理,那么我们需要将这些软件的流量也转发到系统代理的地址上.在此我选择了proxifier来进行可选择性的代理.具体的使用请自己搜索. 但是此时你只能访问未被墙的网站,因为你的代理服务器在墙内. 二次代理想上google的解决办法当然就是二次代理了,有两种实现办法: 1.我先将流量发到自己的校内服务器上,再配置校内服务器,让它把流量发到墙外的代理服务器; 2.我直接在自己的PC上挂两个SS客户端,一个配墙外代理服务器(占1080端口),一个配校内服务器(占1081端口),流量都发到1080端口,利用pac进行选择性代理,然后利用ss客户段端设置中的Forward proxy添加一个本地1081端口的sock5代理,让1080端口的流量经过选择性代理后再全部发送到1081端口通过校内服务器出口到外网. 对于第一种方法,这里贴一个GitHub项目,它只要一条命令就可以实现二次代理,需要注意的是使用转发功能之前需要先切换到develop分支. 但是第一种方法在我的使用过程中体验并不好,第一,速度比较慢(可能是我那台服务器年纪比较大,计算处理能力较低,所以两次加密处理起来比较慢);第二,就是如果你的墙外代理服务器有多台就需要开多个端口;所以我放弃了法一,采用了法二,大概过程在上面已经说了,在此不赘述;对于proxifier的规则配置说两点,首先,default选项填1080端口;如果像我一样需要校园认证等操作不需要走代理(我这边这种过程是不能走代理,因为学校的校园网认证对于ip段做了跳转,如果是服务器一类的地址去访问则直接跳转到学校官网首页而非认证校园网登录页面)就新增加一条规则,将其action设为direct,其中的target hosts对于ip地址或网址进行匹配. 自动注册热键的ss客户端在github的shadowsocks-windows项目中下载的版本到目前为止是没有自动注册热键功能的,也就是你设置热键后每次重启电脑都要手动重新注册一下,对有热键需求的人来说肯定不方便,但是自动注册的功能已经被voq开发出了,GitHub项目在此.基于此,我用appveyor编译了一下, 生成了exe文件,appveyor项目在此,debug版比release版报错更详细,exe文件下载链接在artifacts里面,有需要的可以下载. 手机怎么办在此以IOS系统为例介绍,Android类似.我使用的代理软件是Shadowrocket,现在app store上已经封停了,无法下载,可以使用各类助手,如果自己当前使用的助手平台上也被封了,可以下载我从pp助手获得的ipa文件-&gt;下载链接.需要注意的是,代理规则应该是默认全部代理,对于一些特定的网址(如校园网的认证登录网址)应该进行匹配直连(direct).而在shadowrocket的使用中,我发现使用FINAL进行默认的规则并不可行,如配置文件这样写: [Rule] IP-CIDR,127.0.0.1,DIRECT FINAL,PROXY 这表示我希望除了发到127.0.0.1回环地址的流量进行直连外,其他的全都进行代理;然而实际却并不可行,它对其他的流量并不会进行默认代理,不知道是不是软件本身的问题.在此我对域名后缀进行了关键字匹配,只要是使用域名访问的都进行转发(反正常用的域名后缀就那么多个),如DOMAIN-KEYWORD,com,PROXY,这样在访问所有.com域名后缀的站点时都走代理. 根据报错来设置代理规则例如比如我使用命令hexo s来启用heox本地服务器查看刚更新的内容效果时，访问localhost:4000站点网页打不开或者网页内容显示不完全，在这种情况下就要怀疑是代理的问题了，去查proxifier日志（建议在proxifier菜单栏中的log一栏里将file log选择为Errors only,这样就会把报错日志保存到本地文件中，查起来很方便），其中显示： [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) close, 335 bytes sent, 0 bytes received, lifetime 00:01 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) close, 0 bytes sent, 0 bytes received, lifetime 00:01 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) open through proxy 127.0.0.1:1080 SOCKS5 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) open through proxy 127.0.0.1:1080 SOCKS5 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) warning : GetSockName() cannot work properly for the IPv4-IPv6 mixed connection. 一看发现是访问本地v6地址的4000端口出现的问题（为什么要走v6地址的原因未知），那就很简单了，我们把::1(代表v6的本地回环地址,同v4的127.0.0.1)加入到Localhost中,规则设为direct 一些注意点注意如果使用过程中有些需要使用网络的软件发生异常(如启动不响应),应该要去查proxifier日志,看看是不是代理的问题,如果没有产生日志应该将所有代理关掉再重启异常的软件试试. 赘述免费上网并不是目的, 也不是为了抖机灵, 整个过程只是对自己动手能力的锻炼而已.]]></content>
      <tags>
        <tag>运用</tag>
        <tag>网络</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins学习笔记]]></title>
    <url>%2Fpost%2FJenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[之前使用AppVeyor实现了提交源码到仓库然后自动拉取、生成静态页面并推送到Github Pages仓库的功能，但是我想在自己的服务器上再做一个同步更新的博客站点，因为最近在学node，所以先开始想着用node写一个监听的服务器，然后利用githook来自动拉取代码，搜了下相关的库，果然有一个叫github-webhook-handler，操作了半天，一直报node版本的错，怎么调都不行……默默放弃了，还是选择了Jenkins（之前一直担心Jenkins会额外消耗比较多的资源，因为自己的云服务器配置较低，使用后感觉自己多虑了）。在此记录一下简单的使用过程。 安装Jenkins安装Ubuntu 安装： $ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add - $ sudo echo &quot;deb http://pkg.jenkins.io/debian-stable binary/&quot; &gt; /etc/apt/sources.list.d/jenkins.list $ sudo apt update $ sudo apt install jenkins $ systemctl start jenkins 登录并创建账户安装后第一次使用需要手动获取密码来登录： $ cat /var/lib/jenkins/secrets/initialAdminPassword 得到密码密码后访问你服务器的8080端口（Jenkins默认8080端口，可以通过修改配置文件【Ubuntu下是/etc/default/jenkins】中的HTTP_PORT参数来指定），打开页面后提示你输入密码进行访问，将密码粘贴进去后进入操作界面：选择安装推荐的插件，或者你也可以自选：安装完成后会跳转到创建用户页面让你注册用户：“Save and Finish”后提示”Jenkins is ready！”之后如果要添加用户/修改密码可以在系统管理的管理用户里操作。 添加一个GitHub项目的构建创建自己github账户的access tokens关于生成personal access token的官网介绍。到你账户的settings -&gt; Developer settings -&gt; Personal access tokens，选择Generate new token,Token description可以填一些描述性文字，Select scopes里必选repo和admin:repo_hook两项（子内容全选），如下图：完成后点击Generate token，不出意外则跳转到生成成功页面，记住复制红框中生成的token： 添加github账号到jenkins为了能够使用我们的GitHub账号进行操作，我们需要在Jenkins系统设置中添加自己的github账户：系统管理 -&gt; 系统设置 -&gt; GitHub Servers ,如图：点击“Add GitHub Server”Name填自己的github用户名在Credentials选择Add一个Jenkins，其中Kind选择为Secret text，如图：将刚才生成的token粘贴进Secret栏中，点击add，添加成功。 完成后点击Test connection效果为： Credentials verified for user ****, rate limit: **** 给Jenkins添加权限编辑Jenkins配置文件(ubuntu下是/etc/default/jenkins),将 JENKINS_USER=$NAME 修改为 JENKINS_USER=&quot;root&quot; 保存退出后执行命令： $ chown -R root:root /var/lib/jenkins $ chown -R root:root /var/cache/jenkins $ chown -R root:root /var/log/jenkins $ service jenkins restart 即可。 添加一个Jenkins构建 在你的github项目里添加webhook:项目的settings中左边栏的webhooks,选择add webhook,Payload URL中填你的服务器地址(ip或域名)与jenkins端口再加上”/github-webhook”,如http://182.254.133.70:8080/github-webhook 点击jenkins左边栏中的”新建”，选择“构建一个自由风格的软件项目”，如图：点击”OK”，进入配置页面，源码管理选择Git, Repository URL:填上你项目的repo地址 Credentials:点击Add按钮添加一个Jenkins，Kind选择默认的Username with password将github的账号和密码填到相应的Username和Password中，点击Add完成添加。 构建触发器:选择GitHub hook trigger for GITScm polling,能够接收github在项目提交新的commit后推送的事件来自动触发构建 构建:选择添加自己需要的构建步骤，这里因为我需要的是自动拉取GitHub Pages库里的静态页面并部署到服务器上，所以我选择Execute shell，填上命令，如图： 保存后在左边面板上点击“立即构建”左下方Build History中结果前面的小球显示为蓝色则成功，为红则失败。 Docker安装方式我们也可以使用docker镜像来构建我们的jenkins应用: docker pull jenkins &amp;&amp; \ docker run -itd --name jenkins -p 8080:8080 -p 50000:50000 -v /home/forDocker/jenkins:/var/jenkins_home jenkins #50000端口是jenkins的slave管理端口, 如果你用不到也可以不映射 运行完了你会发现我们创建的容器并没有在运行, 我们用docker logs jenkins查看一下日志, 发现存在权限问题 touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions? 这是因为在jenkins构建的过程中它在容器中新建了一个uid和gid都为1000的jenkins用户,从官方的dockerfile中我们可以看到.所以我们要将/home/forDocker/jenkins文件夹修改属主后, 容器里的jenkins用户才能够操作该文件夹: 我们使用chown -R 1000:1000 /home/forDocker/jenkins, 然后重新启动jenkins容器docker start jenkins, 等容器里的jenkins应用启动后我们访问服务器的8080端口即可, 初始密码文件在/home/forDocker/jenkins/secrets/initialAdminPassword文件中, 接下来的操作与之前的一样了. 赘述如果你遇到了github server,webhook以及构建项目等配置都正确,但是构建中的”GitHub hook trigger for GITScm polling”触发器选项一直提示你webhook有问题,那么你应该考虑删掉这个构建项目,重新配置一遍试试.]]></content>
      <tags>
        <tag>工具</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Appveyor学习笔记]]></title>
    <url>%2Fpost%2FAppveyor%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[之前对于备份hexo搭建的博客源码采用的方式是在Github Pages对应的库中新开一个分支，每当源码有重要的客制化变更时都推一次到备份的分支上，但是这样并不是一个好办法，因为，但是新开一个库专门存源码的话又不想每一次更新时推两次（一次到源码库，一次到GitHub Pages的静态页面库）怎么办？答案就是使用CI。我们直接推源码的更新到源码库，然后让CI工具自动拉取源码生成静态页面后再自动推到静态页面库中。如题，这里采用的CI工具是appveyor。 appveyor简介appveyor的特点就是操作全部上云, 与用户平台无关, 你可以在采用本地appveyor.yml配置文件(代码托管方[如github]必须提供了相关API)或在appveyor项目里配置两种方式对你的CI项目进行配置, 项目会运行在官方预安装了很多软件的虚拟机中;项目按照你的配置build完成后会将结果以邮件的方式反馈给你(有时延迟比较大, 需要等个二三十分钟). 反正我个人感觉非常好用, 非常非常好用, 嗯!具体的请自己去了解吧. 基本使用首先当然是注册账号了, 用github账号登录就好了(反正后面也是要绑定的). 创建一个项目这里以GitHub上的项目为例讲一下push commit到GitHub仓库后appveyor自动拉取项目并进行操作的过程: 登录上去后点NEW PROJECT添加项目; 在GitHub账户里选择项目, 点击ADD 在GitHub仓库里添加appveyor.yml配置文件, 因为配置的选项有很多, 具体的写法请查看appveyor文档, 这里只举一个很简单的例子:appveyor自动拉取github项目后, 在build之前列一下当前目录里的文件, 然后在build过程中只打印一句”this is just a test”.我们在GitHub仓库的根目录里添加一个文件, 取名为appveyor.yml, 然后在里面输入: before_build: - dir build_script: - echo &quot;this is just a test&quot; 然后保存, commit即可.随后我们到appveyor项目界面可以看到已经自动在运行了, console里会打印出如下类似内容Build started git clone -q --branch=master https://github.com/VanjayDo/test.git C:\projects\test git checkout -qf 65d495665aae3ead5e4ddc06c88a67246847b621 dir Volume in drive C is Windows Volume Serial Number is D4AB-4044 Directory of C:\projects\test 12/12/2017 01:54 AM &lt;DIR&gt; . 12/12/2017 01:54 AM &lt;DIR&gt; .. 12/12/2017 01:54 AM 68 appveyor.yml 1 File(s) 68 bytes 2 Dir(s) 40, 973, 512, 704 bytes free echo &quot;this is just a test&quot; &quot;this is just a test&quot; Discovering tests...OK Build success 这就算是一个成功的例子了, 整个配置文件很简单, 如果需要比较复杂的操作可以参考appveyor-yml的参考文档, 具体的也可以查appveyor docs 基本流程整个过程是这样的: 你添加自己的GitHub仓库后, appveyor会自动到该GitHub仓库的设置里添加一个webhook(触发事件默认为Pull request和Push), 与当前的appveyor项目绑定, 所以每当你有新的推送时, GitHub会自动触发该webhook; appveyor项目被触发后会先调用GitHub官方的api查看该repo根目录下是否有appveyor.yml配置文件, 如果有就先只下载该文件对项目环境进行配置, 然后clone该repo, 再进行项目的整个build;如果没有配置文件则默认使用msbuild, 即UI配置, 这需要你预先在项目设置里进行配置. 什么?UI配置和yaml配置能不能共存?你问这个啊, 官方文档里写的很清楚了:It’s worth noticing that both appveyor.yml and UI configuration are mutually exclusive. It’s always either YAML or UI - the settings from each are not merged. If you have appveyor.yml in your repo it will override all settings made on the UI unless explicitly disabled by Ignore appveyor.yml. There are few exceptions, which are:1.Environment variables. Variables defined on UI are getting merged with those ones defined in appveyor.yml. Variable values with the same names are getting overridden with values from UI.2.Notification settings defined on UI are getting merged with those ones defined in appveyor.yml.3.Build version format is taken from UI if it is not set in appveyor.yml. 简而言之就是, 二者不能共存(不能合并), yaml配置文件的优先级更高, 如果有yaml配置则UI配置会全部失效(除非你在UI配置里选择忽略yaml配置文件), 当然, 除了最后列出的三点例外(环境变量[两者都有则合并], 提醒[两者都有则合并]和build版本[yaml没写而UI配置了则用UI的]). 要推送artifacts怎么办如果你需要在build完成之后将成功生成的产品发布/推送到你的GitHub仓库的话, 那就还需要进一步设置.在官方文档的Git push from build也说明了, 这里我以hexo博客为例进行具体说明, 我创建了hexo源码库与静态页面库两个repo, 将源码和博客站点分开, 想要的效果是: 我主动推送更新到源码库中之后, appveyor自动拉取帮我生成静态页面然后推到静态页面库中, 这样博客站点就自动更新了, 这个过程大概是: hexo源码库更新后触发webhook; appveyor项目自动拉取appveyor.yml对环境进行配置, 然后clone项目; 在install部分用npm安装一系列依赖, 在build_script部分生成静态页面, 在on_success部分定义生成成功后进行推送的步骤; build其实主要是hexo g来生成静态页面, 也可能你需要后期处理一下(如压缩代码), 完成build后会将之前定义的artifacts文件夹中的内容(在这里是public文件夹, 即静态页面生成后存放的文件夹)推送到静态页面库中, 大功告成 其实, 整个过程和上面的基本流程相比也就是多了一个推送的步骤而已, 想想, 如果你需要commit到仓库, 除了登录到GitHub还能用什么办法?那就是OAuth token了, 也就是personal access token, 能够通过GitHub认证, 拿到用户完全的操作权限. 具体的操作如下: 生成personal access token基本操作, 不会的请参考官方文档保存生成的token,等会用 加密生成的token到Appveyor加密页面对刚刚生成的token进行加密(加密后的token才能放心的写到appveyor.yml配置文件里)对于这个Encrypt data, 官方文档里也有说明在此.保存加密的token,等会用 配置文件这里我也是在网上复制的配置文件,反正比我写的条理多了 clone_depth: 1 environment: access_token: secure: [填上刚刚加密后的token] install: - node --version - npm --version - npm install - npm install hexo-cli -g build_script: - hexo g artifacts: - path: public on_success: - git config --global credential.helper store - ps: Add-Content &quot;$env:USERPROFILE\.git-credentials&quot; &quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot; - git config --global user.email &quot;%GIT_USER_EMAIL%&quot; - git config --global user.name &quot;%GIT_USER_NAME%&quot; - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\static-site - cd %TEMP%\static-site - del * /f /q - for /d %%p IN (*) do rmdir &quot;%%p&quot; /s /q - SETLOCAL EnableDelayedExpansion &amp; robocopy &quot;%APPVEYOR_BUILD_FOLDER%\public&quot; &quot;%TEMP%\static-site&quot; /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1)) - git add -A - if &quot;%APPVEYOR_REPO_BRANCH%&quot;==&quot;master&quot; if not defined APPVEYOR_PULL_REQUEST_NUMBER (git diff --quiet --exit-code --cached || git commit -m &quot;Update Static Site&quot; &amp;&amp; git push origin %TARGET_BRANCH% &amp;&amp; appveyor AddMessage &quot;Static Site Updated&quot;) 然后在UI设置的Environment里,添加四个环境变量:STATIC_SITE_REPO(是要提交到的repo地址,也就是我静态页面库的地址)，TARGET_BRANCH(repo分支,填master即可)，GIT_USER_EMAIL(GitHub账户的邮箱)和GIT_USER_NAME(GitHub账号用户名),贴上我的供参考:当然, 你也可以直接在配置文件里修改, 直接将环境变量改成相应的值即可. 这样再推送就可以看到appveyor自动进行build了. 赘述“hexo博客自动生成”的npm版本问题使用appveyor自动生成hexo博客静态页面期间遇到了比较诡异的情况:提交后有时候会build成功, 有时候会build失败, 有时候失败了再build一次就成功了, 有时候失败了再build好几次成功不了, 完全是概率问题.以下是错误日志: npm ERR! Windows_NT 6.3.9600 npm ERR! argv &quot;C:\\Program Files (x86)\\nodejs\\node.exe&quot; &quot;C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; npm ERR! node v4.8.4 npm ERR! npm v2.15.11 npm ERR! path C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043 npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall rename npm ERR! Error: EPERM: operation not permitted, rename &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043&#39; -&gt; &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz&#39; npm ERR! at Error (native) npm ERR! { [Error: EPERM: operation not permitted, rename &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043&#39; -&gt; &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz&#39;] npm ERR! errno: -4048, npm ERR! code: &#39;EPERM&#39;, npm ERR! syscall: &#39;rename&#39;, npm ERR! path: &#39;C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.4\\package.tgz.904991043&#39;, npm ERR! dest: &#39;C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.4\\package.tgz&#39;, npm ERR! parent: &#39;babel-traverse&#39; } npm ERR! npm ERR! Please try running this command again as root/Administrator. 看日志好像是权限的问题，Google了一下, 在appveyor官方的github账户中的该issue中提到了将npm版本安装为5.3即可:npm -g install npm@5.3，到底还是版本的问题 appveyor创建Git项目(非github)与GitHub文件下载的API调用相关问题如果创建project时选择的是Git, 即使用Clone URL的方式添加git repo来创建项目的话, 那么源项目中即便有appveyor.yml配置文件也无法使用, 其原因被我在appveyor官方github的一个issue中找到, 因为配置文件的工作原理是appveyor在build创建之前通过Github等托管方提供的API先将配置文件下载下来再自动对运行环境进行配置, 而是使用这个API是需要access token的, 当然, 你可能要问”为什么不直接去下appveyor.yml文件?而非要使用API呢?像octotree一类的插件不就是可以直接下载么?”可是octotree的项目中也说了它也是用的api:Octotree uses GitHub API to retrieve repository metadata. By default, it makes unauthenticated requests to the GitHub API. However, there are two situations when requests must be authenticated:1.You access a private repository2.You exceed the rate limit of unauthenticated requestsWhen that happens, Octotree will ask for your GitHub personal access token. If you don’t already have one, create one, then copy and paste it into the textbox. Note that the minimal scopes that should be granted are public_repo and repo (if you need access to private repositories). 关于API调用速率限制的github官方说明, 简而言之, 未登录则对ip进行限制, 每小时60次;使用登录认证或OAuth token则对用户进行限制, 每小时5000次;所以如果appveyor要使用API的话肯定是使用认证的方式.再回到git方式创建的项目无法使用配置文件的问题上, 你可能要问”既然我在appveyor的账户里填了我的github personal access token, 为什么官方不在这个创建方式上做些判断, 检测到是GitHub/BitBucket等的项目就带上token去拉”, 这……你还不如登录自己的GitHub账号直接fork这个项目, 然后在appveyor里选择github方式创建项目, 万事大吉.总而言之, 如果使用git方式创建项目的话, 就只能使用GUI的方式来配置项目, 不能在git仓库里使用配置文件的方式.]]></content>
      <tags>
        <tag>工具</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派使用笔记]]></title>
    <url>%2Fpost%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[对于入手树莓派 是蓄谋已久现在如愿以偿。本文整理了使用过程中遇到的一些问题。 盒子在实际使用之前建议你买一个盒子, 因为树莓派本身只有一块板子, 如果板子发生弯曲的话里面的印制线路很可能会被折断(树莓派的线路是多层压制在一起的,像一块三明治一样), 而且很多焊点和组件很可能因为你的操作不当(比如把它放在铁质桌子这种导体上)而发生短路, 有了盒子也就多了一层保护. 安装系统 下载镜像raspberryPi官方的镜像集合在这里，kali的镜像在这里 安装安装系统的网上教程很多，我使用的是Raspbian系统,用rufus直接烧录进去tf卡里；当然也可以将镜像烧录到U盘，然后开机进bios从U盘安装系统，这种方法需要使用显示器和有线键盘。 指示灯简介树莓派上除了rj45网口的led指示灯（speed led【黄灯】：长亮代表100M或者更高速的网卡，不亮代表10M网卡，但有些千兆网卡的灯以颜色区分，不亮代表10M/100M，黄色常亮代表1000M；active led【绿灯】：灯灭代表未连接，长亮代表已连接上但无数据收发，闪烁代表有数据收发）外在电源接口处还有两个状态灯，一个红灯一个绿灯，红灯是电源灯，接通后常亮，如果闪烁说明当前电源不稳定；绿灯是读写指示灯，在存储卡发生数据读写时闪烁，否则熄灭，以此来判断当前是否发生数据读写。 连接注意: 系统默认ssh服务不随机自启动，我们将tf卡插在笔记本上，在显示出的boot分区中创建一个名为ssh的空白文件来触发ssh服务的开启 网线直连笔记本我采用的方式是笔记本网线直连树莓派，然后将笔记本无线网卡的网络共享给以太网卡，这样不仅树莓派能够上网，我也能ssh到树莓派。网线连接好、树莓派主板加电启动之后，我们使用arp命令扫描一下本地的mac与ip映射表，并抓取出树莓派的地址映射： C:\Users\jay&gt; arp -a |findstr &quot;b8-27-eb&quot; 192.168.137.232 b8-27-eb-8e-9e-fe 静态 “b8-27-eb”是树莓派网卡mac地址的前三个字节，也就是树莓派制造商的OUI（组织唯一识别符），从IEEE官方提供的OUI列表，我们可以查询到。获取到ip后我们使用ssh连接，默认用户名为pi，密码为raspberry。 路由器连接如果第一次启动的时候手边没有网线，但是有路由器，可以配置Wi-Fi连接。和第一次开机触发SSH服务的方法一样，将tf卡插在笔记本上，在显示出的boot分区中建立名为wpa_supplicant.conf的文件，里面添加如下内容： country=GB ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;Wi-Fi名称&quot; psk=&quot;Wi-Fi密码&quot; priority=填写数字，数字越大代表优先级越高 } 树莓派主板加电，稍等几分钟，就会连上Wi-Fi了。 连接显示器遇到的问题我有一次在连接显示器的时候突然黑屏了，在网上搜索一下后得知需要修改boot目录下的config.txt文件，将hdmi_safe=1的注释取消掉。可以参考该教程解决使用显示器的问题 使用root账号root账号默认未启用，如果要使用root账号，我们需要: #设置root账号密码 sudo passwd root #启用root账号 sudo passwd --unlock root 如非必要不建议使用，毕竟账号pi使用sudo无需输入命令，方便的同时也更安全。 使用wifi可以直接编辑/etc/wpa_supplicant/wpa_supplicant.conf文件，在后面追加 network={ ssid=&quot;Wi-Fi名称&quot; psk=&quot;Wi-Fi密码&quot; priority=填写数字，数字越大代表优先级越高 } #如果有多个可选wifi可以继续添加 network={ ssid=&quot;第二个Wi-Fi的名称&quot; psk=&quot;第二个Wi-Fi的密码&quot; priority=填写数字，数字越大代表优先级越高 } network={ ssid=&quot;第三个Wi-Fi的名称&quot; psk=&quot;第三个Wi-Fi的密码&quot; priority=这里填写数字，数字越大代表优先级越高 } #以此类推 完成后重启即可 静态ip有些时候你拔下网线后重新插回去，会导致树莓派重新获取ip，遇到如下的尴尬情况 C:\Users\jay&gt; arp -a |findstr &quot;b8-27-eb&quot; 192.168.137.232 b8-27-eb-8e-9e-fe 静态 192.168.137.240 b8-27-eb-8e-9e-fe 静态 出现了两个地址映射,这是因为重新插回去后树莓派被分配了一个新的ip,而之前的地址映射还存在arp地址映射表中,所以就出现了两个结果.我们可以编辑dhcpcd.conf配置文件来主动获取静态ip sudo vi /etc/dhcpcd.conf 在文件中添加（如果嫌弄乱文件可以搜索”profile static_eth0”这个pattern然后在后面进行修改） #根据自己的实际情况来，以下只是我的配置，仅供参考 interface eth0 static ip_address=192.168.137.232/24 static routers=192.168.137.1 static domain_name_servers=192.168.137.1 完成后重启即可注：千万不要像网上有些教程一样修改/etc/network/interfaces文件进行配置，这样一定是不成功的，因为该文件中已经标注的很清楚了： #For static IP, consult /etc/dhcpcd.conf and &#39;man dhcpcd.conf&#39;]]></content>
      <tags>
        <tag>硬件</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网中实现免费上网的方法(1)]]></title>
    <url>%2Fpost%2F%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E4%B8%8A%E7%BD%91%E7%9A%84%E6%96%B9%E6%B3%95(1).html</url>
    <content type="text"><![CDATA[这个学期我们学校的校园网开始了流（变）量（相）计（卷）费（钱）的策略，不过运营商可以进行代理，所以有的同学使用指定的手机套餐就可以不限流量。但是我的手机卡并不是校园卡，所以使用的还是校园网的单独计费策略，当然套餐里的这点流量对于喜欢看点剧的我肯定是不够用的。平时因为学校机房中有几台服务器在我手里，使用校内流量走代理免费上网完全是没问题的，但是国庆期间因为各种原因，校内服务器对外网络基本全部封闭了，所以代理是走不了了，可是剧还是要看的啊，于是就有了这篇博客。 原理原理很简单，AP使用的是DHCP自动分配ip的策略，我们扫一遍本地网络中的机器，一般都会有在上网的PC，因为AP根据这台PC的mac分配给了它IP地址，而且这台PC登陆了校园网所以已经获取了访问外网的权限，也就是说这个PC的IP是可访问外网的，我们只要拿到它就行了。 因为是DHCP自动分配，所以我们只要拿到它的mac地址就能拿到IP（这种扫描器有很多，nmap也可以），我们先把网断掉，然后到系统的设置里面将网卡的mac地址修改成与之前扫描到的PC一致（这样的修改只是修改了操作系统从网卡中读取并记录在系统中的mac地址的值，并非修改了烧录在网卡中的地址，所以与“mac地址不可修改的说法并不冲突”，当然了，修改烧录的地址也并非不可行，但是这种硬件操作的方法对用户的专业素质要求很高，因为复杂度高风险也大），然后重新启动网卡，连接到AP，查看自己获取到的IP是不是变得跟之前扫描的PC的ip一致，一致则说明欺骗成功，到登录的认证页面刷新查看，显示出来的登录用户应该是PC的主人。 在此只讨论方法，对步骤不进行详细说明。 问题值得一提的是，这种mac地址欺骗的方法得到的免费上网质量可能比较差，因为在AP看来从外网接收到的数据是一个目标的，但实际上是两台电脑在上网，所以数据包的分发会存在问题，可能就会导致服务掉线、下载文件走走停停之类的结果（我测试时使用了室友的mac地址，他的qq出现了掉线情况，我的迅雷下载时走时停），所以如果只是下载电影什么的还是可以的，放在那让它慢慢跑就可以了，但是打局游戏什么的就不要想了。 赘述当然了，上面只是测试下我想法的可行性，实验一下玩玩罢了，实际并没有这么做的必要，毕竟那么多同学是运营商免流的，需要下载大文件临时借个账号就可以了。 对于之前提到的服务器代理校内流量出去的问题，用pip装个影梭代理一下就可以了，就简单的使用上并没什么技术可言，网上之类的教程也很多，如果学校使用的是提供ipv6地址的网络（如教育网），那么校外的有ipv6地址的服务器也是可以的，因为现在校园网ipv6应该都是不计费的（不绝对，天知道你的学校为了安（赚）全（钱）会做出什么出格的事），流量可以直接出去。 在这过程中，我遇到的一个问题就是：服务器有v6地址，本地PC也有v6地址，两个都可以单独访问Google，但是PC走服务器代理的话就无法访问Google一类被墙掉的网站，服务器使用的是双栈代理，而且PC此时也可以访问六维一类的v6站点，说明v6流量是出的去的，对此我做了很多测试，但仍毫无头绪，如果有朋友知道其中的缘由，还望告知。 本文提及的方法仅供安全学习，禁止非法利用]]></content>
      <tags>
        <tag>运用</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大创项目完成感想]]></title>
    <url>%2Fpost%2F%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E5%AE%8C%E6%88%90%E6%84%9F%E6%83%B3.html</url>
    <content type="text"><![CDATA[大概一个月前完成的整个大创项目, 来学校后找老师配置了一下模拟的网络环境, 测试、修改，到现在终于算是可以通过所有测试了。在这里回顾一下，总结一下。 介绍项目做的是“基于课表的多媒体机房网络控制系统”，看名字就能知道大概是怎么回事，是一个实践和实际用途大于创新的项目，并没有多少创新点，但是怎么也算是自己从前端到后端独立完成的第一个项目，收获还是很大的。 自我表扬（空） 自我批评代码自己的代码简直烂的一批，真的是烂……本来想着好好的，自己不借助框架，用原生的php直接写，然后再学习如何对项目进行重构，用laravel重构一遍，棒棒的想法🌚？然而实践的过程中简直痛苦的不行，前后端代码糅合在一起、各种字符串的连接、session的管理……还有很多用框架可以轻松解决的问题，然而用原生的语言实现起来就没法那么优雅了。 前端前端虽然用了bootstrap（我真的尽力去做好看一点了😂），但是在答辩的时候评委老师说“这个界面能不能再友好一点好看一点？”我……果然还是应该多看看人家前端模板怎么写的嘛 文档文档方面做的也不好，是在最后项目完成了才开始写的，结果工作量很大，而且有很多地方都忘了之前自己是怎么想的了，以后还是应该计划好了一个模块的文档，再写项目，再边写边完善。 收获总的来说，这样一个项目不仅让自己得到了能力方面的锻炼（耐压和耐心😂），让我对于一个系统的整个结构上面也有了更好的认知，我想这还是很重要的，以及以后写项目应该注意哪些方面（尤其是对于框架的重视）。 希望希望把《重构》看完了、学习一下laravel框架，能够把整个项目再重构一遍，达到更好的质量交给田老师，还是很希望学校能够把这个系统投入实际使用中的。]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于php下实现异步计划任务的一种方法]]></title>
    <url>%2Fpost%2F%E5%85%B3%E4%BA%8Ephp%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[在一个网络管理系统的实现过程中需要完成这样一个功能，老师在上课时通过交互界面将该教室的网络关闭，课程结束后系统将自动将教室网络开放，这有两方面的要求，首先是计划任务的实现：下课后自动恢复网络，这里使用循环来检查任务执行情况，因为如果全部都写到操作系统的计划任务中那就太繁重了（当然也可以只写一个系统的计划任务，将它和数据库结合起来实现，这是我最后采用的方法）；二就是老师提交“关闭网络”的请求时应当异步处理，因为计划任务是死循环，如果不进行异步处理则页面将永远处于加载状态直到用户强制阻断或任务执行结束。 具体过程计划任务唯一化因为一堂课上可能会多次切换网络状态，所以必须让当前教室的网络恢复计划任务唯一化，新的计划任务应当取代旧的，这里我使用文件flag的方式来实现：用$_SESSION[‘ID’]加上当前时间戳的方式来命名flag文件，$_SESSION[‘ID’]为用户ID，由于老师一堂课只能在一个教室上课，所以这是唯一的；当前时间戳（time()函数获取）精确到秒，足够保证用户在这个时间段内操作唯一。每一次生成计划任务时我们都生成这样一个文件保存在flag文件夹中，并将文件名传给任务函数，让它去检查这个文件状态，存在的话则任务有效，否则终止任务；相对的，生成新任务时，我们把flag文件夹中的所有以当前$_SESSION[‘ID’]开头的flag文件全部删除，再生成新的任务和flag，这样旧的任务就会失效，由此保证任务的唯一性。 异步这里是用fsockopen函数来实现异步，这样实现的好处就是有很大的自定义空间，例如相比于popen()函数的不可传递参数。 代码//user.php //作用：用户交互界面，提交数据给set-network.php //代码如下： $url = &quot;http://localhost:8081/tch/set-network.php&quot;; sock_get($url, $_GET[&quot;network&quot;], $_GET[&quot;classroomName&quot;],$endTimestamp); //fsockopen模拟get提交函数 function sock_get($url, $network, $classroomName, $endTimestamp) { //设置get提交的数据 $data = array( &quot;network&quot; =&gt; $network, &quot;classroomName&quot; =&gt; $classroomName, &quot;endTimestamp&quot; =&gt; $endTimestamp); $http_data = http_build_query($data); $info = parse_url($url); $fp = fsockopen($info[&quot;host&quot;], $info[&quot;port&quot;], $errno, $errstr, 3); $head = &quot;GET &quot; . $info[&#39;path&#39;] . &quot;?&quot; . $http_data . &quot; HTTP/1.0\r\n&quot;; $head .= &quot;Host: &quot; . $info[&#39;host&#39;] . &quot;:&quot; . $info[&#39;port&#39;] . &quot;\r\n&quot;; $head .= &quot;\r\n&quot;; fputs($fp, $head); fclose($fp); } //set-network.php //作用：从用户操作接收数据用来生成计划任务 //代码如下： require &quot;restore-network.php&quot; //查找当前用户有无已存在的flag，有的话删除，即终止已存在的恢复网络计划任务 $search = glob(&quot;./flags/&quot; . $_SESSION[&#39;ID&#39;] . &quot;*&quot;); if ($search) { foreach ($search as $item) { unlink($item); } } $flag = &quot;./flags/&quot; . $_SESSION[&quot;ID&quot;] . time() . &quot;.flag&quot;; file_put_contents($flag, &quot;&quot;, FILE_APPEND); $schedule = new restore_network(); $schedule-&gt;keepWake($flag, $endTimestamp); //restore-network.php //作用：计划任务和恢复网络的功能实现 //代码如下： ignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行. set_time_limit(0);//设置不响应最长时间不受限制,让程序可以无限制的执行下去 //定时任务函数，不断循环来定时执行任务 function keepWake($flagFile, $endTimestamp) { //当前时间戳比结束时间戳小则一直循环 while (time() &lt; $endTimestamp) { // 定时任务终止条件:本任务的flag文件不存在 if (!file_exists($flagFile)) { die(&#39;process terminated&#39;); } sleep(120); } //删除flag文件 unlink($flagFile); //执行恢复网络功能函数，这不是重点，在此忽略函数内容 $this-&gt;restoreNet(); } 赘述尽管我最后用的并不是这种解决办法，因为考虑到万一web服务器软件宕掉的话那么这些计划任务都会丢失，我采用了将定时任务所需的参数存入数据库，再将一个php脚本写入操作系统计划任务中（如linux的crontab），每隔几分钟执行一遍，由这个脚本去数据库查询是否有到期的定时任务，有的话则调出数据进行执行，再数据库中相应的任务删除。整个过程可能考虑的不是很周到，只能算是一个实现目标的方法。]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php部分版本使用oci8拓展问题]]></title>
    <url>%2Fpost%2Fphp%E9%83%A8%E5%88%86%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8oci8%E6%8B%93%E5%B1%95%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[最近在使用php实现从服务器Oracle数据库拉取数据表到本地mysql功能时遇到了这个问题：我使用的是xampp集成的php5.6.3版本，在它的php.ini配置文件中关于oci8拓展的配置是这样的： extension=php_oci8_12c.dll ; Use with Oracle Database 12c Instant Client 从Oracle官网下载instantclient-basic-nt-12.2.0.1.0.zip拓展，解压后我把得到的instantclient_12_2目录移动到C:\Program Files下并加入环境变量，但是idea运行项目时一直在报: PHP Warning: PHP Startup: Unable to load dynamic library &#39;C:\xampp\php\ext\php_oci8_12c.dll&#39; 导致oci8接口函数，如oci_connect等无法使用。 解决过程在把stack overflow翻了个遍之后找到了可行的解决办法——放弃php_oci8_12c.dll，将其更换为其他的版本。 去pecl下载其他版本的OCI8 extension下载地址，我选择了2.0.10版本，这是支持php5的最后一个版本，注：下载dll动态链接库文件需要点击”oci8-2.0.10.tgz (186.9kB)”链接后面的”（windows田字图形）DLL”链接，这是下载直达链接，根据自己的php版本下载合适的。 替换文件将解压后的下载文件移动到php拓展目录（即extension_dir）,然后在php.ini中加上 extension=php_oci8_11g.dll 去 Oracle官网下载相应的instant client V11，解压后把目录添加进系统变量。 检查cmd输入”PHP –ri oci8” C:\WINDOWS\system32&gt;PHP --ri oci8 结果显示： oci8 OCI8 Support =&gt; enabled OCI8 DTrace Support =&gt; disabled OCI8 Version =&gt; 2.0.8 Revision =&gt; $Id: f04114d4d67cffea4cdc2ed3b7f0229c2caa5016 $ Oracle Run-time Client Library Version =&gt; 11.2.0.1.0 Oracle Compile-time Instant Client Version =&gt; 11.2 Directive =&gt; Local Value =&gt; Master Value oci8.max_persistent =&gt; -1 =&gt; -1 oci8.persistent_timeout =&gt; -1 =&gt; -1 oci8.ping_interval =&gt; 60 =&gt; 60 oci8.privileged_connect =&gt; Off =&gt; Off oci8.statement_cache_size =&gt; 20 =&gt; 20 oci8.default_prefetch =&gt; 100 =&gt; 100 oci8.old_oci_close_semantics =&gt; Off =&gt; Off oci8.connection_class =&gt; no value =&gt; no value oci8.events =&gt; Off =&gt; Off Statistics =&gt; Active Persistent Connections =&gt; 0 Active Connections =&gt; 0 cmd输入”php -r “var_dump(function_exists(‘oci_connect’));”” C:\WINDOWS\system32&gt;php -r &quot;var_dump(function_exists(&#39;oci_connect&#39;));&quot; 结果显示： bool(true) 则已成功。 注意idea需要重启电脑后方可使用oci8拓展的相关接口函数（我尝试过”synchronize”和”Invalidate Caches / Restart”功能，都无效），否则仍然会提示找不到动态链接库文件。也可能是因为我使用的是php内置的服务器问题，在此提一下。 赘述这个问题的存在不知道是xampp的锅还是这个php版本的锅，总而言之问题现在是解决了，算是有所收获吧，所以总结一下。其他版本若出现相似问题也可以参考。]]></content>
      <tags>
        <tag>php</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度网盘下载高速通道延时]]></title>
    <url>%2Fpost%2F%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E9%AB%98%E9%80%9F%E9%80%9A%E9%81%93%E5%BB%B6%E6%97%B6.html</url>
    <content type="text"><![CDATA[百度网盘PC客户端下载有300秒的高速通道试用，而“300”不过是个存在内存中的数值，借助于 Cheat Engine 这样的内存扫描工具，我们可以任意修改其大小。 注:因windows系统更新,CE似乎已经无法扫描到这部分应用程序的内存数据,故该方法已经失效.在V2EX上看到有帖子说吾爱破解上有老哥写了个对于百度网盘真实下载地址的解析器, 实测可用. 步骤 首先上 官 网 下载CheatEngine并安装。 打开百度网盘客户端 和 CheatEngine（以下简称CE）。CE左上角file下有个小电脑在闪烁，如图，打开它。 然后从程序列表里选择百度网盘客户端，如图，打开； 开始下载所需要的文件，然后点击试用高速通道； 立即切换到CE，在Value输入框中设定一个值，如257，当百度网盘高速通道试用时间变成257时，点击New Scan按钮对百度网盘客户端占用的内存进行扫描； 扫描后会发现左侧列表中会展示出很多查找到的内存地址，找到value一栏中的值和百度网盘客户端高速通道试用时间的值相同的一项，双击选中，到下面的操作栏中进行修改； 双击修改剩余时间，由于存放地址是4字节大小的内存，所以最大的值只能为(2^32)-1=4294967295，如果值比这个数大会导致溢出，CE会将其随机降为一个比4294967295小的较大值。 修改完成，可以关闭CE。 赘述CE这种内存扫描器其实有很多，我自己接触的第一款就是初中时候在Symbian系统上使用的“八门神器”，用来修改手机中小游戏的各种参数，弹药量、生命值之类。 以上方法只适用于有试用高速通道的时候，像有的时候没有试用高速通道的机会便没法进行加速。建议修改成较大的值（注：发现如果在修改过一次的基础上修改第二次会将剩余时间卡死。实际并没有所谓，因为时间值足够大），就算下载完毕之后不要马上关闭客户端（因为下次打开可能就没有试用高速通道的机会），高速通道的剩余时间仍会继续跑。 虽然有时间限制，但是修改的值较大的话基本可以忽略这个限制。可以说唯一的限制在于试用高速通道的机会。 我在学校内使用ipv6走高速通道网络状态好的时候速度还是挺让人满意的。 以上。]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows热点不可用解决办法]]></title>
    <url>%2Fpost%2Fwindows%E7%83%AD%E7%82%B9%E4%B8%8D%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
    <content type="text"><![CDATA[该问题的现象表现为windows热点开启成功，且在移动端可以正确进行密码的认证，但就是无法连接上或是连接上之后无法上网（移动端此时已通过dhcp获取到ip）。 解决办法法一.首先想到的当然是对本地热点的重启，若重启后仍然无效，参考法二； 法二. 1.在网络适配器管理（控制面板\网络和 Internet\网络连接）中将你的热点连接禁用； 2.进设备管理器（win+x键调出选项栏后按M键选择设备管理器），菜单栏中“查看”选中“显示隐藏的设备”，在下面打开网络适配器一栏，会有一个图标带向下箭头（已被禁用）的 network virtual Adapter（虚拟网络适配器），不同的电脑因为网卡不同或者oem定制的问题可能会导致适配器名字不一样，根据具体情况自己选择。双击它，“启用设备”。 完成以上步骤后再启动自己的热点 赘述以上方法是我在遇到该问题后自己摸索出来的，在我的电脑上可解决问题。如果无法解决你所遇到的问题，建议搜索其他的解决办法。]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(xrdp+vnc)远程linux桌面]]></title>
    <url>%2Fpost%2F(xrdp%2Bvnc)%E8%BF%9C%E7%A8%8Blinux%E6%A1%8C%E9%9D%A2.html</url>
    <content type="text"><![CDATA[相信大家桌面远程linux服务器大多用的都是vnc（虽然对于linux系统桌面远程用的确实很少），这里提一下xrdp的优势，1.加密，vcn本身的传输是不加密的（可以借助于SSL实现）；2.因为xrdp实质上就是一个 rdp 服务器，所以我们在windows上只需要借助自带的mstsc就可以直连linxu桌面系统，因为都使用了rdp协议，很方便；3. 支持多用户登录；4.第四个优势…要说第四个优势的话……开源算么？（逃… 操作步骤安装xrdp+vncserver：#CentOS yum install epel-release yum update yum install xrdp tigervnc-server #Ubuntu apt-get update apt-get install xrdp tigervnc-server 如果服务器桌面系统都没装的话，建议选择xfce一类轻量型桌面 #CentOS yum groupinstall xfce4 #Ubuntu apt-get install xubuntu-desktop #安装完成后运行 systemctl set-default graphical.target #使系统默认从GUI启动 #如果要恢复默认从CLI启动 systemctl set-default multi-user.target #使系统默认从CLI启动 设置xrdp开机自启：systemctl enable xrdp.service #启动xrdp服务 systemctl start xrdp 如果xrdp报错的话可以参考 该链接 ，运行： #Allow SElinux to allow: chcon --type=bin_t /usr/sbin/xrdp chcon --type=bin_t /usr/sbin/xrdp-sesman #Start it systemctl start xrdp 运行”vncserver”命令在当前用户家目录实例化vnc配置#如果想以其他用户的身份连接远程连接，需要先使用su命令来切换用户 vncserver 配置vncserver服务：cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:&lt;NUMBER&gt;.service #&lt;NUMBER&gt;为数字 #将/etc/systemd/system/vncserver@:&lt;NUMBER&gt;.service中的&lt;USER&gt;替换为你的用户名，共两处。 #如果是root用户的话，其中的家目录需要改为/root，而非/home/&lt;USER&gt; systemctl重新加载配置文件systemctl daemon-reload 防火墙允许服务注意iptables规则是否有拦截xrdp和vnc服务访问网络。 Centos7及以上上需要配置firewall允许xrdp和vnc:firewall-cmd --permanent --zone=public --add-port=3389/tcp #允许xrdp（默认端口为3389） firewall-cmd --permanent --zone=public --add-service=vnc-server firewall-cmd --reload 启动vncsystemctl start vncserver@:&lt;Nummer&gt;.service 赘述Windows上mstsc直连session需要选择xvnc 如果需要以root身份登录，则需要以root身份运行vncserver,配置vncserver@:{n}.service文件后，在/home目录创建root文件夹，将其链接到/root目录即可 若使用vnc客户端连接的话，分辨率可能会导致无法满屏显示，这时可以直接修改vnc的分辨率( 参考链接 )： 如果要使用的分辨率在现有的模式中没有的话，我们可以自己手动添加1.首先查询所需要参数，cvt 加分辨率例如我需要1366*768的分辨率，则输入“cvt 1366 768”，查询该分辨率的有效扫描频率是多少将Modeline “1368x768_60.00” 后面的“85.25 1368 1440 1576 1784 768 771 781 798 -hsync +vsync”参数复制2.创建所需的模式 xrandr --newmode &quot;模式名&quot; + 上一步复制的参数 3.这时接使用刚刚创建的模式会提示找不到模式，需要手动添加一下 xrandr --addmode 显示器名 &quot;模式名&quot; 创建成功：添加成功：4.使用新建模式 xrandr --output 显示器名 --mode &quot;模式名&quot; 当前设置在重启后失效，可以将其写入配置文件保证设置永久有效 分辨率也可以通过vnc客户端设置，但是画质会受影响本文部分参考 该博文]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime使用技巧]]></title>
    <url>%2Fpost%2Fsublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
    <content type="text"><![CDATA[本文用以记录我使用sublime作为编辑器过程中的一些技巧。 安装Package Control新安装的sublime需要安装包管理器,以便今后安装插件; 官网上的安装教程在此 使用包管理器安装插件快捷键ctrl+shift+p后输入install, 下方会出现一系列的选项，选中Package Control: Install Package(一般第一个选项就是)回车即可进入包管理器的安装模式，在弹出的输入框中输入你想要安装的插件即可，回车进行安装。 删除插件同安装，快捷键ctrl+shift+p后输入remove，选中Package Control: Remove Package，回车即可进入删除模式，选中要删除的插件回车即可删除 启用vim模式Preference -&gt; Settings -&gt; User，将ignored_packages字段中的配置清空，如下: &quot;ignored_packages&quot;:[], 清空了原本被忽略的Vintage(Sublime Text的vi模式编辑包)后就开启了vi模式。 字体在Windows上sublime的字体渲染往往会出现问题，变得大小、高低不一致， 严重影响我们的文档编写工作，如下图:实际上在用户设置里面加上如下配置就能解决问题 &quot;font_face&quot;: &quot;Segoe UI&quot;, &quot;font_options&quot;: [&quot;gdi&quot;] Segoe字体是微软开发的一款字体, Windows自带有; gdi则是windows的一款渲染器.这样设置后的效果如下图: 使用sublime tmpl插件快速创建文件模板搜索插件sublime tmpl安装即可, 默认快捷键如下: ctrl+alt+h html ctrl+alt+j javascript ctrl+alt+c css ctrl+alt+p php ctrl+alt+r ruby ctrl+alt+shift+p python 也可以使用快捷键ctrl+shift+p, 输入: “tmpl:”, 可以找到创建文件的菜单列表. coolFormat代码格式化coolFormat是比较好用的代码格式化通用插件，默认快捷键是ctrl+alt+shift+q格式化全部代码，ctrl+alt+shift+s格式化选中代码，如果要修改则Preference -&gt; Browse Packages进入CoolFormat文件夹中，修改Default.sublime-keymap文件中的绑定快捷键即可。 markdown编写环境因为用的挺顺手的，所以推荐一下。我在sublime上编写markdown文档的环境配置是:Markdown Editing + OmniMarkupPreviewer + Markdown Extended + Monokai Extended 插件介绍MarkdownEditing作为sublime上编写Markdown必备的插件，不仅可以高亮显示Markdown语法还支持很多编程语言的语法高亮显示（需要主题支持）。 OmniMarkupPreviewer用来渲染和预览markdown文档的效果。 这两个插件安装完了以后我们在编写markdown时会发现Markdown文档在Sublime中是默认无高亮的，而且很多主题也不支持Markdown的高亮，而Monokai Extended和Markdown Extended 的组合很好的解决了这个问题。 以上插件都安装完成后，重启sublime，然后在preferences-&gt;color scheme-&gt;Monokai Extended 选择一项你顺眼的作为配色模式，再将Markdown Extended选为markdown文档的语法规则即可（view-&gt;systax-&gt;open all with current extension as 如图）： Tips 1.具体的markdown语法可以参照wowubuntu上的 这一篇文章 2.插件使用的小技巧去搜一下就有了，在此就不赘述了]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拓展chrome插件json-viewer]]></title>
    <url>%2Fpost%2F%E6%8B%93%E5%B1%95chrome%E6%8F%92%E4%BB%B6json-viewer.html</url>
    <content type="text"><![CDATA[最近在学习维护学校iptv服务器时获得了电视墙缓存图片的json数据，chrome打开页面后jsonViewer无法格式化代码， 问题与解决如图（jsonViewer此时并没有启动，它并不格式化本地文件）： google上找了一下，发现了 网友自己拓展的json-viewer ，与 http://www.jsonohyeah.com/上的效果相近，不过可以本地格式化，省去联网了，觉得很好用。觉得样式丑的可以去github拉取代码自己改下样式（样式表在WebContent\viewer\index.html文件中），然后chrome打包拓展程序安装。 提醒注1：打包目录选择WebContent，否则会报错“清单文件缺失或不可读”注2：报错“指定扩展程序的私有密钥已存在。请重复使用该密钥，或者先删除它” 则删除 从github拉取得到的master分支下pem密钥文件即可。最终效果如图： 本人已修改样式且打包了的拓展程序在此注3：直接安装crx包可能会在之后因为安全问题被chrome永久禁用，解决办法有二,1.可以开启开发者模式，选择“加载已解压的拓展程序”，从JSONView-for-Chrome-master\WebContent文件夹直接安装源码， 这样安装后就不会有这种问题,但是每次打开chrome都会提醒你禁用开发者模式下安装的拓展。2.按照 该方法 进行操作，但有个局限就是自win8开始组策略只在专业版及以上版本才有。以上。]]></content>
      <tags>
        <tag>chrome</tag>
        <tag>json</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql中文乱码的解决办法]]></title>
    <url>%2Fpost%2Fmysql%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
    <content type="text"><![CDATA[相信既然这么进来了，那么问题肯定是差不多的，下面直接讲述解决办法： 我们在mysql中使用命令show variables like &#39;%chara%&#39;和show variables like &#39;%collation%&#39;分别可以看到mysql当前设置的编码方式 解决办法修改配置文件首先在mysql配置文件my.ini中进行配置修改 #搜索找到[mysqld]，在它下面添加配置，如下 [mysqld] character-set-server = utf8 #搜索找到[mysql]，在它下面添加配置，如下 [mysql] default-character-set = utf8 修改连接编码和中文字段编码接下来我是从phpmyadmin上操作的，如果你没有可视化操作界面，那就转换成sql语句来操作吧。 set names &quot;utf8&quot;; 再将所有需要插入中文的字段进行结构修改：例如下面的message字段 将排序规则修改为utf8_general_ci 对于docker的mysql容器如果创建的mysql容器在运行中出现了中文乱码的情况，则在创建容器到时候在最后面加上--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci即可. 赘述我曾多次遇到这种问题都是这么解决的，也曾利用修改排序规则的方法帮同学结果过类似问题，在此仅供参考。]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F%2F404.html</url>
    <content type="text"><![CDATA[404 &lt;!DOCTYPE html&gt;&lt;html&gt; &lt;style&gt; * { everything:awesome;} &lt;/style&gt; &lt;body&gt; ERROR 404! FILE NOT FOUND! &nbsp;&lt;/body&gt;&lt;/html&gt; The page you requested cannot be found right now. Try typing ‘back’ to go back or ‘game’ to play “t-rex-runner”.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F%2Fgame.html</url>
    <content type="text"><![CDATA[t-rex runner press Space to start game click here to back home window.onload=function(){ var ua = navigator.userAgent; isAndroid = /Android/i.test(ua); isBlackBerry = /BlackBerry/i.test(ua); isWindowPhone = /IEMobile/i.test(ua); isIOS = /iPhone|iPad|iPod/i.test(ua); isMobile = isAndroid || isBlackBerry || isWindowPhone || isIOS; if(isAndroid) isMobile = ‘android’; if(isBlackBerry) isMobile = ‘BlackBerry’; if(isWindowPhone) isMobile = ‘WindowPhone’; if(isIOS) isMobile = ‘IOS’; if(isMobile) { document.getElementById(“hint”).innerHTML=”press Screen to start game”; document.getElementById(“home”).innerHTML=”press here to back home”; }}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[关于 .content { background:rgba(248,248,248,0) none repeat scroll !important; } .header{ background:rgba(248,248,248,0) none repeat scroll !important; } .footer{ display:none; } 我喜欢人类，人类真的特别了不起，进化出了智力，但很多时候选择不用。很潇洒的物种。by 李诞]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2FmyCSS.css</url>
    <content type="text"><![CDATA[/*字符上下颠倒*/ .upside-down { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); /* IE6,IE7 */ ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)"; /* IE8 */ -moz-transform: rotate(-180deg); /* 火狐3.5+ */ -o-transform: rotate(-180deg); /* Opera 10.5 */ -webkit-transform: rotate(-180deg); /* Safari 3.1+, Chrome */ position: absolute; } /*在颠倒字符右侧的字符*/ .upside-down-right{ font-style:normal; margin-left:25px; } /*词条页面的标题效果*/ .entries-title{ font-size:80%; font-weight:100%; color:black; }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2Fstyle.css</url>
    <content type="text"><![CDATA[@import url(https://fonts.googleapis.com/css?family=Gilda+Display); html { background-color: black; color: white; overflow: hidden; height: 100%; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; font-size: medium; } .error { text-align: center; font-family: 'Gilda Display', serif; text-align: center; width: 100%; height: 120px; margin: auto; position: absolute; top: 0; bottom: 0; left: -60px; right: 0; -webkit-animation: noise-3 1s linear infinite; animation: noise-3 1s linear infinite; overflow: default; } body:after { content: 'error 404'; font-family: OCR-A; font-size: 100px; text-align: center; width: 550px; margin: auto; margin-top:-100px; position: absolute; top: 25%; bottom: 0; left: 0; right: 35%; opacity: 0; color: white; -webkit-animation: noise-1 .2s linear infinite; animation: noise-1 .2s linear infinite; } body:before { content: 'error 404'; font-family: OCR-A; font-size: 100px; text-align: center; width: 550px; margin: auto; position: absolute; top: 25%; bottom: 0; left: 0; right: 35%; opacity: 0; color: white; -webkit-animation: noise-2 .2s linear infinite; animation: noise-2 .2s linear infinite; } .info { text-align: center; width: 200px; height: 60px; margin: auto; position: absolute; top: 280px; bottom: 0; left: 20px; right: 0; -webkit-animation: noise-3 1s linear infinite; animation: noise-3 1s linear infinite; } .info:before { content: 'file not found'; font-family: OCR-A; font-size: 100px; text-align: center; width: 800px; margin: auto; position: absolute; top: 20px; bottom: 0; left: 40px; right: 100px; opacity: 0; color: white; -webkit-animation: noise-2 .2s linear infinite; animation: noise-2 .2s linear infinite; } .info:after { content: 'file not found'; font-family: OCR-A; font-size: 100px; text-align: center; width: 800px; margin: auto; position: absolute; top: 20px; bottom: 0; left: 40px; right: 0; opacity: 0; color: white; -webkit-animation: noise-1 .2s linear infinite; animation: noise-1 .2s linear infinite; } @-webkit-keyframes noise-1 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: -6px; } 80% { opacity: .3; } 100% { opacity: .6; left: 2px; } } @keyframes noise-1 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: -6px; } 80% { opacity: .3; } 100% { opacity: .6; left: 2px; } } @-webkit-keyframes noise-2 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: 6px; } 80% { opacity: .3; } 100% { opacity: .6; left: -2px; } } @keyframes noise-2 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: 6px; } 80% { opacity: .3; } 100% { opacity: .6; left: -2px; } } @-webkit-keyframes noise { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(1.7); transform: scaleY(1.7); } 43% { opacity: 1; -webkit-transform: scaleX(1.5); transform: scaleX(1.5); } } @keyframes noise { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(1.7); transform: scaleY(1.7); } 43% { opacity: 1; -webkit-transform: scaleX(1.5); transform: scaleX(1.5); } } @-webkit-keyframes noise-3 { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(4); transform: scaleY(4); } 43% { opacity: 1; -webkit-transform: scaleX(10) rotate(60deg); transform: scaleX(10) rotate(60deg); } } @keyframes noise-3 { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(4); transform: scaleY(4); } 43% { opacity: 1; -webkit-transform: scaleX(10) rotate(60deg); transform: scaleX(10) rotate(60deg); } } .wrap { top: 30%; left: 25%; height: 200px; margin-top: -100px; padding-top: -100px; position: absolute; } code { color: white; } span.blue { color: #48beef; } span.comment { color: #7f8c8d; } span.orange { color: #f39c12; } span.green { color: #33cc33; } .viewFull { font-family: OCR-A; color: orange; /*text-decoration:;*/ } @font-face { font-family: OCR-A; src: url('data:font/woff;base64,') format('woff'); } @media only screen and (min-height: 500px) { .viewFull { display: none; } } @-webkit-keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } @-moz-keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } @keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } body { background-color: black; } .four-oh-four { position: relative; top: 0; left: 0; min-height: 100vh; min-width: 100vw; z-index: 2; background-color: black; transition: opacity 300ms ease-out; background-position: center center; background-repeat: no-repeat; } .four-oh-four .dJAX_internal { opacity: 0.0; } .four-oh-four form, .four-oh-four input { position: fixed; top: 0; left: 0; opacity: 0; background-color: black; } .terminal { position: relative; padding: 0.2rem; padding-top: 12rem; line-height: 0em; } .terminal .prompt { color: #ffffff; display: block; font-family: 'DejaVu Sans Mono', monospace; /*font-weight: bold;*/ font-size: 0.9em; letter-spacing: 0.15em; white-space: pre-wrap; text-shadow: 0 0 2px rgba(255, 255, 255,0.75); line-height: 0.2em; margin-bottom: 0.5em; } .terminal .prompt:before { content: '> '; display: inline-block; } .terminal .new-output { display: inline-block; } .terminal .new-output:after { display: inline-block; vertical-align: -0.15em; width: 0.5em; height: 0.5em; margin-left: 5px; background: #ffffff; box-shadow: 1px 1px 1px rgba(255, 255, 255, 0.65), -1px -1px 1px rgba(255, 255, 255, 0.65), 1px -1px 1px rgba(255, 255, 255, 0.65), -1px 1px 1px rgba(255, 255, 255, 0.65); -webkit-animation: cursor-blink 1.25s steps(1) infinite; -moz-animation: cursor-blink 1.25s steps(1) infinite; animation: cursor-blink 1.25s steps(1) infinite; content: ''; } .kittens p { letter-spacing: 0; opacity: 0; line-height: 0.5rem; } .four-oh-four-form { opacity: 0; position: fixed; top: 0; left: 0; }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2Fgame.css</url>
    <content type="text"><![CDATA[/* Copyright 2013 The Chromium Authors. All rights reserved. * Use of this source code is governed by a BSD-style license that can be * found in the LICENSE file. */ @import url(https://fonts.googleapis.com/css?family=Joti+One); html, body { padding: 0; margin: 0; width: 100%; height: 100%; } .hint{ color: #535353; text-align: center; font-family: 'Joti One', cursive; font-size: 200%; margin: 0px; padding: 0px; margin-top: -240px; } .home{ font-size: 130%; display: block; text-align: center; margin-top: -15px; font-family: 'Joti One', cursive; text-decoration: none; color: #FF5E53; } .home:hover{ font-size: 150%; text-decoration: none; color: #DD635B; } .icon { -webkit-user-select: none; user-select: none; display: inline-block; } .icon-offline { content: -webkit-image-set( url(assets/default_100_percent/100-error-offline.png) 1x, url(assets/default_200_percent/200-error-offline.png) 2x); position: relative; } .hidden { display: none; } /* Offline page */ .offline .interstitial-wrapper { color: #2b2b2b; font-size: 1em; line-height: 1.55; margin: 0 auto; max-width: 600px; padding-top: 100px; width: 100%; } .offline .runner-container { height: 150px; max-width: 600px; overflow: hidden; position: absolute; top: 35px; width: 44px; } .offline .runner-canvas { height: 150px; max-width: 600px; opacity: 1; overflow: hidden; position: absolute; top: 0; z-index: 2; } .offline .controller { background: rgba(247, 247, 247, .1); height: 100vh; left: 0; position: absolute; top: 0; width: 100vw; z-index: 1; } #offline-resources { display: none; } @media (max-width: 420px) { .suggested-left > #control-buttons, .suggested-right > #control-buttons { float: none; } .snackbar { left: 0; bottom: 0; width: 100%; border-radius: 0; } } @media (max-height: 350px) { h1 { margin: 0 0 15px; } .icon-offline { margin: 0 0 10px; } .interstitial-wrapper { margin-top: 5%; } .nav-wrapper { margin-top: 30px; } } @media (min-width: 600px) and (max-width: 736px) and (orientation: landscape) { .offline .interstitial-wrapper { margin-left: 0; margin-right: 0; } } @media (min-width: 420px) and (max-width: 736px) and (min-height: 240px) and (max-height: 420px) and (orientation:landscape) { .interstitial-wrapper { margin-bottom: 100px; } } @media (min-height: 240px) and (orientation: landscape) { .offline .interstitial-wrapper { margin-bottom: 90px; } .icon-offline { margin-bottom: 20px; } } @media (max-height: 320px) and (orientation: landscape) { .icon-offline { margin-bottom: 0; } .offline .runner-container { top: 10px; } } @media (max-width: 240px) { .interstitial-wrapper { overflow: inherit; padding: 0 8px; } }]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fjs%2Findex.js</url>
    <content type="text"><![CDATA[var inputReady = true; var input = $('.404-input'); input.focus(); $('.container').on('click', function (e) { input.focus(); }); input.on('keyup', function (e) { $('.new-output').text(input.val()); // console.log(inputReady); }); $('.four-oh-four-form').on('submit', function (e) { e.preventDefault(); var val=$('.404-input').val().toLowerCase(); var href; if (val === 'back') { showKittens(); } else if(val === 'game'){ window.location.href="game.html"; } else { resetForm(); } }); function resetForm(withKittens) { var message = "Sorry that command is not recognized." var input = $('.404-input'); $('.new-output').removeClass('new-output'); input.val(''); $('.terminal').append('' + message + ''); $('.new-output').velocity( 'scroll' ), {duration: 100} } function showKittens() { var parent = document.body; var part1 = document.getElementById("part1"); parent.removeChild(part1); document.styleSheets[0].insertRule('body:before{content:""}',21); document.styleSheets[0].insertRule('body:after{content:""}',22); if(history.length>1) { history.back(); }else{ window.location.href="http://blog.safeandsound.cn"; } } function textEffect(line) { var alpha = [';', '.', ',', ':', ';', '~', '`']; var animationSpeed = 10; var index = 0; var string = line.text(); var splitString = string.split(""); var copyString = splitString.slice(0); var emptyString = copyString.map(function (el) { return [alpha[Math.floor(Math.random() * (alpha.length))], index++]; }) emptyString = shuffle(emptyString); $.each(copyString, function (i, el) { var newChar = emptyString[i]; toUnderscore(copyString, line, newChar); setTimeout(function () { fromUnderscore(copyString, splitString, newChar, line); }, i * animationSpeed); }) } function toUnderscore(copyString, line, newChar) { copyString[newChar[1]] = newChar[0]; line.text(copyString.join('')); } function fromUnderscore(copyString, splitString, newChar, line) { copyString[newChar[1]] = splitString[newChar[1]]; line.text(copyString.join("")); } function shuffle(o) { for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x); return o; };]]></content>
  </entry>
  <entry>
    <title><![CDATA[一些我平时遇到的不理解的词条整理后放在这]]></title>
    <url>%2Fentries%2Findex.html</url>
    <content type="text"><![CDATA[一些我平时遇到的不理解的词条整理后放在这 鸭子类型(duck typing)鸭子类型是动态语言所特有的概念。Wiki上的解释，有趣的类比”If it walks like a duck and it quacks like a duck, then it must be a duck.” 其意为，一个对象的到底是什么是由它的行为所决定的，我们并不关心它本质上是什么(继承自什么对象实现了什么接口)，我们是通过它能干什么来判断它是什么🤔很有趣嘛。 猴子补丁(monkey patching)起源:猴子补丁的这个叫法起源于Zope框架，大家在修正Zope的Bug的时候经常在程序后面追加更新部分，这些被称作是“杂牌军补丁(guerilla patch)”，后来guerilla就渐渐的写成了gorllia(猩猩)，再后来就写了monkey(猴子)，所以猴子补丁的叫法是这么莫名其妙的得来的。它是动态语言所特有的概念，在动态语言中，一切皆对象，例如你可以用一个对象去替换另一个对象的属性，那么这样的话你就可以非常灵活的去进行功能的追加或删改。关于实际例子，StackOverflow上有相关的问题:What is monkey patching? 阻抗失谐(impedance mismatch)该词是数据库领域术语, 反用了微波电子学术语&quot;阻抗匹配&quot;(impedance match),用来比喻数据模型与实际编程语言不搭调的窘境。–摘自《NoSQL精粹(NoSQL Distilled)》这种”阻抗失谐”的现象(尤其是在关系型数据库中)表现为:关系模型和内存中的数据结构之间存在差异, 如编程语言在内存中构造的数据结构中有”嵌套”的表示, 但是在关系型数据库中却无法包含嵌套记录, 它的关系元组必须是简单的, 这就导致如果要把内存中数据结构的对象持久化到关系型数据库中就必须要将其转换成”关系”形式, 这样关系型数据库才能保存并表达, 这就发生了”阻抗失谐”: 需要在两种不同的表示形式之间转译. 微服务结构 &amp; 单体式应用最近看书时总是看到拿微服务结构与单体式应用对比, 在此归纳总结一下. 微服务微服务是以专注于单一责任与功能的小型功能模块为基础，利用模组化的方式组合出复杂的大型应用程序。其比较明显的特性有:1.独立性(有些地方也叫真空性),微服务模式中的每一个组成部分都是一个服务,各个服务彼此独立, 有完整的运行机制与对外接口; 2.服务是粒度最小的单位, 不可再分, 即一个微服务不能进一步划分为多个更小的服务; 3.服务能够快速重组成新的系统, 就像积木一样, 体现了模块化. 单体式应用一个单体式应用里面有许多的逻辑、服务，并且都有密不可分的关系。一旦其中一个服务不可用时，就会造成另一个服务也无法使用.虽然外部结构看起来会比较简单, 但是在资源分配、测试、拓展等各方面看来都不够灵活.（所以你知道微服务的优势在哪了） 一个比较好理解二者之间区别的例子就是, 微服务就像是docker, 而单体式应用就像是传统的虚拟机(这只是我在理解过程中的一个比喻, 不一定准确). IaaS/PaaS/SaaS/XaaS这里所谓的*aaS即”* as a Service“, 本质就是把*当作服务来进行出售.IaaS(Infrastructure as a Service, 基础设施即服务),其意指如果你只是要使用硬件设备罢了, 那就没有必要花巨资购买整套设备并为设备用地以及今后的维护、设备拓展/更新买单,你可以租用硬件, IaaS方面的公司(如Amazon[AWS])会提供服务器,存储器等硬件设备,这样就可以节约成本，利用对方公司提供的服务， 你可以随时使用这些设备来运行你的服务/应用。PaaS(Platform as a Service,平台即服务)，这里的平台有时也叫做中间件，即云计算环境中的应用基础设施服务，也就是支撑应用和运行时环境，如虚拟服务器、操作系统、应用服务器、数据库等SaaS(Software as a Service,软件即服务),也就是软件提供服务了, 这个很好理解 IaaS,PaaS,SaaS其实是云计算领域的三个概念,基础设施在最下面,平台在中间,软件则在最上面, 如果你什么都有, 那么就是本地部署, 也就无所谓这些*aaS了.XaaS也就是Anything as a Service，可以说IaaS，PaaS，SaaS是其子集以上内容部分参考了 何足道 知乎回答 方言 Dialect(computing)此处指计算机行业中的dialect, 其意为一门编程语言或数据交换语言的拓展或者变种形式(摘自wiki,A dialect of a programming language or a data exchange language is a (relatively small) variation or extension of the language that does not change its intrinsic nature)如各个关系型数据库厂商的SQL方言; Clojure是一种Lisp方言; 等 CI/CD/CR持续集成(CI, Continuous integration),持续交付(CD, Continuous delivery),持续部署(CR, Continuous release)所谓持续的思想就是: 既然我们知道开发的需求很难一次性完整的定下来, 那么我们就一点一点的开发, 每一次功能完成后再加到主体上去, 这样使得开发过程更加(敏捷&amp;灵活), 有错可以及时更改, 与最后一次性对系统进行合并/集成然后再构建 测试 发布相比(风险&amp;损失)更小, 也就符合了极限编程的要求. 持续是指整个过程中项目功能的合并, 构建, 测试, 发布产品等, 这些环节是持续的.持续集成很好理解, 给出的wiki链接页面中解释得很清楚, 就是每次一点代码(在开发者通过构建&amp;测试之后)集成到主线.持续交付是指将集成后的代码通过更真实的类生产环境的测试后部署到生产环境中, 但是是否部署是可选的, 部署是手动的.而持续部署就是在持续交付的基础上进行全自动的部署. 如wiki中所描述的如果要实施持续部署，必须先实施持续交付. 几种流行的部署技术蓝绿部署蓝绿部署(Blue/Green Deployment)的特点是无停机时间且风险较小,具体的流程介绍在链接的博客里已经说的很清楚了,在此不赘述.滚动部署停止部分服务并对其进行更新,完成后投入重新使用.如此重复直到所有服务都更新为新的版本.但是在升级的过程中,服务运行的环境是变化的,你并不知道哪个时候的环境是稳定,所以如果需要回滚的话,那就要回滚到稳定的环境里,意味着可能要从头再来.灰度部署不停止老版本的服务,另外开一个新版本的服务给用户使用,新版本出现问题即可回滚.因为跳跃式发布是很危险的,所以需要像灰度(指从黑白之间)这种平滑过渡的发布.与A/B测试一样,本质就是发布多个版本看效果如何,也就是试错,有问题就回滚,经过一段时间的验证后没问题就正式发布. REST架构根据wiki定义：”具象状态传输（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文[1] 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。”wiki中提到“REST是设计风格而不是标准”，这是很重要的一点，首先在理解之前你不能误解它本身的含义和存在的意义。具象状态传输架构风格最重要的架构约束有6个[2]：客户-服务器（Client-Server）通信只能由客户端单方面发起，表现为请求-响应的形式。无状态（Stateless）通信的会话状态（Session State）应该全部由客户端负责维护。缓存（Cache）响应内容可以在通信链的某处被缓存，以改善网络效率。统一接口（Uniform Interface）通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。分层系统（Layered System）通过限制组件的行为（即每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。按需代码（Code-On-Demand，可选）支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。”。 wiki 具象状态传输 我的理解是，REST就是定义一个系统/软件的架构,以及如何设计出RESTful API的，它让系统对外提供的接口更加规范（也就是符合REST风格），如REST的提出者Roy Thomas Fielding在他提出REST的博士论文中所说:”My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture.”这些RESTful的接口将会“功能强大，性能出色且友好易用”。 编程语言的自举首先一提，能够自举是一门编程语言成熟的标志之一（不能不代表不成熟）。简单来说就是语言自身的编译器可以编译自己的编译器。引用知乎上轮子哥的回答比较简单易懂： 你想创造一门V语言而且用V语言来写V编译器的话，你得按照下面的方法做：1、用C++把那个编译器（A）写出来，顺便留下很多测试用例。2、用V语言把那个编译器写（B）出来，用A.exe来编译B，修改直到所有测试用例都通过为止。3、B.exe来编译B自己得到B2.exe，修改直到B2.exe所有测试用例都通过为止。这是为了保证，就算B本身有很多bug，至少编译自己是没有bug的，从而你就可以走到第四步。4、当你觉得有信心了，用A.exe把B编译一遍，就得到了B.exe。然后A的代码和A.exe都在也不需要存在了，删掉他们。以后你就不断的用B.exe来编译下一个版本的B就好了。就自举了。 vczh 知乎回答 那么图灵完备的语言是不是都可以自举呢？从我个人“没有哪一门图灵完备语言实现的功能是另一门图灵完备语言所不能实现的”的观点来看答案是肯定的。觉得没有必要在“能不能”和“有没有实现”这个问题上纠结，这只是编程语言的一种性质，能不能自举是一回事，有没有必要真的实现就是另一回事了。 图灵完备wiki描述：“在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）可以用来模拟单带图灵机，那么它是图灵完备的”。图灵机的基本思想是“用机器来模拟人们用纸笔进行数学运算的过程”，也就是说图灵机能执行所有可被描述的计算。存在着一类问题我们人类能构造出来而图灵机是不能解的，那就是悖论。悖论是不具有可计算性的，如典型的停机问题等。关于图灵机推荐这一篇论文。 编程语言的图灵完备性 图灵完备的语言也就是可以模拟出图灵机的语言，大部分的GPL（General Purpose Language，通用编程语言）基本都是（所以在项目实践中谈语言是否图灵完备的意义并不大），所以也易知没有哪门图灵完备语言实现的功能是另一门图灵完备语言所不能实现的（只是过程的难易程度，也就是开发成本不同）。相对于GPL，大部分的DSL（Domain Specific Language，领域专用语言）都不是图灵完备的，典型的就是SQL（指SQL92标准，T-SQL之类不属于）、html等。 语法糖wiki描述：“语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·兰丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性”。在我理解，语法糖的存在其实就是为了让代码写起来更简洁&amp;读起来更舒服（但是我感觉它与可读性的关系并不是绝对的正相关，因为一种写法对熟悉这门语言特性的人来说可能很舒服，但是不熟悉的人可能就很难理解，编程和理解的能力永远是相对而言的），其在绝大多数情况下并不会影响到语言（特别是编译型语言）执行的效率，因为它在被语言处理器（编译器、静态分析器等）处理的过程中就被转换掉了（有点类似C++内联函数的意思），该过程如wiki所言：“把‘加糖’的结构变成基本的结构，这个过程叫做‘去糖’”。 语法盐类似的也有语法盐。wiki描述：“语法盐（英语：syntactic salt）是指在计算机语言中为了降低程序员撰写出不良程式码的设计，但其中仍会有潜藏错误存在的可能。例如，C语言或C++语言中Switch指令的case中若不加break编译器并不会产生错误讯息，部分程序员认为宣告变数型态也是语法盐的一种”。Wiki上还举了一个容易理解的java的例子：Java中并不允许将一个宣告为float类型的变量赋值给一个宣告为int类型的变量，但是C和C++会自动把float类型的变量舍去小数并赋值给int类型的变量。 int num1; float pi=3.14159; num1=pi; //赋值错误]]></content>
  </entry>
  <entry>
    <title><![CDATA[备忘录]]></title>
    <url>%2Fmemo%2Findex.html</url>
    <content type="text"><![CDATA[2018 年4 月 2018-04-13可以利用OneDrive来同步JetBrains系列的IDE环境: (以Idea为例)修改相关IDEA安装目录中bin目录下的idea.properties文件中的idea.config.path值即可(默认是未设置的, 默认的配置所在目录是${user.home}/.IntelliJIdea/config), 例如: idea.config.path=C:/Users/jay/OneDrive/SettingsSync/JetBrains/IDEA/config 这就是我在OneDrive中的Idea配置同步目录注: 路径分隔符必须为/而不能为\, 否则IDE会无法识别, 导致配置目录设置在安装目录中的bin目录下 2018-04-11powershell下使用命令gwmi –lass win32_bios可以查看到本机的SN(Serial Number)码. 2018-04-11新装的gitbash启动奇慢, 在文件夹下右击想打开powershell时总是会误触, 没找到解决办法, 直接去注册表中删除相关表项即可 👉HKEY_CLASSES_ROOT\Directory\Background\shell 2018-04-09今天在PowerShell中使用virtualenv为django工程搭建python虚拟环境的过程中在执行activate脚本进行激活时发生错误: .\proVirtualEnv\Scripts\activate : 无法加载文件 C:\Users\jay\Documents\Code\django\proVirtualEnv\Scripts\activate.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。 原因是: PS的现用执行策略是 Restricted（默认设置）, 而Restricted策略为了系统安全不允许任何脚本运行, 执行命令set-executionpolicy remotesigned将PS执行策略修改为系统可以运行编写的未签名脚本和来自其他用户的签名脚本即可(需使用有管理员权限的PS, 选择A后回车). 3 月 2018-03-28推荐cli版的图片压缩工具nie4月10日更新: 发现在最新的node版本下并不支持. windows下推荐一款gui版的压缩工具antelope, 免费无广告体积还小, 挺好用的. 2018-03-27顺便提一下关于在linux与windows下查看环境变量的不同:查看所有环境变量的名称和值：Linux下：exportWindows下：set根据名称查该环境变量的值：Linux下：echo $环境变量名Windows下：set 环境变量名 2018-03-26CSS否定选择器:not()不能嵌套使用, 但是可以并列使用, 形如: :not():not()。例如我要选择所有p元素下的非(类a和类b)的元素, 则可以写作: p:not(.a):not(.b)。 2018-03-25今天发现了一个关于算法复杂度大O表示法的cheat sheet, 非常清晰的展示了算法时间复杂度之间的区别. 2018-03-16很多时候我们在新建的docker镜像里面查找配置文件的时候会很麻烦, 使用locate命令会提示没有此命令, 这是我们可以安装mlocate软件, 这样updatedb和locate命令就都可以使用了. 2018-03-14win10的MS store以及在上面下载的app都是运行在沙箱中的, 其网络流量收到了系统的限制而从本地走, 所以像其他exe程序一样直接使用系统代理, 我们可以通过设置来进行修改, 具体可以参照该知乎专栏. 2018-03-06关于各种开源协议的不同, 推荐阮一峰老师一篇博文中的一张图,一看就懂. 2018-03-05win下使用power /energy命令后,正常使用电脑一分钟可以得到电脑的能源效率分析报告.使用power /batteryreport命令后,可以得到一份本机电池的报告,包含电池损耗等信息. 2 月 2018-02-26安装系统时提示硬盘格式不符, 需转换成GPT/MBR时,可在安装界面使用Shift+F10快捷键调出cmd, 使用命令进行转换 list disk：显示本机安装的硬盘，编号为0、1、2…… select disk X：选择上面列出的硬盘 clean：清空选中硬盘原有分区信息 convert gpt/mbr：将分区格式转换为GPT/MBR list partition：显示已有分区 2018-02-02cmd下输入ipconfig /flushdns, 回车, 即可刷新hosts文件 1 月 2018-01-10今天centos上在安装软件之后手动将软件命令文件所在的bin目录加入/etc/environment, 因为我个人喜欢在该文件中配置环境变量, 但是centos7下好像该文件默认为空, 于是我手动添加PATH=/usr/local/freeradius/bin, 结果source之后发现其他的环境变量里的命令都找不到了, 如使用vi会提示command not found, 要使用/bin/vi才行, 于是到现在才发现这样引入环境变量是清空重新引入的过程, 并非是简单的添加, 所以最好还是这样写PATH=/usr/local/freeradius/bin:$PATH, 但是有个劣势就是如果多次source的话会让PATH变量中包含多个/usr/local/freeradius/bin路径. 2018-01-07JUnit4中测试中几种常用的注解(主要是@AfterClass,@BeforeClass,@after,@before的区别):@Before：初始化方法,对于每一个测试方法都要执行一次@After：释放资源,对于每一个测试方法都要执行一次@Test：测试方法，在这里可以测试期望异常和超时时间, 如: @Test(expected=ArithmeticException.class)检查被测方法是否抛出ArithmeticException异常@Ignore：忽略的测试方法@BeforeClass：针对所有测试，只执行一次，且必须为static void@AfterClass：针对所有测试，只执行一次，且必须为static void一个JUnit4的单元测试用例执行顺序为：@BeforeClass -&gt; @Before -&gt; @Test -&gt; @After -&gt; @AfterClass每一个测试方法的调用顺序为：@Before -&gt; @Test -&gt; @After 2018-01-06今天在Atom的Sync Settings插件中用到了github的gist服务, 该服务专门用来存放代码片段, 相当于小的git仓库. 特点是用户可以无限制创建私有gist, 也可以不登陆直接匿名创建gist, 其唯一识别是gist ID, 只要知道id就可以查看内容, 无论其是public || secret, 且与用户无关.在Gist URL后加上.pibb后缀, 可以得到一个纯HTML的版本, 如:https://gist.github.com/anonymous/cc370d24d7f4be3363ec2f09ad1e0628.pibb, 这样就可以直接复制粘贴到其他地方了, 如论坛之类.这方面的使用感觉和nhttps://paste.ubuntu.com有点像.另, :&lt;&lt;BLOCK 这里 全部是 注释 BLOCK 可以在shell脚本中进行大段注释; 2018-01-03从GitHub下载单个文件 =&gt; https://raw.githubusercontent.com/username/repository/branch(master)/filename 2017 年12 月 2017-12-24从阮一峰老师的博客学习了一下git commit的写法,在这里摘抄一下:commit message包括三个部分:header,Body和footer, 形如: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; // 空一行 &lt;body&gt; // 空一行 &lt;footer&gt; 其中header是必须的,body和footer可以省略.Headerheader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。(1)typetype用于说明 commit 的类别，只允许使用下面7个标识。feat：新功能（feature）fix：修补bugdocs：文档（documentation）style： 格式（不影响代码运行的变动）refactor：重构（即不是新增功能，也不是修改bug的代码变动）test：增加测试chore：构建过程或辅助工具的变动如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。(2)scopescope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。(3)subjectsubject是 commit 目的的简短描述，不超过50个字符。以动词开头，使用第一人称现在时，比如change，而不是changed或changes第一个字母小写结尾不加句号（.）BodyBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。More detailed explanatory text, if necessary. Wrap it toabout 72 characters or so.Further paragraphs come after blank lines.-Bullet points are okay, too-Use a hanging indent有两个注意点。（1）使用第一人称现在时，比如使用change而不是changed或changes。（2）应该说明代码变动的动机，以及与以前行为的对比。FooterFooter 部分只用于两种情况。(1)不兼容变动如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。 BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: { myAttr: ‘attribute’, } After: scope: { myAttr: ‘@’, } The removed inject wasn’t generaly useful for directives so there should be no code using it.(2)关闭 Issue如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。 Closes #234也可以一次关闭多个 issue 。Closes #123, #245, #992Revert还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。 revert: feat(pencil): add ‘graphiteWidth’ optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。 2017-12-21在使用maven package命令打包项目的时候, 如果我们需要临时跳过测试, 可以加上-D skipTests参数来进行设置, 如果是在IDEA上有直接可使用的maven工具插件在项目右侧栏, 其工具栏有一个带闪电的小球, 可触发”skipTests”模式 . 2017-12-17USTC的ubuntu源文件自动生成器 2017-12-09有时候需要在当前文件夹开一个临时的端口来访问一下看看效果可以使用http-server.需要使用npm全局安装http-sever: npm install -g http-server使用http-server在本地开一个临时的server: http-server -a 127.0.0.1 -p [端口号]根目录默认为当前目录,也可以直接在http-server后面指定目录地址(相对/绝对都可以),如果不加-a参数的话则会默认在本地的几个网卡地址上都进行设置(如:你有一个10.10.10.1的虚拟网卡,如果你有一台虚拟机使用的是这个网卡,则虚拟机也可以访问当前设置的地址) 2017-12-06有些同学不会下载离线完整版的chrome,方法是:google搜索关键词”chrome 帮助”,会得到结果”Google Chrome帮助 - Google Support”,下面的小标题有”下载和安装Google Chrome”,点进去,在”在 Windows 设备上安装 Chrome”下方会有小标题”离线安装 Chrome”,点击展开,会出现链接备用 Chrome 安装程序,点击后可以看到打开的页面URL最后有属性standalone=1,在该页面下载的chrome即是离线版的. 2017-12-01从浏览器复制网站地址后粘贴到别处,如果地址中有中文,往往发现地址里的中文被转码成了URL编码,如https://zh.wikipedia.org/wiki/维基百科被转成了https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91,其实使用剪切而非复制就不会出现这种尴尬的问题. 11 月 2017-11-29今天在使用服务器做ss代理的时候一直提示ERROR: unable to resolve……，很奇怪，这个配置已经用过很多遍都没出问题，而且明明服务器配置了多个DNS，却显示无法解析域名。在GitHub该issue中找到了解决办法，在配置文件里加了&quot;nameserver&quot;: &quot;8.8.8.8&quot;(也就是google的一个DNS)这个字段，问题就解决了，开发者说并不确定问题的根源,但ss是默认从/etc/resolv.conf获取默认DNS服务器的。然后，在使用proxifier时突然报错 [11.29 16:56:25] Error: Windows network (Winsock) is not properly configured to work with Proxifier. [11.29 16:56:25] Proxifier or some of its parts may work incorrectly. [11.29 16:56:25] It is highly recommended that you run SysSettings tool to address this problem. 一脸懵逼，之前用还好好的，估计可能是前几天一次win10版本大更新导致的，根据提示中的SysSettings，用everything查找了一下系统，发现是proxifier自带的一个设置程序，就在proxifier的安装目录下，进去之后先运行了64位的“SysSettings64.exe”，显示proxifier module is not installed，当然是点击install了，安装后重启proxifier，并没什么用（挠头），索性运行了32位的“SysSettings32.exe”，也安装了下，重启，成了。应该是更新时系统把proxifier的部分模块给删了导致的问题。 2017-11-29Tiny Core，仅10+M的linux，因为轻量而被追捧，网上的教程也不少。进入系统后输入命令，tce可以进入Tiny Core Extension，即CLI应用浏览器，按s进入搜索模式，输入需要的软件/库名即可，系统会列出相关的选择。关于Tiny Core Plus，是带GUI的版本，稍大，100+M，在vmware直接从IOS启动时只有选择”Boot Core with only X/GUI (TinyCore)”及以下的启动项才能正常启动，原因未知。 2017-11-27发现curl v4.ifconfig.co命令获取本机ip地址的速度比curl ifconfig.co来的快得多，好用。注：适用于虚拟机、云服务器之类使用NAT转换、使用ifconfig命令无法直接获取公网地址的主机。 2017-11-20今天更新kali后发现shadowsocks无法使用，运行后报错： AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup 看错误应该是加密方面的问题，因为ss依赖openssl，那就应该是openssl的问题了，上网搜了下，解决办法在此 2017-11-12最近比较迷Alvaro Soler的Sofía（一开始以为是情歌，结果查资料才知道是歌手失恋后写的,感情上可以说很乐观了），虽然是西班牙语的民谣，根本不知道在唱什么🌚但是曲子很有活力，节奏感很强，口哨可以轻松带起来。很棒的歌。 2017-11-10今天趁着田老师有空，请他带着我去文理楼机房调整维护了自己的两台服务器，因为没有远程控制卡（毕竟之前是废弃在仓库的老机器了），所以只要出现故障就只能现场维修，有一台还是自己七月份时候配iptables规则的时候不小心把网络全封了……很蛋疼🌚。不得不说田老师的为人真的超赞，不仅网络方面的技术好，作为指导老师也很平易，非常照顾学生。感觉自己虽然会用linux，但是在系统的管理和维护上的能力还有欠缺。打算明年考RHCE的认证，不得不准备就业的事了。 2017-11-09Get full version of StarUML startUML获取证书，V2.8.0亲测可用. 2017-11-05之前的ssl证书都是在七牛上获取的trustasia颁发的免费证书，但是过程比较繁琐，需要先申请然后用dns或文件的方式验证，一般一天后通过验证，然后要把证书下载下来传到服务器，再配置nginx……发现lnmp现在自带了有ssl添加功能，试了下，报错： Traceback (most recent call last): File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 2363, in &lt;module&gt; main() File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 719, in main symlink=options.symlink) File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 988, in create_environment download=download, File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 918, in install_wheel call_subprocess(cmd, show_stdout=False, extra_env=env, stdin=SCRIPT) File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 812, in call_subprocess % (cmd_desc, proc.returncode)) OSError: Command /opt/eff.org/certbot/venv/bin/python2.7 - setuptools pkg_resources pip wheel failed with error code 2 Let&#39;s Encrypt SSL Certificate create failed! 在此找到解决办法，最终是用@knowThis小伙伴的办法解决的： $ apt-get purge python-virtualenv python3-virtualenv virtualenv $ pip install --upgrade pip $ pip install virtualenv $ vim /bin/lnmp #将&quot;/bin/certbot certonly&quot;替换成&quot;/bin/certbot --no-bootstrap certonly&quot;。仅一处。 使用lnmp自带的添加ssl功能有个好处就是它会配置默认将http流量直接转发到https;直接使用lnmp 生成ssl后，vhost站点的配置文件在/usr/local/nginx/conf/vhost，需要进行配置的话可以进去修改，80端口的server是http的配置，443端口的是https，以下举例：1. 需要启用404页面，当资源访问错误时跳转到指定页面：取消error_page的注释，将其修改为error_page 404 403 500 502 503 504 = /404.html;注意：/404.html文件的路径是相对于配置中的root字段的值，所以如果root字段的值为/home/wwwroot/default,那么404.html在系统中的绝对路径为/home/wwwroot/default/404.html。其次，http和https的配置是分开的，所以如果只配置了http的404页面，那么在https协议访问发生资源错误时是不会跳转到http配置中设置的404页面的。2. http访问配置好的404页面发现不会自动跳转到https。需要我们手动把http流量强制转发到https，在http配置中添加rewrite ^ https://$server_name$request_uri? permanent;3. 修改配置文件后需要重启nginx服务才能生效。如果无法重启，首先使用nginx -t命令检测配置文件，如果报错说明是配置文件的错；如果没有报错，使用netstat -anp|grep :80查看80端口是否被占，如果被占则需要kill掉使用80端口的进程；如果没有被占，使用journalctl -xe查看启动服务时的报错日志进行调试解决。 2017-11-01最近配置nginx时总是遇到nginx -t测试配置文件时没问题，但是restart服务却一直失败，重启一下吧又好了，突然想起来会不会是端口被占了，查一下：# netstat -anp|grep &quot;:80&quot; tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 8205/nginx.conf tcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN 1356/java 端口果然被占用了，kill掉这个进程即可。 10 月 2017-10-27强推一款跨平台的终端连接工具：Termius，尤其是在IOS上，好用又良心。在此之前我在手机上使用的SSH连接工具是Shelly，它仅支持SSH，而且不购买专业版的话就无法保存密码，每次都要重新输入，简直是要逼死使用长密码的人，在我准备购买专业版时发现当前下载的shelly是使用之前的一个Apple ID获取的，购买的话就需要使用现在的账号重新获取，于是删除了shelly后我到App store中搜索了ssh，出现的第一个结果就是Termius，五星的好评让我尝试了一下它，结果就没再安装shelly。 2017-10-24上校图书馆网站查书发现一个很有趣的现象，阿加莎、松本清张的书没人借，退一步，岛田庄司的也没人借，然而东野圭吾的书都基本被借光，不好做什么评论，只觉得挺有意思。 2017-10-21之前linux下查命令参数总是用man配合字符匹配，突然发现有tldr这种利器，赶紧推一下, npm install tldr 2017-10-18推荐一款linux下递归搜索文件内容的软件：ag，安装步骤： git clone https://github.com/ggreer/the_silver_searcher.git sudo apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev ./build sudo make install 体验还不错，在linux子系统下运行效果图 2017-10-13发现IOS下的Workflow可以提取网页的json数据，这样就能访问有些网站提供的API直接拿数据了，简直就是一只小爬虫，自己做了一个根据书名从豆瓣拉取图书相关信息的workflow –&gt;豆瓣读书 &lt;–，感觉查书什么的挺好用的 2017-10-09当觉得生活无趣又无望时就应该读汪曾祺。虽说小波的文字也是颇有趣的，但哪个百无聊赖的人喜欢听那么理性的话。可这么说肯定是有人不同意第二句的。 2017-10-08今天是在行政楼实验室的最后一天。从我的位置看出去的风景还是挺让人放松的。因为领导换届和单位转型为管理单位，所以废除掉SDN实验室，再加上“新增了领导办公室不够用”、“一个领导一个作风，这个实验室是老领导设办的”、“这是和华三一起做的SDN实验室，但你们在这里的学生有几个是做SDN的”等理由，看上去总是很合理的。但还是感觉似乎不该这样。可能是因为喜欢在这边学习的氛围和深夜写代码的自由。我们都知道归属感来之不易。不过这么说起来就很像是心情不好想埋怨些什么的借口了。 2017-10-05推荐一款cli下的mysql客户端，mycli，支持语法高亮和命令补全，linux下直接install就有，效果相当棒。 9 月 2017-09-21ES6的暂时性死区 //(1). ES6中的let命令不像var那样具有“变量提升”现象。 console.log(foo);//ReferenceError let foo=2; //(2). ES6中只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域而不受外部的影响。 var tmp=123; if (true) { tmp=&quot;abc&quot;;//ReferenceError let tmp; } //ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。 //总之在代码块内，在let命令声明变量之前，该变量都是不可用的， //这在语法上成为“暂时性死区”(TDZ,temporal dead zone)。 //再来一个例子: if(true) { //TDZ开始 tmp=&quot;abc&quot;;//ReferenceError console.log(tmp);//ReferenceError let tmp;//TDZ结束 console.log(tmp);//undefined tmp=&quot;abc&quot;; console.log(tmp);//123 } 8 月 2017-08-15又在开源论坛上看到有人在黑php。php因为其一开始的自身定位问题导致现在的特性有很多地方好像不是那么讨（有些）人喜欢，但是这么些年来的不断改进已经让其无愧于其自身定位了，在小规模的站点开发中，缺点基本可以忽略，况且易上手又适合快速开发让它的门槛变得很低。当然了，有人也因为以上的优点而称PHP为屌丝语言，我个人觉得没必要这样，每一门语言都有其自身的特性，优点和缺点都算是，语言只是一个工具，实在不喜欢换一门就行，没必要一边用一边黑。开发本来应该是一件很愉快的事，这样可就搞糟了。 2017-08-10今天发现在文件夹下按住shift+鼠标右击打开的cmd/powershell窗口无法获取到在该次登录系统后添加的环境变量, 也就是说你刚添加了环境变量, 但是使用这种方法, 或者在IDE中,如idea里面打开cmd/powershell窗口后却无法使用该环境变量, 需要注销后重新登录系统才会加载, 但是使用传统办法(如run)打开的是可以直接使用的. 7 月 2017-07-29感觉自己的大学生活好像今天坐公交遇到的小男孩，正经时很可爱，冲我笑时却很丑。但我到底还是喜欢的。这么说好像不负责任的旁观者。 2017-07-21powershell启动加速。参见该官方博文,将以下命令粘贴到powershell，等待执行完毕。 Set-Alias ngen @( dir (join-path ${env:\windir} “Microsoft.NET\Framework”) ngen.exe -recurse | sort -descending lastwritetime )[0].fullName [appdomain]::currentdomain.getassemblies() | %{ngen $_.location} 2017-07-20windows下在资源管理器右键打开powershell /cmd。进regedit，定位到HKEY_CLASSES_ROOT\Directory\Background\shell\cmd\command表项，对右侧的字符串项的值进行修改： #用powershell打开则改为： powershell.exe -NoExit Set-Location “%V” #用cmd打开则改为： cmd.exe /s /k pushd &quot;%V&quot; 确定保存即可 2017-07-03第一步，安装中文包：sudo apt-get install language-pack-zh-hant language-pack-zh-hans 第二步，配置相关环境变量：sudo vim /etc/environment在文件内容末尾另起一行增加语言和编码的设置： LANG=&quot;zh_CN.UTF-8&quot; LANGUAGE=&quot;zh_CN:zh:en_US:en&quot; 第三步，重新设置本地配置：sudo dpkg-reconfigure locales都选择zh_CN.UTF-8 保存重启即可 一些零碎的知识点和想说的话放在这里以上]]></content>
  </entry>
</search>
