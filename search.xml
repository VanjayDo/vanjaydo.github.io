<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[了解SDN]]></title>
    <url>%2Fpost%2FKnowledgeAboutSDN.html</url>
    <content type="text"><![CDATA[今天跑去图书馆借了重构网络：SDN架构与实现一书（之所以借这本书是因为在这本书刚出的时候，豆瓣给我推送过，此后就一直在我的“想读”列表里，至今才得以将其移除）。该书作为普及概念的入门书还是挺好的，本文也只是介绍一下SDN的概念，很多文字都是引用了其中的内容。 什么是SDNSoftware Defined Network，即软件定义网络。对于其起源与发展请参考微信公众号上的一文 《SDN软件定义网络从入门到精通》导论课。 书中提及，SDN主要有三个特征： 网络开放可编程（核心特征）：SDN建立了新的网络抽象模型，为用户提供了一整套完整的通用API，使用户可以在控制器上编程实现对网络的配置、控制和管理，从而加快网络业务的部署。 控制平面与数据平面的分离：此处的分离是指控制平面与数据平面的解耦合。控制平面有数据平面之间不再相互依赖，两者可以独立完成体系结构的演进，类似与计算机工业的Wintel模式，双方只需要遵循统一的开放接口进行通信即可。控制平面与数据平面的分离是SDN区别于传统网络体系结构的重要标志，是网络获得更多可编程能力的架构基础。 逻辑上的集中控制：主要是指对分布式网络状态的统一集中管理。在SDN架构中，控制器会负担起收集和管理所有网络状态信息的重任。逻辑集中控制为软件编程定义网络功能提供了架构基础，也为网络自动化管理提供了可能。 其中控制平面与数据平面分离为逻辑集中控制创造了条件，逻辑集中控制为开放可编程控制提供了架构基础。 那么这就解决了我这个小白的一个小疑问：既然是软件定义网络（SDN），那么实现一个软件能够操纵网络算不算是SDN？ 那么答案显然是不算了，这样最多只能算是软件控制网络。 需要一提的是这里的控制平面是指提供给网络管理人员使用TELNET、SSH等方式来管理设备的方式的一个抽象概念。 那么什么是数据平面？什么又是控制器？接着往下看👇 SDN的结构SDN网络体系结构主要包括五部分： SDN网络应用：它实现了对应的网络功能应用。这些应用程序通过调用SDN控制器的北向接口，实现对网络数据平面设备的配置、管理和控制。 北向接口：它是SDN控制器与网络应用之间的开放接口，它将数据平面资源和状态信息抽象成统一的开放编程接口。 SDN控制器：它是SDN的大脑，也称为网络操作系统。控制器不仅要通过北向接口给上层网络应用提供不同层次的可编程能力，还要通过南向接口对SDN数据平面进行统一配置、管理与控制。 南向接口：它是SDN控制器与数据平面之间的开放接口。SDN控制器通过南向接口对数据平面进行编程控制，实现数据平面的转发等网络行为。所以可以将其理解为数据平面的编程接口。 SDN数据平面：数据平面在SDN中负责数据处理、转发和状态收集等方面，其核心设备为交换机。它包括基于软件实现的（如虚拟交换机）和基于硬件实现的（如物理交换机）数据平面设备。数据平面设备通过南向接口接偶数来自控制器的指令，并按照这些指令完成特定的网络数据处理。同时，SDN数据平面设备也可以通过南向接口给控制器反馈网络配置和运行时的状态信息。 SDN可以大致分为三层，最上面是SDN网络应用，然后中间是SDN控制器，它们两个之间通过北向接口相连；最下面是SDN数据平面，它与控制器之间通过南向协议相连。 为什么需要SDN因为我们需要支持快速增长的网络业务需求，所以需要拥有更多可编程能力的网络。 众所周知，相比发展迅速的计算机产业，网络产业的创新十分缓慢。每一个创新都需要等待数年才能完成技术标准化。为了解决该问题，SDN创始人Nick McKeown教授对计算机产业的创新模式和网络产业的创新模式进行了研究与对比。他总结出支撑计算机产业快速创新的三个因素： 计算机工业找到了一个面向计算的通用硬件底层：通用处理器，这使得计算机的功能可以通过软件定义的方式来实现。 计算机功能的软件定义方式带来了更加灵活的编程能力，使得软件应用的种类得到了爆炸式增长。 计算机软件的开源模式，催生了大量的开源软件，加速了软件开发的进程，推动了整个计算机产业的快速发展。 相比之下，传统的网络设备与上世纪60年代的IBM大型机类似。网络设备硬件、操作系统和网络应用三部分高耦合在一起组成了一个封闭的系统，这三部分相互依赖，通常隶属于同一家网络设备厂商，每一部分的创新与演进都要求其余部分做出同样的升级，这样的架构严重阻碍了网络创新进程的开展。 在这种思路的影响下，McKeown教授团队提出了一个新的网络体系结构：SDN，它对传统网络系统的三部分进行了重新划分，在每一层之间建立统一的开放接口，这样就相当于提供了通用的底层平台。 赘述所以SDN到底是什么呢？因为如今网络业务的激增，我们需要拥有更多可编程能力的网络，于是有人就对此进行了分析，他们发现问题的根源在于传统网络对于创新开发的限制太大了，因为根本没有统一的接口或者通用的底层来支持网络上的开发，都是由交换机来负责转发具体的流量到具体的目的节点，如果我想自己实现一些功能就得从底层开始写。所以他们利用解耦的方式将传统网络的数据与控制分离开来，将数据平面变得更加的通用化，这样数据平面（交换机）就只负责数据的转发，到底怎么转发是由控制器来告诉它的，这里控制器就扮演了通用底层的角色。所以数据平面通用化后只需要接受来自控制平面（控制器）的命令并执行就可以了。 而南向协议就是定义了数据平面的编程接口，直接决定了数据平面的可编程能力，他来协调控制器与数据平面。具体的控制逻辑全部集中到控制器实现（更高层的逻辑功能则由SDN网络应用来定义），所谓北向接口就是最后由控制器对外开放调用的API。 SDN网络应用则由需要管理控制网络人，也就是具体的开发者、使用者来实现，你要做什么功能的软件、实现什么样的逻辑功能，我北向接口提供的所有API都在这里，你要用什么你就从里面调用就好了。 对于SDN的理解，还推荐知乎上一位大佬的回答，很形象的比喻👇传统网络就像真人在踢足球，每个人自己思考下一步把球传到哪儿，然后自己用头或者脚传出去。SDN就像你在打实况足球，球员怎么传球都是集中由你来控制。这就叫控制面和转发面的分离，并且控制面集中起来。集中后的控制面叫做控制器，类似游戏手柄。控制器之上就是软件，来操作控制器具体怎么处理。就像你聪明的大脑来控制游戏手柄。open flow就是控制器与网络设备沟通时的语言。 陈博 SDN 是什么？]]></content>
      <tags>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tmux使用指南]]></title>
    <url>%2Fpost%2FTmux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html</url>
    <content type="text"><![CDATA[在linux上, 像tmux这么好用的软件, 身边很多朋友却不会用, 推荐给他们的时候总是缺一篇综合性的指导文, 所以搜刮了一下网上的教程, 又添了些自己在平时使用过程中的技巧, 写在这里. tmux外命令操作启动新会话：tmux [new -s 会话名 -n 窗口名] 恢复会话：tmux at [-t 会话名] 列出所有会话：tmux ls 关闭指定会话：tmux kill-session -t 会话名 关闭所有会话：tmux ls | grep : | cut -d. -f1 | awk &#39;{print substr($1, 0, length($1)-1)}&#39; | xargs kill tmux内操作tmux内命令操作清空当前窗格缓存区内容：tmux ”clear-history“ 杂项切换出tmux（tmux 仍在后台运行）：d 窗口中央显示一个数字时钟：t 列出所有快捷键：? 进入命令行模式： : 快捷键操作需要注意, 在 Tmux 中，需要按下前缀快捷键 ctrl+b后才能进行其他组合快捷键的使用，以下操作均是在按下前缀快捷键之后进行操作的 👇 会话启动新会话：:new&lt;回车&gt; 列出所有会话：s 重命名当前会话：$ 窗口 (标签页)创建新窗口：c 列出所有窗口：w 后一个窗口：n 前一个窗口：p 查找窗口：f 重命名当前窗口：, 关闭当前窗口：&amp; 调整窗口排序交换两个指定的窗口：swap-window -s 3 -t 1 (交换3 号和 1 号窗口) 交换当前和指定窗口：swap-window -t 1 (交换当前窗口和 1 号窗口) 移动当前窗口到指定窗口：move-window -t 1 (移动当前窗口到1号窗口) 窗格（分割窗口）垂直分割：% 水平分割：&quot; 交换窗格：o 关闭窗格：x 切换布局：Space 显示每个窗格的序号：q (当数字出现的时候按数字几就选中第几个窗格) 与上一个窗格交换位置：{ 与下一个窗格交换位置：} 窗格最大化/最小化切换：z 同步窗格这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入： :setw synchronize-panes [on/off] 你可以在命令尾部加上on/off来指定功能的开或关, 如果不指定则会在两者之间切换. 该功能仅针对当前操作的窗口有效，不会影响别的会话和窗口。具体的操作请看 👉 国外网友的博客 调整窗格尺寸可以通过如下操作重调窗格的尺寸 👇 当前窗格向下扩大 1 格 : resize-pane -D 当前窗格向上扩大 1 格 : resize-pane -U 当前窗格向左扩大 1 格 : resize-pane -L 当前窗格向右扩大 1 格 : resize-pane -R 当前窗格向下扩大 n 格 : resize-pane -D n 编号为 2 的窗格向左扩大 n 格 : resize-pane -t 2 -L n 抑或是使用快捷键, 直接对当前窗格使用上下左右键进行调整, 当然这些所有的操作也都是在按下前缀快捷键ctrl+b之后进行才有效 文本复制模式：按下前缀快捷键后再按下[键即可进入文本复制模式。 此时可以使用上下方向键在屏幕中移动光标, 浏览当前窗格中缓存的历史输出(使用上下方向键是按行浏览, 使用PgUp和PgDn是按页浏览)。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。 Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中： setw -g mode-keys vi 启用这条配置后，就可以使用 h、j、k、l 来移动光标了。 想要退出文本复制模式的话，按下回车键就可以了。一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。 例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。 vi emacs 功能 ^ M-m 反缩进 Escape C-g 清除选定内容 Enter M-w 复制选定内容 j Down 光标下移 h Left 光标左移 l Right 光标右移 L 光标移到尾行 M M-r 光标移到中间行 H M-R 光标移到首行 k Up 光标上移 d C-u 删除整行 D C-k 删除到行末 $ C-e 移到行尾 : g 前往指定行 C-d M-Down 向下滚动半屏 C-u M-Up 向上滚动半屏 C-f Page down 下一页 w M-f 下一个词 p C-y 粘贴 C-b Page up 上一页 b M-b 上一个词 q Escape 退出 C-Down or J C-Down 向下翻 C-Up or K C-Up 向下翻 n n 继续搜索 ? C-r 向前搜索 / C-s 向后搜索 0 C-a 移到行首 Space C-Space 开始选中 C-t 字符调序 配置选项：# 鼠标支持 - 设置为 on 来启用鼠标 * setw -g mode-mouse off * set -g mouse-select-pane off * set -g mouse-resize-pane off * set -g mouse-select-window off # 设置默认终端模式为 256color set -g default-terminal &quot;screen-256color&quot; # 启用活动警告 setw -g monitor-activity on set -g visual-activity on # 居中窗口列表 set -g status-justify centre # 最大化/恢复窗格 unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp unbind Down bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp 配置文件（~/.tmux.conf）：# 基础设置 set -g default-terminal &quot;screen-256color&quot; set -g display-time 3000 set -g escape-time 0 set -g history-limit 65535 set -g base-index 1 set -g pane-base-index 1 # 前缀绑定 (Ctrl+a) set -g prefix ^a unbind ^b bind a send-prefix # 分割窗口 unbind &#39;&quot;&#39; bind - splitw -v unbind % bind | splitw -h # 选中窗口 bind-key k select-pane -U bind-key j select-pane -D bind-key h select-pane -L bind-key l select-pane -R # copy-mode 将快捷键设置为 vi 模式 setw -g mode-keys vi # 启用鼠标(Tmux v2.1) set -g mouse on # 更新配置文件 bind r source-file ~/.tmux.conf \; display &quot;已更新&quot; #&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; # Tmux Plugin Manager(Tmux v2.1) # Tmux Resurrect set -g @plugin &#39;tmux-plugins/tmux-resurrect&#39; # List of plugins set -g @plugin &#39;tmux-plugins/tpm&#39; set -g @plugin &#39;tmux-plugins/tmux-sensible&#39; # Other examples: # set -g @plugin &#39;github_username/plugin_name&#39; # set -g @plugin &#39;git@github.com/user/plugin&#39; # set -g @plugin &#39;git@bitbucket.com/user/plugin&#39; # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf) run &#39;~/.tmux/plugins/tpm/tpm&#39; #&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 永久保存tmux会话利用插件Tmux Resurrect 和 Tmux Continuum可以帮我们永久保存tmux会话（它们均适用于tmux v1.9及以上版本）。具体的操作请查看 👉 网友路易斯的博客, 以及其他更高阶的操作均可以参考该博文. 赘述本文在该gist与该博文上进行总结.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java实现绑定邮箱与验证系统]]></title>
    <url>%2Fpost%2FUseJava2ImplimentTheEmail-bindingSystem.html</url>
    <content type="text"><![CDATA[最近在写的一个网络安全管控项目需要用户在账号中绑定自己的邮箱, 以便在发现用户账户存在异常之后, 及时通过邮件方式通知用户和管理员. 在这里总结一下基于SpringBoot框架的设计与实现过程. 想法跟我们以前在其他平台注册账号绑定邮箱一样, 对于绑定邮箱, 我们需要确认用户对所绑定邮箱的所有权, 在用户进行绑定操作后, 系统会发送一封带有验证链接的邮件给对应的邮箱, 用户登录邮件点击链接进行验证. 链接问题对于链接, 其中应该放置所有的能够用来判断用户与邮箱对应关系以及链接有效性的信息, 而且这些信息应该加密成一个密文(这里我们就叫它secret吧, 下同)作为参数放在链接中. 至于验证链接的有效性, 我们可以在生成secret之前获取当前时间信息作为参考基准加入到secret中, 这样系统接收secret到后解密, 拿到作为参考基准的时间与当前时间进行比较, 超过规定的有效期限则视为失效链接. 加密解密算法那么加密很重要了. 这里我采用的是AES的加密算法, 该算法是对称加密算法(因为此处不是使用非对称加密的场景, 且使用对称加密可以获取较快的加密解密速度), 而在对称加密算法中AES是非常好的选择, 不仅速度快, 且相对也更安全. 验证流程所以流程就应该是用户在绑定邮箱的时候, 提交需要绑定的邮箱, 然后系统接收到请求之后将用户账号、要绑定的邮箱以及当前时间加密为secret, 作为参数加到的后面, 将该链接放到邮件中发给用户要绑定的邮箱, 用户接收到验证邮件后, 点击里面的链接, 也就是请求了验证邮箱有效性的API, 系统接受到请求后提取其中的secret参数, 解密获取到用户账号、要绑定的邮箱以及作为参考基准的时间, 先将作为参考基准的时间与当前时间进行比较, 在规定的有效期限内则进行绑定, 将邮箱与用户账号相对应保存到数据库, 至此完成绑定. 实现这里详述一下代码实现 👇 配置文件项目配置文件application.yml中必要的部分配置 👇 server: ip: host ip/domain #所部署服务器的地址(ip或域名) port: port #后端服务所占端口 # 配置系统所用邮箱账号 email: username: name@***.com #所使用的邮箱地址 password: password #邮箱地址的客户端授权密码,区别于邮箱密码,一般在开启SMTP服务时要求设置 protocol: smtp #所用发件协议,默认为smtp host: host addr #所用邮箱的服务提供商的服务器地址,如网易163邮箱的是 smtp.163.com port: 465 #所用邮箱的服务提供商的服务器对应的发件协议服务的端口,如smtp协议建议使用465端口,基于ssl更安全 #关于使用465端口的问题, 还有个原因就是很多云服务器提供商会封闭25端口, 后面会有提及 发送邮件的功能实现发送邮件的工具类EmailUtil 👇 import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import javax.mail.*; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeMessage; import java.util.Date; import java.util.Properties; @Service public class EmailUtil { private static String HOST; private static String PROTOCOL; private static int PORT; private static String EMAILADDRESS; private static String PASSWORD; private static Session getSession() { Properties props = new Properties(); props.put(&quot;mail.smtp.host&quot;, HOST);//设置服务器地址 props.put(&quot;mail.store.protocol&quot;, PROTOCOL);//设置协议 props.put(&quot;mail.smtp.port&quot;, PORT);//设置端口 props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;); props.setProperty(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;); props.setProperty(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;); props.setProperty(&quot;mail.smtp.socketFactory.port&quot;, String.valueOf(PORT)); Authenticator authenticator = new Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(EMAILADDRESS, PASSWORD); } }; return Session.getDefaultInstance(props, authenticator); } public static boolean send(String toEmail, String content) { Session session = getSession(); try { Message msg = new MimeMessage(session); msg.setFrom(new InternetAddress(EMAILADDRESS)); InternetAddress[] address = {new InternetAddress(toEmail)}; msg.setRecipients(Message.RecipientType.TO, address); msg.setSubject(&quot;[来自eduroam安全管控系统的邮件]&quot;); msg.setSentDate(new Date()); msg.setContent(content, &quot;text/html;charset=utf-8&quot;); msg.saveChanges(); Transport.send(msg); return true; } catch (MessagingException mex) { mex.printStackTrace(); } return false; } @Value(&quot;${email.host}&quot;) public void setHOST(String HOST) { EmailUtil.HOST = HOST; } @Value(&quot;${email.protocol}&quot;) public void setPROTOCOL(String PROTOCOL) { EmailUtil.PROTOCOL = PROTOCOL; } @Value(&quot;${email.port}&quot;) public void setPORT(int PORT) { EmailUtil.PORT = PORT; } @Value(&quot;${email.username}&quot;) public void setEMAILADDRESS(String EMAILADDRESS) { EmailUtil.EMAILADDRESS = EMAILADDRESS; } @Value(&quot;${email.password}&quot;) public void setPASSWORD(String PASSWORD) { EmailUtil.PASSWORD = PASSWORD; } } AES加密功能利用AES对称加密算法对数据进行加密与解密的工具类AESCrypt 👇 import sun.misc.BASE64Decoder; import sun.misc.BASE64Encoder; import javax.crypto.Cipher; import javax.crypto.KeyGenerator; import java.security.Key; import java.security.SecureRandom; /** * AES加密解密工具类 * 利用AES对称加密算法对数据进行加密与解密 * * Created by jay on 2018/08/23 */ public class AESCrypt { private static String defaultKeySeed = &quot;this is a test&quot;; //设置默认的加密密钥, 根据自己需要设置 public static String encrypt(String plainText) { Key secretKey = getKey(null); try { Cipher cipher = Cipher.getInstance(&quot;AES&quot;); cipher.init(Cipher.ENCRYPT_MODE, secretKey); byte[] plain = plainText.getBytes(&quot;UTF-8&quot;); byte[] result = cipher.doFinal(plain); BASE64Encoder encoder = new BASE64Encoder(); return encoder.encode(result); } catch (Exception e) { throw new RuntimeException(e); } } public static String decrypt(String cipherText) { Key secretKey = getKey(null); try { Cipher cipher = Cipher.getInstance(&quot;AES&quot;); cipher.init(Cipher.DECRYPT_MODE, secretKey); BASE64Decoder decoder = new BASE64Decoder(); byte[] encrypted = decoder.decodeBuffer(cipherText); byte[] result = cipher.doFinal(encrypted); return new String(result, &quot;UTF-8&quot;); } catch (Exception e) { throw new RuntimeException(e); } } private static Key getKey(String keySeed) { if (keySeed == null) { keySeed = System.getenv(&quot;AES_SYS_KEY&quot;); } if (keySeed == null) { keySeed = System.getProperty(&quot;AES_SYS_KEY&quot;); } if (keySeed == null || keySeed.trim().length() == 0) { keySeed = defaultKeySeed; } try { SecureRandom secureRandom = SecureRandom.getInstance(&quot;SHA1PRNG&quot;); secureRandom.setSeed(keySeed.getBytes()); KeyGenerator generator = KeyGenerator.getInstance(&quot;AES&quot;); generator.init(secureRandom); return generator.generateKey(); } catch (Exception e) { throw new RuntimeException(e); } } } Controller的业务逻辑代码import com.alibaba.fastjson.JSON; import io.swagger.annotations.ApiImplicitParam; import io.swagger.annotations.ApiImplicitParams; import io.swagger.annotations.ApiOperation; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import javax.servlet.http.HttpServletRequest; import java.util.Date; import java.util.HashMap; import java.util.Map; @RestController @RequestMapping(&quot;UserController&quot;) public class UserController { @Autowired private HttpServletRequest request; @Autowired private UserService userService; @Autowired private GetUserIdFromRequest getUserIdFromRequest; //由于本项目使用了JWT, GetUserIdFromRequest类是用来从请求中提取token后从token获取用户id的. private final Log logger = LogFactory.getLog(this.getClass()); @Value(&quot;${server.ip}&quot; + &quot;:&quot; + &quot;${server.port}&quot;) private String target; @ApiOperation(value = &quot;用于所有用户绑定邮箱&quot;) @ApiImplicitParams({ @ApiImplicitParam(paramType = &quot;query&quot;, name = &quot;emailAddress&quot;, value = &quot;邮箱地址&quot;, required = true, dataType = &quot;String&quot;), }) @PostMapping(&quot;/BindEmail&quot;) public Object bindEmail(String emailAddress) { if (userService.findFirstByEmailAddress(emailAddress) != null) return new ResponseMessage(-1, &quot;操作失败! 该邮箱已被绑定!&quot;); String userId = getUserIdFromRequest.getUserId(request); long generateDate = new Date().getTime(); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;userId&quot;, userId); map.put(&quot;emailAddress&quot;, emailAddress); map.put(&quot;generateDate&quot;, generateDate); String json = JSON.toJSONString(map); String secret = AESCrypt.encrypt(json); System.out.println(&quot;email secret: &quot; + secret); String url = &quot;http://&quot; + target + &quot;/UserController/VerifyEmail?secret=&quot; + secret; StringBuffer stringBuffer = new StringBuffer(); stringBuffer.append(&quot;您好，&lt;/br&gt;&quot;). append(&quot;这是eduroam安全管控系统里绑定邮箱的验证邮件。&lt;/br&gt;&quot;). append(&quot;若要最终验证您的电子邮箱地址, 请点击以下链接验证邮箱，48小时内有效，请尽快验证。&lt;/br&gt;&quot;). append(&quot;&lt;a href=\&quot;&quot;). append(url). append(&quot;\&quot;&gt;&quot;). append(url). append(&quot;&lt;/a&gt;&lt;/br&gt;&quot;). append(&quot;如果单击链接无效，您可以将此链接复制到浏览器窗口，或在浏览器窗口中直接输入。&quot;); if (EmailUtil.send(emailAddress, stringBuffer.toString())) { logger.info(&quot;已发送用来绑定邮箱的验证邮件到&quot; + emailAddress); return new ResponseMessage(0, &quot;系统已发送验证邮件,请去邮箱查看并进行验证&quot;); } else return new ResponseMessage(-1, &quot;系统发送邮件失败,请稍后再试&quot;); } @ApiOperation(value = &quot;用于验证用户的绑定邮箱&quot;) @ApiImplicitParams({ @ApiImplicitParam(paramType = &quot;query&quot;, name = &quot;emailAddress&quot;, value = &quot;邮箱地址&quot;, required = true, dataType = &quot;String&quot;), }) @GetMapping(&quot;/VerifyEmail&quot;) public Object verifyEmail(String secret) { secret = secret.replace(&#39; &#39;, &#39;+&#39;); try { String json = AESCrypt.decrypt(secret); Map data = JSON.parseObject(json); String userId = data.get(&quot;userId&quot;).toString(); long generateDate = (long) data.get(&quot;generateDate&quot;); String emailAddress = data.get(&quot;emailAddress&quot;).toString(); long nowTime = new Date().getTime(); if ((nowTime - generateDate) / 1000 / 60 / 60 &lt;= 48) { User user = userService.findFirstByUserId(userId); if (user != null) { user.setEmailAddress(emailAddress); userService.update(user); logger.info(userId + &quot;已绑定邮箱&quot; + emailAddress); return &quot;&lt;h1&gt;😄邮箱绑定成功!&lt;/h1&gt;&quot;; } else return &quot;&lt;h1&gt;😱查无此用户,验证失败!&lt;/h1&gt;&quot;; } else { return &quot;&lt;h1&gt;😥超出验证时间,验证失败,请重新请求绑定!&lt;/h1&gt;&quot;; } } catch (Exception e) { return &quot;&lt;h1&gt;🤒检测到非法的secret&lt;/h1&gt;&quot;; } } } 完整的项目完整的项目地址 👉 eduroamControlSystem-Backend 链接的一次性当然了, 如果你要求更加严格的话可以考虑将生成后的secret保存到数据库, 然后在用户点击验证的时候查询一遍该secret是否在库中, 存在则说明该secret有效, 就将secret从库中删除并进行下一步操作, 不在则说明该secret是无效的. 这样能够保证secret的有效性和一次性, 数据库的话可以考虑使用redis以保证效率. url的编码问题这里需要注意的是, 本来一个secret是 👇 oUWyWz0MWtTxbKQtu1KVugVTvzR3ERTekz2tDettUqqtZ3No3XDqA6PE5zFUFsYHlkj+VmUiuGwh5tlMQBRKPh+25Tmt779zbuxhnbSBXUZ4aeRmwpMHfRx6/+ItVw+5 但是作为参数传入controller的方法后, 打印出来却是 👇 oUWyWz0MWtTxbKQtu1KVugVTvzR3ERTekz2tDettUqqtZ3No3XDqA6PE5zFUFsYHlkj VmUiuGwh5tlMQBRKPh 25Tmt779zbuxhnbSBXUZ4aeRmwpMHfRx6/ ItVw 5 可以发现所有的+都被替换成了空格, 这样在解码的时候就会出现问题这里由于AES在加密的时候不会产生空格, 所以整个secret一定不会有空格, 故你可以使用替换的方法将接收到的secret中的空格直接替换成+, 这也是我采用的; 或者你也可以使用URLEncoder进行编码 SMTP使用25端口还是465端口SMTP协议默认是使用25端口, 但是部分云服务器提供商考虑到smtp服务的安全性问题, 可能会封闭25端口, 如果是这样的话, 那么程序将无法通过25端口连接到邮件服务提供商的服务器, 会报Could not connect to SMTP host的错误, 所以这里我们需要换下端口, 使用465端口进行发件 👇 props.setProperty(&quot;mail.smtp.port&quot;, &quot;465&quot;); props.setProperty(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;); props.setProperty(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;); props.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;); 值得一提的是, 465端口是SMTPS服务的端口, SMTPS协议是SMTP协议基于SSL协议的变种协议, 较SMTP协议更安全, 当然了, 可以类比HTTPS之于HTTP.]]></content>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>AES</tag>
        <tag>Authentication</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot多个数据源配置]]></title>
    <url>%2Fpost%2FConfigSpringBootWithMultiDataSources.html</url>
    <content type="text"><![CDATA[本文涉及SpringBoot框架在使用过程的数据源配置, 主要是多数据源配置以及一些常见问题的解决办法. 前述有些时候一个后端程序中会有配置多个数据源的需求, 由于之前并没有相关的实践, 最近在项目实现的时候遇到了, 在此记录一下. 关于配置多个DataSource的实现参考的是廖雪峰老师的博客文章Spring Boot配置多个DataSource以及CSDN上的一篇文章. 完整的项目完整的项目地址 👉 eduroamControlSystem-Backend 配置步骤与实现此处的两个数据源都是mysql的数据库. 值得一提的是, 下面的primary是项目自己的数据库, 而radius则是外部的数据库, 只是读取数据用来进行分析的. 配置文件项目配置文件application.yml中关于数据源的配置 👇 spring: primary: datasource: url: jdbc:mysql://ip:3306/eduroam_control_system?useSSL=false username: eduroam password: eduroam_control_system driver-class-name: com.mysql.jdbc.Driver test-while-idle: true validation-query: SELECT 1 #配置对eduroam进行AAA的radius服务器数据库,注意数据库名一致 radius: datasource: url: jdbc:mysql://ip:3306/radius?useSSL=false username: eduroam password: eduroam_control_system driver-class-name: com.mysql.jdbc.Driver test-while-idle: true validation-query: SELECT 1 jpa: show-sql: true hibernate: ddl-auto: update naming: physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy 配置数据源配置两个数据源 👇 import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import javax.sql.DataSource; @Configuration public class DataSourceConfig { @Bean(name = &quot;primaryDataSource&quot;) @Primary @ConfigurationProperties(prefix = &quot;spring.primary.datasource&quot;) public DataSource primaryDataSource() { return DataSourceBuilder.create().build(); } @Bean(name = &quot;radiusDataSource&quot;) @ConfigurationProperties(prefix = &quot;spring.radius.datasource&quot;) public DataSource secondDataSource() { return DataSourceBuilder.create().build(); } } 分别配置详细信息primary的配置 👇 import java.util.Map; import javax.persistence.EntityManager; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties; import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import org.springframework.data.jpa.repository.config.EnableJpaRepositories; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement @EnableJpaRepositories( entityManagerFactoryRef = &quot;entityManagerFactoryPrimary&quot;, transactionManagerRef = &quot;transactionManagerPrimary&quot;, basePackages = {&quot;cn.edu.upc.eduroamcontrolsystembackend.dao.primary&quot;}) //设置该数据源的DAO(repo)层所在目录 public class PrimaryDBConfig { @Autowired private JpaProperties jpaProperties; @Autowired @Qualifier(&quot;primaryDataSource&quot;) private DataSource primaryDataSource; @Bean(name = &quot;entityManagerPrimary&quot;) @Primary public EntityManager entityManager(EntityManagerFactoryBuilder builder) { return entityManagerFactoryPrimary(builder).getObject().createEntityManager(); } @Bean(name = &quot;entityManagerFactoryPrimary&quot;) @Primary public LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary(EntityManagerFactoryBuilder builder) { return builder .dataSource(primaryDataSource) .properties(getVendorProperties(primaryDataSource)) .packages(&quot;cn.edu.upc.eduroamcontrolsystembackend.model.primary&quot;) //设置该数据源的实体类所在目录 .persistenceUnit(&quot;primaryPersistenceUnit&quot;) .build(); } private Map&lt;String, String&gt; getVendorProperties(DataSource dataSource) { return jpaProperties.getHibernateProperties(dataSource); } @Bean(name = &quot;transactionManagerPrimary&quot;) @Primary PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) { return new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject()); } } radius的配置👇 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties; import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.jpa.repository.config.EnableJpaRepositories; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; import javax.persistence.EntityManager; import javax.sql.DataSource; import java.util.Map; @Configuration @EnableTransactionManagement @EnableJpaRepositories( entityManagerFactoryRef = &quot;entityManagerFactoryRadius&quot;, transactionManagerRef = &quot;transactionManagerRadius&quot;, basePackages = {&quot;cn.edu.upc.eduroamcontrolsystembackend.dao.radius&quot;}) //设置该数据源的DAO(repo)层所在目录 public class RadiusDBConfig { @Autowired private JpaProperties jpaProperties; @Autowired @Qualifier(&quot;radiusDataSource&quot;) private DataSource radiusDataSource; @Bean(name = &quot;entityManagerRadius&quot;) public EntityManager entityManager(EntityManagerFactoryBuilder builder) { return entityManagerFactoryRadius(builder).getObject().createEntityManager(); } @Bean(name = &quot;entityManagerFactoryRadius&quot;) public LocalContainerEntityManagerFactoryBean entityManagerFactoryRadius(EntityManagerFactoryBuilder builder) { return builder .dataSource(radiusDataSource) .properties(getVendorProperties(radiusDataSource)) .packages(&quot;cn.edu.upc.eduroamcontrolsystembackend.model.radius&quot;) //设置该数据源的实体类所在目录 .persistenceUnit(&quot;radiusPersistenceUnit&quot;) .build(); } private Map&lt;String, ?&gt; getVendorProperties(DataSource dataSource) { return jpaProperties.getHibernateProperties(dataSource); } @Bean(name = &quot;transactionManagerRadius&quot;) PlatformTransactionManager transactionManagerRadius(EntityManagerFactoryBuilder builder) { return new JpaTransactionManager(entityManagerFactoryRadius(builder).getObject()); } } 多个数据源中数据库服务器版本不一致如果出现了配置的多个数据源中使用的同一种数据库服务器, 但是数据库服务器的版本不一致, 比如有5和8两种, 官网对于MySQL Connector/J 8.0给出的说法是MySQL Connector/J 8.0 is compatible with all MySQL versions starting with MySQL 5.5., 即8的驱动可以兼容mysql5.5及以上的版本. 如果有mysql服务器的版本更低的话, 那么在不可升级(升级代价比兼容代价更高)的情况下只能使用5的版本去兼容8的服务器, 我在本项目中的数据库服务器就是这种情况, 一个是学校的生产环境服务器上的5.1.73版本, 一个是分配给我的服务器中跑的8.0的docker容器. 效果并没有那么差. 关于常见的几个因为mysql8使用版本5驱动 的错误, 在之前的备忘录中也有提及, 链接如下 👇 Public Key Retrieval is not allowed Unknown system variable ‘query_cache_size’ Unable to load authentication plugin ‘caching_sha2_password’ 关于mysql自动断开连接mysql默认维持一个连接8小时, 如果一个连接在8小时内没有操作的话, 服务器会主动将连接关闭, 其后果就是你的后端在此之后无法访问数据库. 解决办法有三👇 修改mysql配置其一修改mysql的配置文件, 将该时间延长, windows下为my.ini文件, linux下为my.cnf文件, 增加如下内容(如果是linux下则需要加到[mysqld]该行下)👇 interactive_timeout=n wait_timeout= n 以上n为整数, 单位为秒, 不配置的话则默认为28800, 即八小时但该值无法被设置为无限大, 而且修改配置文件比较繁琐, 所以不建议使用该方法 添加jdbc链接参数设置jdbc链接中的参数autoReconnect值为true, 如下 👇 jdbc:mysql://localhost:3306/test?autoReconnect=true 但是该参数在mysql8的官方文档中并不建议使用, 👉官方文档见此👈, 相关部分摘写如下 👇 autoReconnect Should the driver try to re-establish stale and/or dead connections? If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. The use of this feature is not recommended, because it has side effects related to session state and data consistency when applications don’t handle SQLExceptions properly, and is only designed to be used when you are unable to configure your application to handle SQLExceptions resulting from dead and stale connections properly. Alternatively, as a last option, investigate setting the MySQL server variable “wait_timeout” to a high value, rather than the default of 8 hours. Default: false Since version: 1.1 开发配置文件第三个方法就是让后端主动去维护这个链接, 让它在数据库连接空闲的时候去产生动作进行测试, 以保证连接的有效性 这里以Springboot为例, datasource配置如下 👇 spring: datasource: url: jdbc:mysql://localhost:3306/test?useSSL=false username: *** password: *** driver-class-name: com.mysql.jdbc.Driver test-while-idle: true # 当连接空闲的时候进行测试 validation-query: SELECT 1 # 用来验证连接有效性的sql语句 这样配置数据源就可以保证程序运行过程中数据源连接的有效性了.]]></content>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨域相关知识整理]]></title>
    <url>%2Fpost%2FKnowledgeAboutCORS.html</url>
    <content type="text"><![CDATA[最近在配置Spring Security的时候在跨域的问题上吃了点亏, 遇到了一些问题, 在这里整理一下, 是跨域相关知识的一篇基础文. 什么是跨域跨域, 即”跨域资源共享”(Cross-Origin Resource Sharing, 缩写作CORS).关于CORS, MDN文档中有关CORS的部分给出定义 👇 当一个资源从与该资源本身所在的服务器不同的域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。比如，站点http://domain-a.com的某HTML页面通过 &lt;img&gt; 的src请求 http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非使用CORS头文件。 为什么PostMan模拟的请求不会涉及跨域有的时候你会发现, 有些请求你写在前端, 在访问进行请求的时候, 会报跨域的错, 而PostMan模拟同样的请求却不会报错, 能够成功拿到数据, 这又是为什么? 跨域的定义是当一个资源从与该资源本身所在的服务器不同的域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求, 所以你知道了, PostMan之所以不会有跨域的问题是因为它的每一个请求都是单一的, 都是本地直接向后端服务器发出的一个请求, 但是如果你写在前端里, 再到浏览器中去请求, 那么浏览器就会认为你现在是在一个网站向后端服务器(后端的域肯定不会与当前端的域相同吧, 因为就算ip地址一样, 端口也肯定不一样,当然了, 现在说的是前后端分离的情况)请求, 所以这就是跨域. HTTP的OPTIONS方法 👉 MDN文档关于OPTIONS方法的介绍 MDN文档中有关CORS的部分提及OPTIONS方法, 如是说 👇 跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。 因此你如果想要在进行相关操作的话, 必须要将OPTIONS请求方法放开, 否则无法进行操作. 如在SpringBoot中使用Security的话, 可以在Security的配置(例如在初试Spring Security一文中的SecurityConfig类的configure方法)中添加放开规则 👇 .antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;).permitAll() SpringBoot项目配置CORS这里还是以初试Spring Security一文中的项目为例. 我们要实现javax.servlet.Filter接口的CORS过滤器是用来设置跨域相关配置的, 代码类似如下, 这里我叫他CORSFilter: package cn.edu.upc.eduroamcontrolsystembackend.config; import org.springframework.stereotype.Component; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import javax.servlet.*; @Component public class CORSFilter implements javax.servlet.Filter { @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) servletResponse; response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE&quot;); response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;); response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With, Authorization&quot;); response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;); filterChain.doFilter(servletRequest, servletResponse); } @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void destroy() { } } 请注意response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With, Authorization&quot;);代码中的Authorization, 该header字段为项目中设置的token的字段, 例如刷新token, 则是将token放入header的Authorization字段中提交给后端, 如果不添加该字段的话, 后端会直接将请求过滤掉, 因为前端提交的请求中包含了后端所没有允许的header, 导致前端会报Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.的错误.]]></content>
      <tags>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初试Spring Security]]></title>
    <url>%2Fpost%2FIntroduction2SpringSecurity.html</url>
    <content type="text"><![CDATA[最近在写的一个项目要使用到对于用户身份的认证以及授权(这应该都很常见吧), 所以在此使用了Spring Security, 由于之前自己并没有动手配置过, 在此记录一下. 前述首先, 当前的这个项目需要一个典型的认证和授权的机制, 这里使用security与jwt来实现的话过程大致如下, 即, 用户输入用户名密码进行登录, 后端接收到后验证用户是否存在, 如果用户存在则我们验证其密码是否正确, 如果错误则拒绝登录; 如果正确, 我们生成一个token, 将用户的信息和token放在一起返回给前端. 后面用户在操作的时候如果与后端进行交互, 则前端需要携带该token进行请求, 后端接收到请求后首先检测token的有效性(即验证该token仍在有效期内且在该token生成后, 密码并未修改过), 有效则允许操作进一步进行, 无效则返回401权限错误. token可以限定有效时长, 如果在这个有效时长内该token一直未刷新, 则token失效, 无法再作为身份认证的凭据, 需要重新登录以获取新的token; 在token有效期间可以调用相应的接口对token的有效时长进行刷新, 以延长token的有效时长. 本项目参考GitHub上的该repo 👉 jwt-spring-security-demo 本项目的GitHub地址 👉 eduroamControlSystem-Backend 环境这里使用的是spring boot版本是1.5.4, 项目依赖如下是项目所有maven依赖 👇 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--swagger 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 配置项目配置文件(这里是yml格式)中添加如下内容, jwt: header: Authorization secret: adAhDsfHasDpvo expiration: 604800 这是定义token的一些配置(header是请求头中token字段的名称, secret是加密用的密钥, expiration定义token的有效时长), 本应该在用到的时候再添加, 但怕后面添加会乱, 所以提前声明一下. 代码实现定义用户与权限首先我们要定义用户与权限这些基本表. 用户表 👇 package cn.edu.upc.eduroamcontrolsystembackend.model; import com.fasterxml.jackson.annotation.JsonIgnore; import javax.persistence.*; import java.util.ArrayList; import java.util.Date; import java.util.List; @Entity @Table(name = &quot;user&quot;) public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; private String userId; @JsonIgnore private String password; private Date LastPasswordResetDate; @JsonIgnore @ManyToMany(fetch = FetchType.EAGER) @JoinTable( name = &quot;user_authority&quot;, joinColumns = @JoinColumn(name = &quot;user_id&quot;), inverseJoinColumns = @JoinColumn(name = &quot;authority_id&quot;)) private List&lt;Authority&gt; authorities = new ArrayList&lt;&gt;(); //构造方法与get/set方法这里因篇幅限制省略 } 添加一个枚举权限类型的类👇 public enum AuthorityType { //本项目中仅有学生用户与管理员两种用户类型 ROLE_USER, ROLE_ADMIN } 权限表 👇 package cn.edu.upc.eduroamcontrolsystembackend.model; import javax.persistence.*; import java.util.List; @Entity @Table(name = &quot;authority&quot;) public class Authority { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; private AuthorityType authorityType; @ManyToMany(mappedBy = &quot;authorities&quot;, fetch = FetchType.LAZY) private List&lt;User&gt; users; //构造方法与get/set方法这里因篇幅限制省略 } DAO与Service这些就不贴代码了, 都是基于基本表的基本操作. 配置Security配置Security的话, 我们首先需要继承WebSecurityConfigurerAdapter类来实现我们自己的security配置类, 这里我把它叫做SecurityConfig, 但是在写SecurityConfig之前, 我们要先完成它所依赖的一些类. JwtUser类 首先是实现UserDetails接口, 实现后的类是服务于Security的, 里面存放基本表User中的用户信息, 以及重写原接口的一些方法, 它用于token的生成之类, 所以这里叫它JwtUser 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import java.util.Date; import java.util.Collection; import java.util.List; public class JwtUser implements UserDetails { private int id; private String userId; private String password; private final Date LastPasswordResetDate; private final Collection&lt;? extends GrantedAuthority&gt; authorities; public JwtUser(int id, String userId, String password, Date LastPasswordResetDate, List&lt;GrantedAuthority&gt; authorities) { this.id = id; this.userId = userId; this.password = password; this.LastPasswordResetDate = LastPasswordResetDate; this.authorities = authorities; } public int getId() { return id; } public void setId(int id) { this.id = id; } public void setUserId(String userId) { this.userId = userId; } public void setPassword(String password) { this.password = password; } public Date getLastPasswordResetDate() { return LastPasswordResetDate; } @Override public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() { return authorities; } @Override public String getPassword() { return password; } @Override public String getUsername() { return userId; } @Override public boolean isAccountNonExpired() { return true; } @Override public boolean isAccountNonLocked() { return true; } @Override public boolean isCredentialsNonExpired() { return true; } @Override public boolean isEnabled() { return true; } } JwtUserFactory类 这里再为JwtUser新建一个工厂方法, 方便在后面快速生成JwtUser, 这里叫它JwtUserFactory 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import cn.edu.upc.eduroamcontrolsystembackend.model.Authority; import cn.edu.upc.eduroamcontrolsystembackend.model.User; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import java.util.List; import java.util.stream.Collectors; public class JwtUserFactory { public static JwtUser createJwtUser(User user) { return new JwtUser( user.getId(), user.getUserId(), user.getPassword(), user.getLastPasswordResetDate(), mapToGrantedAuthorities(user.getAuthorities()) ); } private static List&lt;GrantedAuthority&gt; mapToGrantedAuthorities(List&lt;Authority&gt; authorities) { return authorities.stream() .map(authority -&gt; new SimpleGrantedAuthority(authority.getAuthorityType().name())) .collect(Collectors.toList()); } } JwtUserDetailsService类 然后我们再需要实现UserDetailsService接口, 这个接口仅有一个方法loadUserByUsername, 就是根据用户名(也不一定得是用户名, 这里的意思就是用户表中可以唯一识别用户的字段罢了)去查找用户, 虽然功能上与基本表User的service类似, 但它是服务于Security的(你要鉴权什么的, 首先得确定用户存在吧), 且依赖于基本表User的service进行用户查找, 这里叫它JwtUserDetailsService👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import cn.edu.upc.eduroamcontrolsystembackend.dao.UserDAO; import cn.edu.upc.eduroamcontrolsystembackend.model.User; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; @Service public class JwtUserDetailsService implements UserDetailsService { private final Log logger = LogFactory.getLog(this.getClass()); @Autowired private UserDAO userDAO; @Override public UserDetails loadUserByUsername(String userId) throws UsernameNotFoundException { // 从数据库里的用户表里查找用户, 用于生成JwtUser User user = userDAO.findFirstByUserId(userId); if (user == null) { logger.warn(&quot;用户 \&quot;&quot; + userId + &quot;\&quot; 不存在&quot;); throw new UsernameNotFoundException(String.format(&quot;没有该用户 &#39;%s&#39;.&quot;, userId)); } else { //这里返回上面继承了UserDetails接口的用户类, return JwtUserFactory.createJwtUser(user); } } } JwtTokenUtil类 然后我们定义token相关操作(生成/刷新等)的类, 这里叫它JwtTokenUtil 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import java.io.Serializable; import java.util.Date; import java.util.HashMap; import java.util.Map; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.Claims; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenUtil implements Serializable { static final String CLAIM_KEY_USERID = &quot;123&quot;; static final String CLAIM_KEY_CREATED = &quot;created&quot;; @Value(&quot;${jwt.secret}&quot;) private String secret; @Value(&quot;${jwt.expiration}&quot;) private Long expiration; public String getUserIdFromToken(String token) { String userId; try { final Claims claims = getClaimsFromToken(token); userId = claims.get(CLAIM_KEY_USERID).toString(); } catch (Exception e) { userId = null; } return userId; } public Date getCreatedDateFromToken(String token) { Date created; try { final Claims claims = getClaimsFromToken(token); created = new Date((Long) claims.get(CLAIM_KEY_CREATED)); } catch (Exception e) { created = null; } return created; } public Date getExpirationDateFromToken(String token) { Date expiration; try { final Claims claims = getClaimsFromToken(token); expiration = claims.getExpiration(); } catch (Exception e) { expiration = null; } return expiration; } private Claims getClaimsFromToken(String token) { Claims claims; try { claims = Jwts.parser() .setSigningKey(secret) .parseClaimsJws(token) .getBody(); } catch (Exception e) { claims = null; } return claims; } private Boolean isTokenExpired(String token) { final Date expiration = getExpirationDateFromToken(token); return expiration.before(new Date()); } private Boolean isCreatedBeforeLastPasswordReset(Date created, Date lastPasswordReset) { return (lastPasswordReset != null &amp;&amp; created.before(lastPasswordReset)); } public String generateToken(JwtUser userDetails) { Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;(); claims.put(CLAIM_KEY_CREATED, new Date()); claims.put(CLAIM_KEY_USERID, userDetails.getUsername()); return doGenerateToken(claims); } private String doGenerateToken(Map&lt;String, Object&gt; claims) { final Date createdDate = (Date) claims.get(CLAIM_KEY_CREATED); final Date expirationDate = new Date(createdDate.getTime() + expiration * 1000); System.out.println(&quot;doGenerateToken &quot; + createdDate); return Jwts.builder() .setClaims(claims) .setExpiration(expirationDate) .signWith(SignatureAlgorithm.HS512, secret) .compact(); } public Boolean canTokenBeRefreshed(String token, Date lastPasswordResetDate) { final Date created = getCreatedDateFromToken(token); return !isCreatedBeforeLastPasswordReset(created, lastPasswordResetDate) &amp;&amp; !isTokenExpired(token); } public String refreshToken(String token) { String refreshedToken; try { final Claims claims = getClaimsFromToken(token); claims.put(CLAIM_KEY_CREATED, new Date()); refreshedToken = doGenerateToken(claims); } catch (Exception e) { refreshedToken = null; } return refreshedToken; } public Boolean validateToken(String token, UserDetails userDetails) { JwtUser user = (JwtUser) userDetails; final String username = getUserIdFromToken(token); final Date created = getCreatedDateFromToken(token); return ( username.equals(user.getUsername()) &amp;&amp; !isTokenExpired(token) &amp;&amp; !isCreatedBeforeLastPasswordReset(created, user.getLastPasswordResetDate())); } } JwtAuthenticationTokenFilter类 然后定义对于请求进行token过滤的类, 这里叫做JwtAuthenticationTokenFilter 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.web.authentication.WebAuthenticationDetailsSource; import org.springframework.web.filter.OncePerRequestFilter; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; public class JwtAuthenticationTokenFilter extends OncePerRequestFilter { private final Log logger = LogFactory.getLog(this.getClass()); @Autowired private UserDetailsService userDetailsService; @Autowired private JwtTokenUtil jwtTokenUtil; @Value(&quot;${jwt.header}&quot;) private String tokenHeader; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException { String authToken = request.getHeader(this.tokenHeader); String userId = jwtTokenUtil.getUserIdFromToken(authToken); if (userId != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == null) { logger.info(&quot;checking authentication for user &quot; + userId); UserDetails userDetails = this.userDetailsService.loadUserByUsername(userId); if (jwtTokenUtil.validateToken(authToken, userDetails)) { UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()); authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); logger.info(&quot;authenticated user &quot; + userId + &quot;, setting security context&quot;); SecurityContextHolder.getContext().setAuthentication(authentication); } } chain.doFilter(request, response); } } JwtAuthenticationEntryPoint类 再实现AuthenticationEntryPoint接口, 用于对鉴权的时候出现的权限问题进行处理, 这里叫它JwtAuthenticationEntryPoint 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.service; import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.AuthenticationEntryPoint; import org.springframework.stereotype.Component; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.Serializable; @Component public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint, Serializable { private static final long serialVersionUID = -8970718410437077606L; @Override public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException { // 如果用户无凭证访问被security保护的资源, 则返回401 &quot;Unauthorized&quot; 错误 response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;Unauthorized&quot;); } } AuthenticationController类 现在我们可以来定义权限操作相关的API(登录与刷新token)了, 这里就直接叫它AuthenticationController 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.controller; import cn.edu.upc.eduroamcontrolsystembackend.dao.UserDAO; import cn.edu.upc.eduroamcontrolsystembackend.dto.ResponseMessage; import cn.edu.upc.eduroamcontrolsystembackend.model.User; import cn.edu.upc.eduroamcontrolsystembackend.security.service.JwtTokenUtil; import cn.edu.upc.eduroamcontrolsystembackend.security.service.JwtUser; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.ResponseEntity; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import javax.servlet.http.HttpServletRequest; import java.util.HashMap; import java.util.Map; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; @RestController public class AuthenticationController { private final Log logger = LogFactory.getLog(this.getClass()); @Value(&quot;${jwt.header}&quot;) private String tokenHeader; @Autowired private JwtTokenUtil jwtTokenUtil; @Autowired private UserDetailsService userDetailsService; @Autowired private UserDAO userDAO; //登录接口, 生成token @RequestMapping(value = &quot;/user/login&quot;, method = RequestMethod.POST) public Object createAuthenticationToken(String username, String password) throws AuthenticationException { final UserDetails userDetails = userDetailsService.loadUserByUsername(username); BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(); if (!bCryptPasswordEncoder.matches(password, userDetails.getPassword())) { return new ResponseMessage(-1, &quot;登录失败, 用户名或密码错误&quot;); } // 生成token final String token = jwtTokenUtil.generateToken((JwtUser) userDetails); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); User user = userDAO.findFirstByUserId(userDetails.getUsername()); map.put(&quot;user&quot;, user); map.put(&quot;token&quot;, token); return map; } //刷新token接口 @RequestMapping(value = &quot;/token/refresh&quot;, method = RequestMethod.GET) public ResponseEntity&lt;?&gt; refreshAndGetAuthenticationToken(HttpServletRequest request) { String token = request.getHeader(tokenHeader); String username = jwtTokenUtil.getUserIdFromToken(token); JwtUser user = (JwtUser) userDetailsService.loadUserByUsername(username); if (jwtTokenUtil.canTokenBeRefreshed(token, user.getLastPasswordResetDate())) { logger.info(&quot;已为用户 &quot; + username + &quot; 刷新token&quot;); String refreshedToken = jwtTokenUtil.refreshToken(token); return ResponseEntity.ok(refreshedToken); } else { return ResponseEntity.badRequest().body(null); } } } SecurityConfig类 好啦, 最后我们来完成对于security的配置类SecurityConfig 👇 package cn.edu.upc.eduroamcontrolsystembackend.security.config; import cn.edu.upc.eduroamcontrolsystembackend.security.service.JwtAuthenticationEntryPoint; import cn.edu.upc.eduroamcontrolsystembackend.security.service.JwtAuthenticationTokenFilter; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.http.HttpMethod; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; @SuppressWarnings(&quot;SpringJavaAutowiringInspection&quot;) @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { //无需权限即可访问的白名单 private static final String[] AUTH_WHITELIST = { &quot;/&quot;, &quot;/*.html&quot;, &quot;/favicon.ico&quot;, &quot;/**/*.html&quot;, &quot;/**/*.css&quot;, &quot;/**/*.js&quot;, // -- swagger ui &quot;/swagger-resources/**&quot;, &quot;/swagger-ui.html&quot;, &quot;/v2/api-docs&quot;, &quot;/webjars/**&quot; }; @Autowired private JwtAuthenticationEntryPoint unauthorizedHandler; // Spring会自动寻找实现接口的类注入,会找到我们自己实现的UserDetailsService类 @Autowired private JwtUserDetailsService jwtUserDetailsService; @Autowired public void configureAuthentication(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception { authenticationManagerBuilder // 设置UserDetailsService .userDetailsService(this.jwtUserDetailsService) // 使用BCrypt对密码进行加密 .passwordEncoder(passwordEncoder()); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public JwtAuthenticationTokenFilter authenticationTokenFilterBean() throws Exception { return new JwtAuthenticationTokenFilter(); } @Override protected void configure(HttpSecurity httpSecurity) throws Exception { httpSecurity //禁用csrf防护功能,因为使用token进行身份验证,所以较为安全,而且禁用后也方便开发 .csrf().disable() //添加对于出现权限问题的异常处理 .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and() //禁用session,因为使用token,所以不需要session .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and() .authorizeRequests() //放开options请求 .antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;).permitAll() //放开白名单 .antMatchers(HttpMethod.GET, AUTH_WHITELIST).permitAll() //允许匿名访问获取token的api .antMatchers(&quot;/user/login&quot;).permitAll() //除上面允许匿名的api外,其他的全部需要身份认证 .anyRequest().authenticated(); //根据token进行身份过滤 httpSecurity .addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class); // 禁用缓存 httpSecurity .headers() .frameOptions().sameOrigin() .cacheControl(); } } 到这里Spring Security+JWT的基本配置就算完成了. 最后登录效果启动项目, postman使用post方法提交用户名与密码到后端的/user/login接口, 可以看到类似如下的效果: { &quot;user&quot;: { &quot;id&quot;: 2, &quot;userId&quot;: &quot;devUser&quot;, &quot;password&quot;: &quot;$2a$10$LBOqtklE0chvs8jiV6XS/O4eVt.7H3jhvbQTq6AEzgIelE/afYzbi&quot;, &quot;lastPasswordResetDate&quot;: null }, &quot;token&quot;: &quot;eyJhbGciOiJIUzUxMiJ9.eyIxMjMiOjIsImNyZWF0ZWQiOjE1MzI0MDkyMjAzMTUsImV4cCI6MTUzMzAxNDAyMH0.0CQYfpG9X4PeVX23DoFVjR3iHNe_DswI85ejaoWYqSgHgGf6tIfcBU11ChkSwpMXRQRjjuZzSRMLXxtxq-4m0w&quot; } 对于暴露的API进行权限控制比如有个可以将普通用户添加到黑名单的API, 那么我只能让管理员来调用这个接口, 那么要怎么实现?这里有了Security, 我们可以很容易的实现全局方法的安全认证. 在SecurityConfig配置类(本项目中是SecurityConfig)中添加@EnableGlobalMethodSecurity注解, 将prePostEnabled设为true, 如下 @SuppressWarnings(&quot;SpringJavaAutowiringInspection&quot;) @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class SecurityConfig extends WebSecurityConfigurerAdapter { ...... } 然后我们可以在暴露的API方法上设置注解@PreAuthorize(也可以直接设在类上, 比如一个controller中的接口全都需要控制访问, 则直接加到该controller类上即可), 例如我有个方法叫addUserToBlacklist, 它将指定的用户添加进系统黑名单, 那么我在方法前使用该注解进行配置即可只允许管理员调用该方法, 如👇 @PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;) public Object addUserToBlacklist(String userId, String objectId){ ...... } 这样就可以了, 当用户调用该接口时, 后端会根据用户的token进行鉴权, 如果是ADMIN的身份则允许调用, 否则返回403的权限错误. 赘述有代码上的问题可以访问本项目的GitHub仓库 👉 eduroamControlSystem-Backend进行查看. 关于token的使用, 跨域的问题要提一下, 虽然是基本操作, 但是如果不是很清楚的初学者(比如我🙈)就会不懂其中的套路. SpringBoot项目跨域的配置与跨域的相关知识请见我的另一篇文章 👉 跨域相关知识整理]]></content>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python打包与发布]]></title>
    <url>%2Fpost%2FPackagePythonProjects%26Release.html</url>
    <content type="text"><![CDATA[本文记录关于python打包并发布到PyPI上的步骤与过程中的注意点. 创建包创建项目文件夹新建一个文件夹, 如pypi-release, 这是项目文件夹, 只起到一个收纳的作用, 所有与包相关的内容我们接下来都会放到该文件夹下. 包相关内容在项目文件夹中, 我们新建一个文件夹, 如test_release, 这是包文件夹, 文件夹名就是你要用的包名了. 然后在包文件夹下新建一个__init__.py文件, 它的作用是让这个文件夹变为一个python模块, 接下来, 我们的逻辑代码就可以直接写在里面了, 如果你的代码逻辑比较复杂, 你也可以新建其他的py文件(如functions.py), 将代码归纳, 再到__init__.py文件中引入、整理. 如我在functions.py文件中写入如下内容 def print_function(): print(&quot;this is functions.py&quot;) 在__init__.py文件中写入如下内容 from .functions import * def use_functions(): print_function() 然后我们在项目文件夹下新建一个setup.py文件, 这是项目配置文件, 可以参考如下内容 from setuptools import setup, find_packages NAME = &quot;项目名&quot; VERSION = &quot;版本号&quot; DESCRIPTION = &quot;项目描述&quot; LONG_DESCRIPTION=&quot;项目长描述&quot; KEYWORDS=(&quot;关键词&quot;) LICENSE=&quot;许可证&quot; AUTHOR = &quot;作者&quot; AUTHOR_EMAIL = &quot;作者邮箱&quot; URL = &quot;项目地址&quot; PLATFORMS=[&quot;使用平台&quot;] INSTALL_REQUIRES=[&quot;项目依赖&quot;] setup( name=NAME, version=VERSION, keywords=KEYWORDS, description=DESCRIPTION, long_description=&quot;LONG_DESCRIPTION, license=LICENSE, url=URL, author=AUTHOR, author_email=AUTHOR_EMAIL, packages=find_packages(), include_package_data=True, platforms=PLATFORMS, install_requires=INSTALL_REQUIRES ) 现在整个项目的文件目录索引如下 👇 pypi/ ├── test_release │ ├── functions.py │ └── __init__.py └── setup.py 我们现在可以使用命令python setup.py install即可将该项目作为一个包安装, 安装结束后我们进入python的REPL环境, 进行如下操作 &gt;&gt;&gt; import test_release &gt;&gt;&gt; test_release.use_functions() this is functions.py &gt;&gt;&gt; functions() Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; NameError: name &#39;functions&#39; is not defined &gt;&gt;&gt; from test_release import functions &gt;&gt;&gt; print_function() this is functions.py &gt;&gt;&gt; 相信到这你对整个包的结构以及其在python中作为模块时是怎样起作用的应该有所了解了. 打包与发布创建账号到PyPI官网上创建一个账号. 账户信息配置文件我们在自己的用户家目录下创建文件.pypirc, 写入如下内容 👇 [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username = 你的用户名 password = 你的密码 打包这时我们在项目目录下使用命令python setup.py bdist_wheel打包, 运行结束后, 即可进行下一步, 发布到pypi上. 至于命令python setup.py bdist_wheel中的bdist_wheel只是一种打包方式, 还有其他的很多方式, 如sdist, bdist, bdist_rpm等, 以及setuptools的很多高级使用方法, 读者可以自己去查文档等, 在此不多加赘述. 发布这里使用twine帮助我们进行发布: 先使用pip install twine命令安装twine, 然后在已经打包过的项目文件夹下使用命令twine upload dist/*将包发布到PyPI, 完成后到自己的账户下即可查看到刚刚上传的项目. 赘述注: 如果发布包的时候遇到HTTPError: 400 Client Error: This filename has previously been used, you should use a different version.类似的错误描述, 这是因为PyPI自身的机制, 文件名不可重用, 可以参见官方文档file-name-reuse, 其实可以使用一些方法绕过, 如在打包命令后加上--format=zip, gztar等来指定打包后的文件格式, 这样文件名(后缀)就变了, 即可上传, 其他方法请自行查阅.]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Mysql2Redis自动更新数据到Redis]]></title>
    <url>%2Fpost%2FPushData2RedisWithMysql2Redis.html</url>
    <content type="text"><![CDATA[最近在写的项目想用上Redis作为缓存层, 但是对于后端的mysql数据在数据写入后如何更新到缓存却感到很棘手, 后了解到mysql的udf+trigger可以实现, GitHub开源项目mysql2redis刚好解决了更新数据所需的udf的问题. 在使用过程中踩了一些坑, 在此总结一下. 前述首先需要说明的是, 对于mysql2redis作者在项目readme中提及的项目依赖, 其中的lib_mysqludf_json库主要是添加的mysql对于json数据的支持, 但需要说明的是自mysql5.7.8, mysql已经支持原生json数据类型, 而mysql 中也有了原生的json_array和json_object函数, 故lib_mysqludf_json库在mysql5.7.8版本以后是不需要的. 如果你想要使用lib_mysqludf_json, 那么你需要注意: lib_mysqludf_json项目中编译好的lib_mysqludf_json.so文件是32位的, 如果你的mysql是64位的, 那么你需要自己编译该文件; 由于mysql5.7.8及以后的版本中有了原生的json_array和json_object函数, 所以, lib_mysqludf_json库中的json_array和json_object函数是不能直接注册到mysql中的, 因为不能有重名函数, 所以你需要在lib_mysqludf_json.c文件中将json_array和json_object函数重命名;这里有我将整个项目中的函数名修改好了的库 👉 WenjayDu/lib_mysqludf_json Docker由于类似的应用场景也不少, 所以我构建了一个包含mysql2redis库中所有udf的mysql镜像 👇 可以直接使用 DockerfileMysql2Redis Dockerfile DockerImageDockerHub 👉 vanjaydo/mysql2redis 使用命令docker run -d --name mysql2redis --env MYSQL_ROOT_PASSWORD=123456 WenjayDu/mysql2redis --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci即可启动使用 使用教程进入mysql后, 使用use mysql;命令切到mysql库, 然后使用select * from func;即可查看到之前设置的mysql2redis相关的udf, 如下👇 mysql&gt; select * from func; +----------------------+-----+--------------------------+----------+ | name | ret | dl | type | +----------------------+-----+--------------------------+----------+ | redis_servers_set_v2 | 2 | lib_mysqludf_redis_v2.so | function | | redis_command_v2 | 2 | lib_mysqludf_redis_v2.so | function | | free_resources | 2 | lib_mysqludf_redis_v2.so | function | +----------------------+-----+--------------------------+----------+ 3 rows in set (0.00 sec) 设置Trigger推数据到redis的功能已经在mysql2redis库的函数中实现了, 现在的关键是什么时候推, 总不能每次都手动调用函数. 这里我们可以在相关的数据库中设置触发器, 根据一定的条件自动调用执行函数推送数据到redis 切到你要使用的数据库后, 设置能实现你想要效果的触发器, 例如👇 DELIMITER $$ CREATE TRIGGER Your_Trigger_Name AFTER INSERT ON Your_Table FOR EACH ROW BEGIN SET @ret1=redis_servers_set_v2(&quot;redis_server_ip&quot;, 6379); SET @ret2=redis_command_v2(&quot;set&quot;, concat(&quot;id:&quot;, NEW.id), NEW.value); SET @ret3=free_resources() END$$ DELIMITER ; 注:mysql的trigger中不能用select直接返回函数结果, 如下👇 DELIMITER $$ CREATE TRIGGER Your_Trigger_Name AFTER INSERT ON Your_Table FOR EACH ROW BEGIN select redis_servers_set_v2(&quot;redis_server_ip&quot;, 6379); select redis_command_v2(&quot;set&quot;, concat(&quot;id:&quot;, NEW.id), NEW.value); END$$ DELIMITER ; 否则会报错 👉 ERROR 1415 (0A000): Not allowed to return a result set from a trigger. 这是因为mysql限制触发器不允许返回数据集，所以触发器所调用的函数或存储过程也不可以返回数据集 以上的例子使用的是redis中的set命令, 简单的设置一个键值对, 如果你想要缓存到redis的字段很多, 可以使用hmset命令进行设置.]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再试Django-进阶]]></title>
    <url>%2Fpost%2FIntroduction2Django-Advanced.html</url>
    <content type="text"><![CDATA[之前接触了一次Django 👉 初识Django，这里我会再次使用Django编写一个功能更加完善的后台。 前言之前使用Django编写了一个脸部识别的后端Demo, 现在要完善这个Demo, 让它变得更加的健全和多功能, 上篇文章讲过的部分在此不再赘述. 远程开发进阶‘初识Django’文中我们使用了PyCharm进行了远程开发, 具体配置操作请见使用Jetbrains系列IDE进行远程开发一文. 其实, 我们也可以在远程开发的时候使用远程的python虚拟环境, 还是基于virtualenv, 我们只要在配置remote interpreter的时候选择venv/bin/python*作为翻译器就可以了. 使用virtualenv生成虚拟环境的时候需要注意是要python2还是3的环境, 需要使用-p参数明确指出相应版本python可执行文件的绝对路径, 也可以使用--no-site-packages参数来使虚拟环境不能访问之前系统中全局安装的库, 或是使用--system-site-packages参数来允许虚拟环境可以访问之前系统中全局安装的库.注: 全局安装的库无法在虚拟环境中进行删除 序列化与反序列化策略读: 读redis, 有数据直接返回, 没有数据则读mysql, 有数据则返回数据并把数据写到redis. 写: 直接写mysql, 写入成功再写redis。 MySQLmysql数据库的使用首先我们要安装django需要的mysql相关的库, pip3 install pymysql 接着我们在项目配置文件__init__.py中加上配置代码 👇 import pymysql pymysql.install_as_MySQLdb() 我们需要在使用的数据库服务器端创建一个本项目专用的库, 这里我就直接以项目名作为数据库名了, 以及项目数据库用户, 建议是创建一个专门的用户, 然后仅将项目的库全部授权给他. 然后我们配置连接数据库时候使用的库, 用户名和密码, 项目配置文件settings.py中的 # Database # https://docs.djangoproject.com/en/2.0/ref/settings/#databases DATABASES = { &#39;default&#39;: { &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;, # 注: Django默认使用的是自身集成的sqlite数据库 &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;), } } 修改为 👇 DATABASES = { &#39;default&#39;: { &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, &#39;NAME&#39;: &#39;数据库名&#39;, &#39;USER&#39;: &#39;mysql用户名&#39;, &#39;PASSWORD&#39;: &#39;用户名密码&#39;, &#39;HOST&#39;: &#39;数据库服务器IP地址&#39;, &#39;PORT&#39;: &#39;3306&#39;, }, } 这都是一般开发的套路了, 不再多说什么. 最后运行python manage.py makemigrations和python manage.py migrate命令创建表. 这里需要注意的是, 在构造表时如果你有类似CharField这种字段, 那么要给它设置一个默认的值(如unique_id = models.CharField(max_length=100, default=&#39;UNIQUE_ID&#39;)), 否则在运行python manage.py makemigrations时会遇到报错You are trying to add a non-nullable field &#39;***&#39; to facecharacteristic without a default; we can&#39;t do that (the database needs something to populate existing rows). RedisRedis作为缓存安装django-redis 👉 pip3 install django-redis 配置文件中写入使用缓存 👇 CACHES = { &#39;default&#39;: { &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;, &#39;LOCATION&#39;: &#39;redis://redis服务器IP地址:6379&#39;, &quot;OPTIONS&quot;: { &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;, # &quot;PASSWORD&quot;: &quot;123456&quot;, # 配置密码, 没有的话不必写 }, # &quot;KEY_PREFIX&quot;: &quot;face&quot;, # 键名的前缀, 没必要的话可以不设置 }, } Redis基础操作键名设计, 推荐业务名:对象名:id:[属性], 分别对应数据库的库名:表名:id:属性, 如果redis只被一个业务使用, 则可以省略业务名, 如果键名较长, 可以适当缩略从而减少内存浪费 设置键值对 set key value [ex seconds] [px milliseconds] [nx|xx] ex: 设置秒级过期时间, px: 设置毫秒级过期时间, nx: 键必须不存在才能设置成功,用于添加, xx: 键必须存在才能设置成功,用于更新; redis 还提供setex和setnx两个命令, 作用同ex 和xx, setex key seconds value, setnx key value 获取值, get key, 键不存在返回nil 批量设置键值, mset key value [key value ...] 批量获取键值, mget key [key ...] 查看所有键 keys * 检查键是否存在 exists key, 存在则返回1, 否则返回0 键总数 dbsize, 返回当前数据库中键的总数 删除键 del key [key...] 通用命令, 无论什么数据结构类型, 都能删除, 返回结果为成功删除的键的总数 键过期 expire key seconds 添加键的过期时间, 过期后自动删除,ttl key命令查看键的剩余时间, 返回-1则键未设置过期时间, -2则键不存在 键的数据类型 type key, 键不存在返回none 查询键的数据结构的内部编码object encoding key flushall清空所有缓存 incr key 自增操作, 值非整数则返回错误, 值是整数则返回自增后的值, 键不存在则按值为0自增, 返回结果为1类似的decr key自减操作, incrby key increment自增指定数字, decrby key decrement自减指定数字, incrbyfloat key increment自增浮点数 append key value向字符串键尾部追加值 strlen key 字符串长度 等等… 以后会专门写一篇关于reids的入门文章, 自己关于这方面的知识还有待补充, 先立一个flag. 关于键的前缀在Django中你使用cache.set(key, value)函数将键-值保存到redis缓存中的时候, django内部还会对键的名称进行一系列的转化, 默认的就是KEY_PREFIX为空, 然后在键名前面加上:1:, 所以如果你用cache.set(&quot;my_key&quot;, &quot;1&quot;)将键值保存到redis后, 再使用redis-cli到redis中使用keys *去查询的话, 你会发现多了个名为:1:my_key的键, 其值为1 说这点的原因是, 你使用cache.get(key)去查询的时候是不用加上:1:的, django会自动帮你转换, 所以你知道了, django只能查询到redis缓存中键名符合它规则的键值, 默认也就是以:1:开头的键, 所以如果你直接在redis中添加数据的话, 不要忘了要符合这个规则, 否则使用django.core.cache模块是无法查询到的(当然了, 直接使用redis模块肯定是可以的, 因为它跟django没关系嘛) 但是以上只限于键的值为int类型, 如果你直接在redis中添加的键的值是string类型的话, 你在django使用cache.get()的时候会得到_pickle.UnpicklingError: could not find MARK的错误, 而你如果用cache.set()保存string值, 再reids-cli中查询该键的值, 会发现它除了你设定的值之外还有一串的编码, 如我用cache.set(&quot;jay&#39;s_key&quot;, &quot;jay&quot;)设定后再使用redis-cli查询该键会得到&quot;\x80\x04\x95\a\x00\x00\x00\x00\x00\x00\x00\x8c\x03jay\x94.&quot;, 这是因为django在序列化的时候使用了Pickler库, 这里我们可以选择使用其他的序列化器来将数据进行持久化而避免多余的mark编码的出现, JSONSerializer就是一个很好的选择, 因为现在json的数据结构用的越来越多, 本项目中的数据存储也使用的是json. 我们对settings.py配置文件中的CACHES选项修改成如下 CACHES = { &#39;default&#39;: { &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;, &#39;LOCATION&#39;: &#39;redis://172.17.0.3:6379&#39;, &quot;OPTIONS&quot;: { &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;, &quot;SERIALIZER&quot;: &quot;django_redis.serializers.json.JSONSerializer&quot;, # 修改序列化器为json serializer, 弃用默认的pickle }, }, } mysql更新数据到redis这里我使用mysql2redis实现mysql数据库自动更新数据到redis缓存 详情请见另一篇我的博文使用Mysql2Redis自动更新数据到Redis 设置mysql触发器查看已有的触发器选中使用数据库后使用命令SHOW TRIGGERS;, 或者直接使用命令SHOW TRIGGERS FROM database_name; 删除触发器DROP TRIGGER [IF EXISTS] [database_name.]trigger_name, 最好加上if exists, 否则如果触发器不存在的话会报错. JWTjwt的配置使用直接参考 👉 简书该文 关于JWT的有效期, 默认设置(无需配置)是 &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(seconds=300), &#39;JWT_REFRESH_EXPIRATION_DELTA&#39;: datetime.timedelta(days=7), JWT_EXPIRATION_DELTA是指发出的token的有效期为5分钟(300秒), 而JWT_REFRESH_EXPIRATION_DELTA是获得token后在7天内可以通过刷新token以延长它的有效期, 简单来说就是, 在获得一个token后, 如果不刷新它, 它的有效期是5分钟, 如果在5分钟内刷新它, 那么它的有效期将从刷新完毕后开始往后延长5分钟, 但是就算你一直刷新, 这个token的有效期从发出开始计算也一共只有7天 部署由于django自带的开发服务器性能并不可靠, 所以在生产环境中进行部署时, 我们需要使用其他的高性能服务器. uWSGI服务器使用命令pip3 install uwsgi安装uwsgi, 其实, 我们在新建django项目的时候, 框架已经帮我们在项目配置目录下生成了wsgi.py配置文件(如本项目的Face_Eye/wsgi.py), 我们再需要编写配置文件uwsgi.ini配置文件帮助uWSGI服务器启动即可: 在项目配置目录下新建uwsgi.ini(文件名无所谓)ini配置文件, 其中加入如下配置内容(以下为本项目配置文件, 以供参考, 请根据自己的实际情况更改) [uwsgi] # 协议, 端口 http = :8000 # 项目所在目录(绝对路径) chdir = /home/jay/face_eye # 项目wsgi配置文件 module = Face_Eye.wsgi # 启动主线程 master = true # 最大工作进程数量 processes = 4 # 当服务器退出时自动删除unix socket文件和pid文件 vacuum = true # 被卡住的进程经过如下时间(秒)后销毁 harakiri = 30 # 指定工作进程名称的前缀, 便于识别 procname-prefix-spaced = face_eye # 不要使用root权限运行uWSGi # uWSGI服务器运行时的用户 uid = jay # uWSGI服务器运行时的用户组id gid = jay 然后在项目配置目录下使用命令uwsgi uwsgi.ini启动uWSGI服务器, 即可访问相关端口. 关于为什么不要使用root权限运行uWSGI, 网上有如下解释”uWSGI试图在一切可能的情况下(滥)用 fork() 调用的写时拷贝语义。默认情况下，它会在加载你的应用之后进行fork，以尽可能的共享它们的内存。”，那就是内存安全方面的问题了, 听话就是了. 关于uWSGI的操作可以参考 👉 传送门 关于WSGI, uwsgi和uWSGI可以阅读文章: 做python Web开发你要理解：WSGI &amp; uwsgi, 简而言之, uwsgi和WSGI都是通信协议, 而uWSGI是实现了uwsgi、WSGI和http等协议的Web服务器, 在此不再多加赘述. nginx代理有些时候只用uWSGI服务器就足够了, 但是还有些情况下, uWSGI的功能并不能满足我们的需求, 如对大量静态资源请求的处理, 安全方面的问题等, 在uWSGI前面加上nginx服务器进行代理会是很好的选择. 赘述存在的问题在测试中, 系统在使用redis缓存后的读取速度反而比从mysql中直接读取的速度慢, 原因可能从redis取数据的操作存在循环的问题, 问题的根源在于django-redis库没有提供一次性从reids中取出多条数据的方法, 使用其他的库应该可以消除该问题.,]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[挖矿入门 👉 让闲置的服务器跑起来吧]]></title>
    <url>%2Fpost%2FMiningGuide.html</url>
    <content type="text"><![CDATA[手头上有几台闲置的服务器, 想着不如用来挖矿吧, 自己到现在都还没接触过, 入个门玩玩吧. 前言连巴菲特都说了”比特币是真正的泡沫, 它无法创造价值”, 本文这里只是业余兴趣玩玩而已, 并不鼓励大家投入太多心血. 何况作为IT从业者, 相比之下或许我们更应该关注的是虚拟货币背后的技术和知识, 如区块链的原理和实际应用前景如何吧. 这里是以门罗币(Monero)为例演示挖矿, 其他的币大同小异. 准备工作钱包我是直接在mymonero注册的钱包, 这是门罗币官方推荐的一个热钱包. 注册的过程很简单, 直接点击页面的Create an Account, 会在随后的页面里得到你的private login key, 你的账号和密码, 就是这一个key, 一定要保存好, 而且不要让别人知道 以后登录就直接点击Log in, 然后填入key即可: 登录后会得到你的钱包地址: 关于钱包要讲的目前就这么多, 等你有币了再去了解转账的事吧😂 挖矿软件这里我选择的挖矿软件是在Github上开源的xmr-stak, 在网上的评价很高, 而且在初步使用后感觉操作很简单, 当然你也可以选择其他的软件, 步骤都差不多. 平台/环境既然是服务器, 那就大多是linux了, 而且一般也不会专门配GPU吧, 为了方便就用docker来实现吧。 Docker镜像xmr-stak官方的dockerfile是基于Nvidia的cuda镜像进行构建的, 我们这里不需要用到GPU, 所以就直接基于Ubuntu来构建吧, 编译的时候排除掉cuda的相关内容; 再者是donation的设置, xmr-stak默认是2%的贡献给作者, 源码也贴出来了, 那么我们就直接修改为0吧 dockerfile我已经写好上传到GitHub仓库, 详情请见 👉 传送门 镜像已经构建完成并上传到DockerHub, 详情请见 👉 传送门 欢迎大家Star⭐我的项目, 谢谢😁. 使用方法请在已经装好Docker的服务器上创建一个空文件夹, 就名为xmr-stak吧, 然后进入该文件夹, 运行命令docker run -it -u $(id -u):$(id -g) --name xmr-stak -v &quot;$PWD&quot;:/mnt wenjaydu/xmr-stak4cpu(xmr-stak官方的docker image usage中命令比这个多了个--rm参数, 起作用是在容器退出的时候直接删除容器, 可能是考虑到安全方面的因素吧, 但是每次启动容器的时候都要重建一下, 不能直接start容器, 并不方便, 所以如果你认为有必要的话就在run后加上--rm, 为了启停方便的话就不加), 随后会进入容器的交互式对话, 下面一步步讲解: 0: Please enter: - Do you want to use the HTTP interface? Unlike the screen display, browser interface is not affected by the GPU lag. If you don&#39;t want to use it, please enter 0, otherwise enter port number that the miner should listen on 这是问你是否要开启浏览器的界面, 开启的话可以指定端口, 然后再挖矿的过程中访问本地的该端口即可看到一些挖矿信息的总结(如当前算力和收益等), 如果不想开启的话就输入0即可, 这里我觉得并没有什么用, 所以我输入0: 0 1: Please enter: - Please enter the currency that you want to mine: - aeon7 - bbscoin - croat - cryptonight - cryptonight_heavy - cryptonight_lite - cryptonight_lite_v7 - cryptonight_v7 - edollar - electroneum - graft - haven - intense - karbo - monero7 - stellite - sumokoin 这是问你要挖什么币, xmr-stak支持这么多币的挖矿算法, 这里我们要挖的是门罗币, 所以输入: monero7 2: - Pool address: e.g. pool.usxmrpool.com:3333 这是要你填入矿池的地址, 关于矿池的概念请见 👉 百度百科: 矿池, 这里我选择国内的鱼池, 我填入它的门罗币矿池地址: xmr.f2pool.com:13531 3: - Username (wallet address or pool login): 这是要你填自己的钱包地址或者矿池的账号, 麻利的填入我们上面申请到的钱包地址(不是private login key, 而是钱包地址), 我填入: 4AkJzHJPevWg9enuY3VPyNRBXnzryYoYJKBUZprhjCt2LYMJRmd4uhfCENkE4V3DhfVmm7YSFzkunAs3AxPUUoNUT3TxVdb 4: - Password (mostly empty or x): 这是要你填密码, 我们上面填的是钱包地址, 不需要登录, 所以我们输入: x或者直接回车 5: - Rig identifier for pool-side statistics (needs pool support). Can be empty: 这是要你填入矿机的id(如果矿池支持的话), 这样如果你有多台矿机那么矿池在显示数据的时候就可以分别显示了, 鱼池是支持这个功能的, 这个根据个人需要来填吧, 这里我直接回车 6: - Does this pool port support TLS/SSL? Use no if unknown. (y/N) 问你矿池是否支持https, 我输入: N 7: - Do you want to use nicehash on this pool? (y/n) 问你是否使用nicehash, 我输入: n 8: - Do you want to use multiple pools? (y/n) 问你是否使用多个矿池, 我输入: n 最后回车后会看到软件配置完成的反馈, 最后一行有Pool logged in.字样, 说明矿机已进入矿池进行挖矿. 快捷键我们可以使用h, r, c三个快捷键来分别显示hash速率, 挖矿结果, 连接情况 按c键, 软件显示: CONNECTION REPORT Pool address : xmr.f2pool.com:13531 Connected since : 2018-05-01 05:26:38 Pool ping time : (n/a) Network error log: Yay! No errors. 说明当前网络连接没问题. 按h键, 软件显示: HASHRATE REPORT - CPU | ID | 10s | 60s | 15m | ID | 10s | 60s | 15m | | 0 | 37.1 | 36.3 | (na) | 1 | 39.0 | 37.9 | (na) | Totals (CPU): 76.1 74.2 0.0 H/s ----------------------------------------------------------------- Totals (ALL): 76.1 74.2 0.0 H/s Highest: 76.5 H/s ----------------------------------------------------------------- 这时矿机当前的hashrate(程序刚运行起来可能要等一会才会显示出数据) 按r键, 软件显示: RESULT REPORT Difficulty : 16384 Good results : 2 / 2 (100.0 %) Avg result time : 171.0 sec Pool-side hashes : 32768 Top 10 best results found: | 0 | 19877 | 1 | 19701 | | 2 | 0 | 3 | 0 | | 4 | 0 | 5 | 0 | | 6 | 0 | 7 | 0 | | 8 | 0 | 9 | 0 | Error details: Yay! No errors. 这是当前挖矿的结果(程序刚运行起来可能要等一会才会显示出数据) 后台运行与启停容器当前我们是处于与docker容器的交互界面, 我们需要detach出来让容器后台运行, 很简单, 就是docker的detach快捷键: 按住Ctrl, 然后按p键, 接着按q键, 即可. 回到容器的话, 使用命令docker attach xmr-stak即可. 停止容器使用命令docker stop xmr-stak 启动容器使用命令docker start xmr-stak 配置文件请注意, 我们一开始创建了xmr-stak文件夹, 并在它里面运行了创建容器的命令, 创建的命令会将该xmr-stak文件夹挂载到容器的/mnt文件夹, 而挖矿软件首先会到容器的/mnt文件夹下检测配置文件是否已经存在, 存在的话就直接使用, 否则就要求你重新配置创建, 所以, 配置文件也就在这个xmr-stak文件夹中了, 它里面会有config.txt, cpu.txt, pools.txt三个配置文件, 具体的使用说明在各文件中都有说明, 真的需要修改的可能就是cpu.txt文件中对于low_power_mode字段的设置, 判断是否要开启低耗能模式, 设为false即可 收益查看然后我们到鱼池官网官网上可以查看到我们钱包的收益和算力: 点击右上方的放大镜搜索: 填入钱包地址, 选择币种然后查看: 在页面上即可看到自己矿机的算力和收益等信息(如果有多台矿机而又没有分别给设置id, 那么显示的信息将是所有矿机的总和) 鱼池上的门罗币收益的起付标准是0.1XMR, 每日08:00达到起付标准自动结算08:00之前未支付的收益，不足起付标准则第二天08:00结算, 每日08:00–16:00自动付款，每日付款一次, 费率是3% PPS. 详情请见鱼池帮助页面.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自己动手分析Windows蓝屏日志]]></title>
    <url>%2Fpost%2FAnalysisBsodLogsOnWindows.html</url>
    <content type="text"><![CDATA[最近刚重装的系统, 电脑总是在开机的时候BSOD(Blue Screen of Death, 蓝屏死机),同时会报PAGE_FAULT_IN_NONPAGED_AREA的错误, 然后自动重启后一切正常, Google了一遍没有发现实际有用的解决方案(关键是根本不知道问题出在哪里), 还是自己动手, 丰衣足食吧. 以此为例演示一下对于Windows系统日志简单分析、进行查错的过程. 解决问题思路要解决问题先要确定问题在哪吧, 看错误代码好像是内存分页地址的问题, 但是内存涉及的范围就太广了, 进Windows的事件查看器找了一下报error的事件, 发现系统无法快速启动, 但是是什么原因导致的呢? 0xc000001的错误代码只是说明无法正常启动, 没有更多的信息来排错了. 不管了，找系统日志看下吧。日志的路径是C:\Windows\Minidump, 结果打开来后发现是十六进制文件😥怀着应该有相关工具的信念在网上找了一波, 结果在Microsoft官网上找到了 👉 WinDbg Viewer, 这是一个MS store上的软件, 也可以直接在MS store上搜索下载. 排错过程获得日志首先要获得出错时候的日志, 前面说了日志的路径是C:\Windows\Minidump, 如果你进去了发现, 里面是空的, 那么就是你系统设置的问题了, 要确保你的系统设置如下: 这样设置的话, 在系统出错后会将日志保存到C:\Windows\Minidump文件夹下的dump日志文件中. 找到日志文件后我们要将需要的日志复制到桌面上, 因为权限的问题, 如果直接打开的话会提示没有操作权限或是显示空白(sublime会如此). 设置WinDbg Viewer得到了日志文件, 得到了分析工具, 那我们要先设置一下工具了, 最主要的是设置symbols, 没有它, 我们无法查看日志, 官网上也提供给我们方法了 👉 设置symbols 到WinDbg Viewer的setting中设置就好了, 如下图: 请注意srv*与*https://msdl.microsoft.com/download/symbols之间应该填写你存放下载后的symbols的路径, 保存即可, 进入下一步. 分析日志现在我们将桌面上的日志文件拖动到WinDbg Viewer中, 软件会自动分析, 如下图: 但是输出的信息并不多, 看了一圈并没有看到什么, 我们在命令窗口里(也就是Command窗口输出的文字信息的下面那个包含kd&gt;字样的长条对话框里)输入!analyze -v并回车进行执行, 这个命令的作用是得到更加详细的调试信息, 然后在得到的信息里查找问题根源. 发现了一个比较有用的报错 👇 ******************************************************************************* * * * Bugcheck Analysis * * * ******************************************************************************* Use !analyze -v to get detailed debugging information. BugCheck 50, {ffffbb85a050fff0, 2, fffff801eee12c90, 2} *** WARNING: Unable to verify timestamp for Netwtw06.sys *** ERROR: Module load completed but symbols could not be loaded for Netwtw06.sys Could not read faulting driver name *** WARNING: Unable to verify checksum for win32k.sys Probably caused by : Netwtw06.sys ( Netwtw06+533ea9 ) Followup: MachineOwner 报错信息显示可能是Netwtw06.sys引起的error, 到网上查了下Netwtw06, 好像是与无线网卡有关, 于是直接进设备管理器想把无线网卡的驱动更新了一下, 结果显示已经是最新的驱动, 但是驱动的版本日期是2017年的了, 于是抱着试一试的想法到官网上查了下, 发现了三月份刚更新的驱动, 下下来安装了一下, 试用了两天, 没有再出现之前的蓝屏现象, 问题解决👌. 赘述关于之前在设置里填写的symbols地址, 第一次使用的时候我们本地是没有symbols的, 所以填的那个是个网络地址, WinDbg Viewer会将它下载下来放到你设置的路径里, 以后再用就可以直接填写本地的那个路径了(每次打开WinDbg Viewer的时候都需要重新设置一下).]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Jetbrains系列IDE进行远程开发]]></title>
    <url>%2Fpost%2FHow2DevelopRemotelyWithJetbarinsIDE.html</url>
    <content type="text"><![CDATA[有时候, 我们的开发环境会受到所使用平台的限制而导致无法进行某些开发, 例如有些库在linux平台上被支持的很好, 而要移植到windows的话就要话不少的精力(还得冒着不小的搞砸的风险), 而现在已经有不少的IDE提供了远程开发的功能, 我们可以很好的利用起来, 在此以JetBrains系列的IDE为例进行演示. 前言先简单介绍一下情况吧, 之前接触了一下一个开源的python人脸识别库 👉 Face Recognition, linux平台上很简单的操作就安装配置好了, 但是官方并不提供windows上的安装方法, 虽然有老哥提供了相关的教程, 但是看了看下面的网友提出的那么一系列的问题, 想了想生产环境最终还是在linux上, 算了, 还是在linux环境下开发吧, 想起原来在哪看过IDEA可以利用远程的环境进行开发, 估计JetBrains系列的IDE大都可以, PyCharm搞起. 同步项目内容要远程开发, 你得先把项目文件同步到远程服务器吧? 先搞定这个 上传项目文件到菜单栏 -&gt; Tools -&gt; Deployment -&gt; Configuration进行配置, 如下图: 点击绿色的+符号添加远程服务器, Name任起, Type选择SFTP, OK进入详细配置页面, 如下图: 完成后由Connection框进入Mappings框继续配置, 如下图: 完成后在项目根路径上右击, 到Deployment -&gt; Upload to *上传项目到服务器即可. 关于自动上传功能上面说最好是勾选自动上传的功能, 因为如果你不勾选的话, 每次都需要你手动上传, ,而且如果你都是直接上传根文件夹, 那么有些文件虽然没有被修改, 还是会被重传一边(而且这是大多数文件, 因为你用框架的话会有很多的库文件之类的), 这就会导致费时费力还不讨好了 配置本地使用远程服务器的环境上面我们同步了本地的开发项目到服务器, 但是我们本地的开发环境还是没有变化啊, 那我们怎么利用远程开发环境呢? 下面讲配置: 添加远程python interpreter进入Settings -&gt; Project: -&gt;Project Interpreter设置当前项目的python翻译器, 点击右边的小齿轮进行设置, 选择add进行添加: 然后选择SSH Interpreter, 选择下面的Existing server configuration, 在框中选择之前我们已经配置过的远程服务器: 然后点击next, 进行详细配置: 完成配置后点击apply进行应用. 选用interpreter到项目设置里应用我们刚刚配置的远程服务器的interpreter就好了, 完成配置后IDE会从远程服务器上下载环境文件, 都是自动化进行的, 无需干预, 等全部完成了就可以使用服务器上的开发环境了. 关于库的安装在库的安装方面（由于jetbrains的IDE自身特性），如果你不通过IDE而使用其他终端软件连上服务器然后安装库的话，IDE是不会主动感知到库文件的增加或减少的，所以不会自动同步，只有在你重启IDE或手动刷新该Interpreter的库文件路径之后才会自动同步到本地，在Jetbrains社区中对于该问题有提及， 请参考👉 见此 赘述同步远程文件到本地注:在开发项目的过程中, 如果服务器的项目文件主动变化的话, 本地的IDE并不会主动进行同步, 需要你手动进行同步, 例如, 我的整个项目在服务器和本地之间同步完成后, 我在服务器端主动修改了一个views.py文件内容, 在最后加上了一句print(&quot;this is just a test&quot;), 但是本地PyCharm并不会主动将修改的内容同步过来, 如果我想要同步的话, 需要手动进行:在项目根路径上右击, 到Deployment -&gt; Sync with Deployed to * 然后IDE会将两地的文件进行比较, 注: 如果你在修改远程文件后, 在本地也进行修改的话(此时你开启了自动上传的配置), 保存本地文件后, IDE会自动将本地文件上传到远程并覆盖远程的修改内容. 所以建议远程开发的话, 操作什么的尽量都在IDE上进行, 方便保持一致. JetBrains其他IDEJetBrains系列其他的IDE(IDEA, webstorm等)也都差不多是这样配置.本文是以本地项目上传到远程服务器为例讲解的, 当然也可以配置后再从远程服务器上拉项目到本地的, 只不过一开始不是upload而是download罢了, 不再赘述.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Django]]></title>
    <url>%2Fpost%2FIntroduction2Django-Basic.html</url>
    <content type="text"><![CDATA[以开发一个人脸识别的后端为例讲解Django的一些具体使用方法. 版本: python3, django2.0; 平台: Linux(由于项目基于face_recognition库进行开发, 官方并不支持该库安装在windows上, 故我在windows上使用PyCharm进行基于CentOS系统的远程开发, 关于如何使用PyCharm进行远程开发, 见此文); 基于VirtualEnv的开发环境推荐使用VirtualEnv进行开发, 如果之前没接触过, 这次刚好可以接触一下. VirtualEnv简介VirtualEnv是一个python的第三方包, 可以用来创建python的虚拟开发环境 为什么要使用VirtualEnv这样说吧, 对比起node.js, 你会发现python的包管理机制有个很大的缺点就是它的库安装都只能是全局的, 你一个python的开发环境用的越久, 安装的依赖也就越多, 就越容易出现问题(依赖包的冲突/版本的兼容等), 更不用说要在一个环境下运行两个依赖不同版本库的应用了(如应用A依赖Django1.x, 而应用B却依赖Django2.x), 但是像node.js那样可以把依赖与项目本身绑定、而与全局环境可以不相关的机制就合理且对开发友好. 而像VirtualEnv这种管理虚拟环境的库就是专门解决这种问题的了. VirtualEnv的使用 使用pip3 install virtualenv命令进行安装; 创建一个名为MyProject的文件夹, 进入文件夹, 并在当前文件夹下运行virtualenv venv命令创建一个名为venv的虚拟环境, 命令执行完成后你会发现多了一个名为venv的文件夹, 其中就是你这个项目的开发环境了; 打开venv/Scripts文件夹, 里面会有一个名为activate的脚本, 这就是用来激活你这个venv虚拟开发环境的脚本, 让我们在cmd下运行一下该脚本: 首先进入到该文件夹下, 然后执行.\activate命令激活环境(如果是linux环境下, 则是使用source activate命令激活环境), 随后你会发现cmd的命令提示符变了, 在开头多了(venv)的字样, 说明成功激活了虚拟开发环境, 你在这里进行的所有操作都与外面的全局环境无关了(退出虚拟环境使用deactivate命令). 让我们来安装一下Django, 使用pip3 install Django进行安装. 安装完成后我们使用pip3 list命令可以查看到Django已经安装到虚拟环境中, 如果这时你到外面的全局环境中使用list命令查看会发现并没有安装Django这个库. 注: 如果使用powershell运行activate脚本的时候提示错误, 报错信息中含有因为在此系统上禁止运行脚本等字样, 说明你的PS现用执行策略是 Restricted（默认设置）, 而Restricted策略为了系统安全不允许任何脚本运行, 你需要执行set-executionpolicy remotesigned命令修改策略后才可以使用PS执行脚本. 创建项目建立项目在MyProject文件夹中使用命令./venv/Scripts/activate进入虚拟环境, 然后运行命令django-admin startproject DjangoDemo, django-admin会为我们新建一个DjangoDemo文件夹并在其中初始化一个django的项目.每次进入虚拟环境前都需要执行activate脚本, 下面的所有操作都会在虚拟环境中进行, 不再赘述执行脚本的操作; 运行项目现在项目已经有了, 我们进去看一下项目结构: DjangoDemo\ manage.py DjangoDemo\ __init__.py settings.py urls.py wsgi.py 其中主要是manage.py这个文件, 它是我们用来管理整个项目的一个脚本, 其他都是配置文件, 等用到的时候再说. 既然是个完整的项目, 那现在我们来运行一下: 在项目根目录下运行命令python manage.py runserver, 会出下如下字样: Performing system checks... System check identified no issues (0 silenced). You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run &#39;python manage.py migrate&#39; to apply them. April 21, 2018 - 10:36:37 Django version 2.0.4, using settings &#39;DjangoDemo.settings&#39; Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. 说明服务已经在运行, 我们访问一下本地8000端口, 会看到如下django2.0的界面 👇 创建项目的应用Django框架的思想是以应用为基础来构造项目, 这里的应用可以看做是一个个功能模块, 现在我们来创建一个人脸识别的模块. 使用在项目根目录下运行命令python manage.py startapp faceRecog, 完成后我们可以看到目录下多了一个名为faceRecog的目录, 这就是刚创建的应用, 这时它还跟项目没有关系, 我们先将它添加到项目的配置文件里: 打开项目里DjangoDemo文件夹中的settings.py文件, 在INSTALLED_APPS一项中加入刚创建的应用名, 如: INSTALLED_APPS = [ &#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, &#39;faceRecog&#39; ] url映射后端接收到http请求后需要将请求转发给相应的模块进行处理, 那么要如何转发路由呢, Django让我们把url与对应的处理函数写在urls.py文件里，当用户请求一个网址时，Django 就去会urls.py里找，如果找到了对应的地址，就会调用和它对应的处理函数（叫做视图函数）来处理请求。 针对本文的项目, 我们需要进行如下的添加👇 修改项目根目录下的faceRecog文件夹下的urls.py文件, 如下: from django.conf.urls import url from . import views urlpatterns = [ url(r&#39;^$&#39;, views.index, name=&#39;index&#39;), ] r&#39;^$&#39;代表正则表达式匹配, ^代表匹配字符串开头, $代表匹配字符串结尾, 而中间什么都没有, 所以这个正则匹配的是空字符串. 这样转发到faceRecog模块的路由如果什么都不带的话就会使用view.py中的index函数进行处理, 那我们来编写下faceRecog/views.py文件吧, 让它能够处理这个请求: from django.http import HttpResponse def index(request): return HttpResponse(&quot;&lt;h1&gt;this is just a test, and it works&lt;/h1&gt;&quot;) 然后修改项目根目录下的DjangoDemo文件夹下的urls.py文件, 如下: from django.contrib import admin from django.urls import path, include # 相比之前添加了include, 引入的include函数帮我们把faceRecog应用中的urls.py文件包含了进来 urlpatterns = [ path(&#39;admin/&#39;, admin.site.urls), path(r&#39;&#39;, include(&#39;faceRecog.urls&#39;)), #添加应用的url, r&#39;&#39;是一个正则表达式的空字符串, Django会把它和后面include的urls.py文件中的url进行拼接 ] 这时我们运行python manage.py runserver让服务器跑起来, 再访问http://localhost:8000即可看到h1标题大小的this is just a test, and it works字样. 解析路由的过程是这样的, 后端接收到请求http://localhost:8000后会将协议、域名和端口都去掉, 这样就什么都没有了, Django会将它与url.py中的路由进行匹配, 因为它是个空字符串, 所以就匹配到faceRecog应用下的index函数了, 所以Django调用index函数去处理, 返回内容&quot;&lt;h1&gt;this is just a test, and it works&lt;/h1&gt;&quot;. 数据库Django框架自身集成了SQLite的数据库, 可以开箱即用. 项目中主要的数据结构在建表之前需要先了解一下face_recognitiond的官方使用手册, 我们主要用到的是face_encodings函数, 得到其识别脸部后返回的脸部特征值, 函数返回值类型如下图: 可以看到face_encodings函数的返回值是一个list, 其中包含了一个numpy的数组元素. 对于项目的数据库, 首先我们要考虑所需的表, 由于这里只是一个演示的demo, 我们只建立一个脸部特征值的表, FaceChattr表, 然后我们需要考虑表中要存放的数据, face_recognition的face_encoding函数的返回值是一个list, 其中存放的对象是numpy.ndarray数组类型的, 这样的话我们就没法自由的将其序列化和反序列化的同时还保证其类型不变, 于是想到可以使用json这个序列化库(使用pip3 install json安装该库)来帮助我们, 但是json是没法序列化numpy库中的类型的(比如像这里的ndarray), 直接操作的话你会得到NumPy array is not JSON serializable这样类似的error, 其实我们可以使用ndarray.tolist()方法直接将numpy的数组转为python的list类型, 然后再转成json, 操作如下: import face_recognition as fr import json img = fr.load_image_file(imgPath) unknownFaceEncoding = fr.face_encodings(img)[0] #获得特征值 unknownFaceEncoding = unknownFaceEncoding.tolist() # numpy.ndarray转list类型 unknownFaceEncoding = json.dumps(unknownFaceEncoding) # list转json 建表在刚建立的faceRecog应用的文件夹下会有一个models.py的文件, 这就是我们应用的model了, django已经为我们提供了它的ORM处理系统, 我们只要按照框架的要求来写就可以了 但是我们先要想好上面得到的脸部特征值json数据要如何存入数据库呢? 这里推荐使用jsonfield这个库, 项目开源在Github上, 这是一个针对Django框架设计的, 详细情况请见GitHub项目吧, 这里不再赘述, 直接投入实践(使用pip3 install jsonfield安装该库). 除了人脸特征值, 这里就不存其他值了, 想加的话类比一下就行了, 只加个主键id, 表结构如下, 将下面代码写入models.py文件: from jsonfield import JSONField class FaceChattr(models.Model): id = models.IntegerField(primary_key=True) #主键id, 默认自增 charaValue = JSONField( ) # 脸部特征值 建立好models后, Django还并没有为其建立相应的数据表, 需要我们手动进行操作进行创建, 在根目录下先后运行python manage.py makemigrations 和 python manage.py migrate 命令即可. 数据操作上面已经建好了表, 下面演示对于数据的操作. 存数据想要将数据存入数据库, 我们先要创建一个数据对象, 然后再将对象序列化到数据库中, 而这里的对象也就是我们上面创建的数据表类(FaceChattr)了, Django自身的ORM框架可以帮助我们进行序列化, 下面演示: from faceRecog.models import FaceChattr # 从faceRecog应用的models中引入FaceChattr表对象 import face_recognition as fr import json img = fr.load_image_file(imgPath) unknownFaceEncoding = fr.face_encodings(img)[0] unknownFaceEncoding = unknownFaceEncoding.tolist() # numpy.ndarray转list类型 unknownFaceEncoding = json.dumps(unknownFaceEncoding) # list转json newFace = FaceChattr(charaValue=unknownFaceEncoding) # 赋值持久化 newFace.save() 可以看到上面使用newFace = FaceChattr(charaValue=unknownFaceEncoding)创建了一个FaceChattr的对象, 并将新识别出来的人脸特征值赋值给它的charaValue属性(对应着FaceChattr表中的chattrValue字段), 然后调用save函数保存到数据库中, 这就是存数据的操作流程. 取数据读取数据库中的数据可以使用tableName.object.all()获取表中的所有数据对象, 但是我们是无法直接的获取其中的数据的, 需要在数据表类中加上__str__方法来返回内容, 例如: from jsonfield import JSONField class FaceChattr(models.Model): id = models.IntegerField(primary_key=True) charaValue = models.JSONField() # 脸部特征值字段 def __str__(self): return self.charaValue # 返回脸部特征值 这样定义好__str__ 方法后，再在解释器进行查询时显示的内容将会是__str__方法返回的内容. 所以对于验证数据库中有没有当前要验证的这张脸的逻辑, 我们可以这样写: def recogFace(unknownFaceEncoding): try: knownFaces = FaceChattr.objects.all() faces = [] for face in knownFaces: face.charaValue = json.loads(face.charaValue) faces.append(face.charaValue) results = fr.compare_faces(faces, unknownFaceEncoding) if True in results: result = True else: result = False return result except Exception as e: print(e) 改数据与删数据改数据与删数据并不是此处的重点, 简单提一下: 改数据很简单, 取出数据库中相应的数据, 然后重新赋值再save回去就可以了; 至于删数据的话则是调用delete()方法, 例如: knownFaces = FaceChattr.objects.all() oneFace=knownFaces[0] oneFace.delete() 其他操作与配置关闭CSRF验证有时候我们需要需要关闭某些方法的CSRF验证功能(否则请求的话必须带上相关的安全token才会被接受), 在这个demo程序里我们就需要这么做, 方法如下, 引入相关模块后使用@csrf_exempt进行标注即可 from django.views.decorators.csrf import csrf_exempt @csrf_exempt def function(): 运行服务器时报错Invalid HTTP_HOST header在项目setting.py配置文件中将ALLOWED_HOSTS字段的内容设置为[&#39;*&#39;]即可, 即允许所有主机地址 总结项目地址上面已经介绍了Django的部分基础操作, 关于本文中的完整demo, 已经打包上传到github上, 详情请见 👉 传送门. 由于face_recognition库官方并不支持在windows上安装, 所以我写了个dockerfile供没有linux环境的同学来构建镜像, 能够在容器中运行本demo. 前端最后只剩下前端提交请求页面的相关内容了, 比较基础的东西, 这里简单写了个页面, 也上传到上面的GitHub项目中了, 在app-faceRecognitionDemo的frontend目录中, 修改其中src\components文件夹中的AddNewFace.vue和RecogOldFace.vue中form表单提交的地址为你的Django程序运行所在的host地址, 然后在frontend根目录下运行npm install安装组件, 完成后运行npm run dev即可启动服务器程序.]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各开发环境换源方法集合]]></title>
    <url>%2Fpost%2FMeansOfChangingImageSourcesInVariousDevEnv.html</url>
    <content type="text"><![CDATA[因为在平时的开发中, 由于绝大多数开发环境的官方镜像源都在国外, 拉取的时候速率受影响, 修改成国内源的时候都要临时去搜索一下, 有些源可能维护方更换资源导致无法使用, 就比较麻烦. 于是我在本文中整理了各个开发环境下包管理器的换源方法. 通用办法集合在这里推荐清华和中科大的两个镜像源帮助列表, 包括的范围很广(包括*nix/pypi/node/docker等), 如果网络环境是教育网的话比较推荐这两个 👇 清华大学镜像源帮助列表 中科大镜像源帮助列表 具体的换源方法里面都有. php composer推荐国内的 👉 Packagist, 具体用法官网上都有. npm国内的源淘宝的源 👇 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/ cnpm的源 👇 搜索地址：http://cnpmjs.org/ registry地址：http://r.cnpmjs.org/ 软件实现的换源方式smart-npm这是当前比较火的一个工具, 它可以让你在使用 npm install时自动从国内的镜像下载，而在你使用 npm publish 又能发布到官方的 registry 上, 相关详情请见 👉 GitHub项目地址 cnpm类似的软件还有cnpm使用命令npm install -g cnpm进行安装. 一般用法与npm一致，但是除了npm的功能之外，它还有一些自己的拓展命令，具体用法请使用命令cnpm -h进行帮助。 nrmnrm(npm registry manager)是npm的镜像源管理工具，我们可以用它来切换npm的镜像源。使用命令npm install -g nrm进行安装. 命令nrm ls用于展示所有可切换的镜像地址 命令nrm use cnpm可以直接切换到cnpm上了, 其他的源也可以如此切换还有添加和删除源等操作, 具体请使用命令nrm -h进行帮助.使用nrm需要注意的是当你切换到非官方源之后如果需要使用npm publish发布项目的话, 需要先手动切换回官方源才可以. maven官方的maven repo网站, 可以搜索需要的组件与相关依赖.就我所知, 目前国内的也就阿里的maven源算好用的了, 添加方法: 修改maven根目录下的conf文件夹下的settings.xml文件添加如下内容 &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;aliMaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; 也有老哥写好了的配置文件, 供参考👉阿里maven配置文件]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http协议知识集锦]]></title>
    <url>%2Fpost%2FKnowledgeAboutHttp.html</url>
    <content type="text"><![CDATA[本文将介绍关于常见协议——http的相关知识。 超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。 版本迭代关于http协议版本的迭代升级与不同之处(V0.9 -&gt; V1.0 -&gt; V1.1 -&gt; V2), 推荐阮一峰老师的博客文章👉http协议入门, 其中描述的很详细. 状态码状态码是一个三个数字的结果代码, 用以表示网页服务器超文本传输协议响应状态, 由第一个数字的不同取值可以分为5类, 详细的内容请见wiki： 1xx: 信息类响应该类状态码表示请求已被接受，需要继续处理, 这类是临时响应, 代表的响应都是信息性的，表示客户应该采取的其他行动。 2xx: 成功类响应该类状态码表示处理成功，意味着动作被成功接收、理解和接受 3xx: 重定向类响应该类状态码表示为了完成指定的动作，必须接受进一步处理, 后续的请求地址在本次响应的Location域中指明。 4xx: 客户端错误该类状态码表示客户请求包含语法错误或者是不能正确执行 401和403的区别?🤔StackOverflow上的高票回答十分形象简洁的描述了二者的区别, 401就是”你没有验证你的身份或是验证错误,请再次尝试登录验证”(它往往会在WWW-Authenticate头里告诉你该如何去验证);而403则是”我知道你的身份,但是你就是没有权限去访问这个资源,所以除非你的权限状态改变了, 否则你就别再尝试请求该资源了”; 就我的理解来举个例子就是, 401是你没有登录的时候就去请求资源或是你登录的时候身份是错误的(账号密码错误), 而403就是你想要以普通用户的身份去请求管理员的资源. 5xx: 服务端错误该类状态码表示服务器不能正确执行一个正确的请求 一些常见请求头Accept：浏览器可接受的MIME类型。 Accept-Charset：浏览器可接受的字符集。 Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。 Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。 Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。 Connection：表示是否需要持久连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一 点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。 Content-Length：表示请求消息正文的长度。 Cookie：这是最重要的请求头信息之一 From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。 Host：初始URL中的主机和端口。 If-Modified-Since：只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答。 Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。 Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。 User-Agent：浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。 一些常见响应头Allow: 服务器支持哪些请求方法（如GET、POST等）。 Content-Encoding 文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档 的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept- Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。 Content-Length 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过 byteArrayStream.writeTo(response.getOutputStream()发送内容。 Content-Type 表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentTyep。 Date 当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。 Expires 应该在什么时候认为文档已经过期，从而不再缓存它？ Last-Modified 文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文 档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。 Location 表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。 Refresh表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(&quot;Refresh&quot;, &quot;5; URL=http://host/path&quot;)让浏览器读取指定的页面。注意这种功能通常是通过设置HTML页面HEAD区的&lt;META HTTP-EQUIV=&quot;Refresh&quot; CONTENT=&quot;5;URL=http://host/path&quot;&gt;实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的 HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是“N秒之后刷新本页面或访问指定 页面”，而不是“每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷 新，不管是使用Refresh头还是。注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。 Server 服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。 Set-Cookie 设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。 WWW-Authenticate 客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例 如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\”executives\””)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问 （例如.htaccess）。]]></content>
      <tags>
        <tag>Network</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取消Wox界面下的鼠标选中特性]]></title>
    <url>%2Fpost%2FAbolishSelectingOptionsWithMouseInWox.html</url>
    <content type="text"><![CDATA[Wox是一款windows系统下的快速启动器, 类似于OS X系统下的Alfred(当然了,没有Mac的我并没有用过…), 反正就是炒鸡好用的一款应用了, 具体的使用呢,可以参考少数派的这篇文章. 如果你用过, 那么你会发现在官方发布的版本里, 一直存在一个非常蛋疼的特性, 就是鼠标的选中: 搜索结果出现后, 如果你的鼠标停留在栏目下方, wox会默认鼠标所在的地方为焦点, 然后选中鼠标指向的那个搜索结果, 如果这时你直接回车的话, 会导致误选, 尤其是在误选了大型应用的时候, 不仅耽误时间而且影响心情, 但是官方一直没有在发布的版本中加入这个特性的开关. 问题解决过程在我误选了不知多少次并满怀希望的期待官方能加入该特性开关却一次次落空后, 我去官方的github项目上查找了一下相关的issue, 发现果然之前就有人提过这个问题, 而且不只一个, 而且有国内的网友也有国外的,而且最早在17年1月就有人提出了, 不知道Wox官方到底在不在乎用户体验. 看到这个issue下的CrazyCoder提出了解决办法, 刚好repo中已经写好了appveyor的配置文件, 于是我就直接fork了wox项目, 修改该句赋值为false, 然后在appveyor上直接build了该项目, 得到artifacts后, 我试用了下, 鼠标焦点的问题是解决了, 但是在你用鼠标点击某条搜索结果时, 会出现driver error的报错窗口, 如下图: 估计是应该是刚才修改代码导致的, 在项目里搜索了一下关键词driver, 并没有结果, 说明这个error应该是wox调用window相关接口的时候出现的, 那么我们要修改就该在wox代码里找到调用执行的地方, 那肯定是与刚才修改的OnMouseEnter函数有关了, 在项目里检索了一下关键词OnMouseEnter, 发现在该位置存在一句调用&lt;EventSetter Event=&quot;MouseEnter&quot; Handler=&quot;OnMouseEnter&quot; /&gt;,监听了MouseEnter事件, 于是直接将该句注释, 用appveyor又重新build了一遍, 这次成功了.虽然解决了鼠标影响搜索结果的焦点问题, 但是没法再使用鼠标来选择使用哪条搜索结果了(但是如果已经选中了一条结果, 这时用鼠标点击wox界面的任意一处,都会打开这条结果,也就是说,你在wox界面上不管使用鼠标的左击或右击,都操作的是当前键盘选中的那条结果), 只能使用键盘来进行选择, 这是一个局限性. 分享 该项目在我的github上的地址; 该项目在我的appveyor上的地址, 修正后的wox的artifacts文件下载地址, 需要使用的话直接下载exe文件即可;]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ownCloud私有云搭建]]></title>
    <url>%2Fpost%2FSetupYourPrivateCloudWithOwncloud.html</url>
    <content type="text"><![CDATA[ownCloud是一个自由且开源的个人云存储解决方案, 提供服务器和客户端, 且客户端软件全平台支持, 也可以通过浏览器访问, 我们用来搭建私有云非常方便. 环境准备服务器需提前安装nginx/apache,mysql,以及php(5和7都可以,建议7). 我的环境是nginx+mysql+php7.建议直接安装lnmp, 我使用的是lnmp一键安装包. 安装在这里我使用手动安装的方式, 因为自主性更强. 从官网下载地址下载自己所需的安装包后(我下载的版本是10.0.7), 解压到网站主页目录, 例如, 我在自己的服务器上添加了一个owncloud.safeandsound.cn的虚拟主机, 那么lnmp会把该网站的主页目录设置为/home/wwwroot/owncloud.safeandsound.cn, 那么我将安装包解压到该目录即可:tar xvf owncloud-10.0.7.tar.bz2 -C /home/wwwroot/owncloud.safeandsound.cn, 随后将/home/wwwroot/owncloud.safeandsound.cn/owncloud目录中的所有内容全部提取到/home/wwwroot/owncloud.safeandsound.cn中即可: cd /home/wwwroot/owncloud.safeandsound.cn/owncloud &amp;&amp; mv * .. 随后进入mysql应用中添加owncloud以后需要使用的数据库: create database owncloud; grant all on owncloud.* to &#39;root&#39;@&#39;localhost&#39; identified by &#39;root用户的密码&#39;; flush privileges;` 访问所部署的服务器的地址，即可到达如下页面： 我们填写设置内容，数据库配置填写我们刚刚设置的mysql相关内容： 当完全部署成功后再访问该服务则会出现如下登录页面，登录即可使用： 注: 如果在设置管理员账号后跳转到404页面, 你可以在对应虚拟主机配置文件里的include enable-php.conf;替换为include enable-php-pathinfo.conf; lnmp一键安装包的nginx配置文件在/usr/local/nginx/conf/vhosts/ docker+owncloud我们也可以使用docker中的ownCloud镜像来进行我们自己云盘的搭建 docker pull owncloud docker run -itd --name owncloud -p 8081:80 -v /root/forDocker/owncloud:/var/www/html/data owncloud #owncloud镜像内置了有SQLite数据库,如果你想要使用mysql作为数据库的话, #你还需要提前构建mysql的容器, 然后在构建owncloud容器的时候使用--link参数将它们连接,这样两个容器才能够通信 参数-v /root/forDocker/owncloud:/var/www/html/data将/root/forDocker/owncloud挂载到容器的/var/www/html/data目录，让你上传的文件能保存到宿主机本地，这样即使删除容器你的文件也不会丢了。后续的配置与之前的安装一致, 使用docker镜像的安装方式更加的方便简单 关于上传文件这里以docker容器为例. 如果你尝试直接将文件移动到你的owncloud用户文件目录(/root/forDocker/owncloud/username/files)里, 然后想要从owncloud操作界面共享出去, 会发现根本找不到这个文件, 嗯对了, 文件信息是存在数据库里的, 虽然你上传了文件，但是ownCloud的数据库里并没有这个文件的信息, 所以前端也就展示不出来了。 我们需要使用owncloud安装目录中的occ脚本来帮我们扫描文件并添加到数据库中去: 我们使用docker exec -it owncloud /bin/bash命令接入容器, 会发现进入后的当前目录就是/var/www/html, ls一下会看到有一个名为occ的文件, 我们使用命令sudo -u www-data php occ files:scan --all扫描所有文件(必须用sudo命令切换到www-data的用户身份, 因为owncloud的所有文件都是归属于该用户的),即可. occ脚本的其他一些用法: 列出用户: sudo -u www-data php occ user:list 扫描指定用户的所有文件: sudo -u www-data php occ files:scan username 扫描指定目录: sudo -u www-data php occ files:scan --path=/path/of/dir 如果不想要看执行后的消息可以加上-q参数 详细用法可以使用sudo -u www-data php occ -h查看 赘述如果登录后页面上方有黄色背景的提示:There were problems with the code integrity check. More information…, 说明配置方面存在某些细节问题, 点击进去查看根据提示逐一修复即可。]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习笔记：基础操作]]></title>
    <url>%2Fpost%2FIntroduction2Docker-Basic.html</url>
    <content type="text"><![CDATA[本文记录了我对docker基础命令的学习, 并自己搭建了一个小的示例应用集群. docker相关产品简介关于docker的wiki介绍。docker官网在此。 docker hub是docker公司提供的公共registry, 有点类似于GitHub, 用户可以将自己的镜像免费保存到公共仓库里, 公共仓库不限, 每人有一个免费的私有仓库, 当然你也可以购买更多. docker store中的产品都是通过了docker官方认证的, 所以至少在官方看来肯定是安全的. docker提供的虚拟化方式使得我们可以快速搭建出一套可复用的开发环境, 而且docker在以镜像为基础构建出的容器十分轻量化, 大部分容器基本都可以实现秒开;它以容器为开发, 测试和发布的单元, 将所有相关的组件和环境都封装到容器中, 这样就巧妙的解决了开发的应用在不同平台之间依赖问题, 且能保证应用即使在不同平台下的实际使用中也能达到高度一致的效果. 情景举例举个可能不是很合适的例子吧, 比如以后工作, 有一天六点要下 班了, 老板突然打电话我说”哎,文杰, 明天有一个web应用要测试, 我给你一台服务器, 你现在简单部署一下吧”, 那我这(要)么(涨)热(工)心(资), 不能拒绝吧, 拿到后台的程序一看是Java写的, 那我在服务器上起码得装lnmp和jre吧, 好的, 就算装的快吧, 配置环境加上部署前后端再简单测试一下半个小时搞定, 我跟老板说完成了. 等我收拾完了要走了, 他又打过来说, “哎呀,搞错了, 给你的那台服务器是运维他们用的, 你重新弄一下吧”, 于是我又花了半个小时重新配置环境&amp;部署, 终于结束了, 老板又说”这个应用在明天测试里也有对负载方面的压力测试, 我再给你四台服务器, 你部署一下, 再做个负载均衡吧”(这时我会想是不是他故意针对我), 那我估计照我之前的方法来配置的话今晚我得八九点才能回家了. 当然, 这个例子可能并不契合现实(毕竟我没有实习过, 并不知道公司的实际生产环境/操作流程如何), 但是我们能够看出来对于这种在生产环境配置上的重复操作, 像我这种传统的方法是很浪费时间的, 而且如果对于生产环境还存在版本方面的要求, 那么在今后的维护与部署会更加麻烦, 项目的持续交付与持续部署过程中可能还存在版本回滚的问题. 这时, docker就是一个很好的选择, 我们可以在一台机器上构建需要的镜像, 然后发布我们镜像, 再在其他的主机上拉取镜像并进行部署. docker命令的学习我是参考着Docker——容器与容器云(第2版)学习的docker命令, 如果没有书的话可以参考此文中的命令讲解 搭建一个小的应用集群我们现在搭建一个后台是java,前端是php脚本与后台交互, 使用haproxy进行负载均衡的一个添加用户的小应用.内容只求简单, 主要是理解对docker的操作. 这里的示例是在linux环境下进行的。首先建议将docker的镜像源更换为国内的, 这样能大大提高下载速度(我这里更换的是中科大的源,尤其是用学校的服务器🙈教育网内传播,速度相当快了): echo &#39;{&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]}&#39; &gt; /etc/docker/daemon.json 如果是windows的环境则需要在图形化界面的docker -&gt; setting -&gt; daemon -&gt; Registry mirrors里面进行设置添加 创建容器接下来创建我们需要用到的容器: #创建mysql容器, 通过设置环境变量&quot;MYSQL_ROOT_PASSWORD&quot;来设置root用户密码, #最后的两个参数是设置编码的, 否则持久化到数据库的中文将成乱码 docker run -d --name mysql --env MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #创建java容器用来运行我们的java后台,将其8080端口映射到宿主机的8080端口, #使用--link参数将其与mysql容器链接,使二者可以通信 #将D盘的/forDocker/java目录挂载到其/root/java目录, 方便我们进行文件的传输 docker run -itd --name java -p 8080:8080 -v /root/forDocker/java:/root/java --link mysql:mysql java #创建一个php容器来运行我们的第一个前端 服务器,其8081端口映射到宿主机的8081端口, #使用--link参数将其与java容器链接,使二者可以通信, #将D盘的/forDocker/php-app1目录挂载到其/root/php-app1目录, 方便我们进行文件的传输 docker run -itd --name php-app1 -p 8081:8081 -v /root/forDocker/php-app1:/root/php-app1 --link java:java php #创建另外一个php容器来运行我们的第二个前端 服务器,其8082端口映射到宿主机的8082端口, #使用--link参数将其与java容器链接,使二者可以通信, #将D盘的/forDocker/php-app2目录挂载到其/root/php-app2目录, 方便我们进行文件的传输 docker run -itd --name php-app2 -p 8082:8082 -v /root/forDocker/php-app2:/root/php-app2 --link java:java php 配置后端容器这里我用spring简单写了个添加用户的程序, 项目地址, 前后端都在项目中(前端在web文件夹中,用php写的), 如果你本地有java/mysql/php的开发环境, 可以配置一下项目后跑一次试试, 如果没有, 我们下面就要使用docker进行部署了. 首先针对我们的java后端程序, 我们要先进入mysql容器新建一个我们要使用的数据库, 使用命令docker exec -it mysql mysql -uroot -p123456进入mysql后, 使用命令create database test;创建名为test的数据库.然后我们需要知道mysql容器的ip地址, 使用命令docker inspect mysql|grep &#39;&quot;IPAddress&quot;:&#39;, 我们将查出来的IP地址(例如172.17.0.2)填入项目配置文件src/main/resources/application.yml中的spring &gt; datasource &gt; url配置项中，需加协议头和在后面指出数据库(如jdbc:mysql://172.17.0.2/test)。 接下来我们要将spring项目打包，这里使用maven构建工具, 在项目根文件夹下使用命令mvn package -D skipTests进行打包处理, 得到target/test-0.0.1-SNAPSHOT.jar文件, 将其放到/root/forDocker/java下, 运行命令docker exec -d java java -jar /root/java/test-0.0.1-SNAPSHOT.jar, 这样后台程序就在运行了. 配置前端容器然后我们需要在php容器中运行前端的页面, 首先我们使用命令docker inspect java|grep &#39;&quot;IPAddress&quot;:&#39;得到java容器的ip地址(例如172.17.0.3), 然后使用命令docker inspect php-app1|grep &#39;&quot;IPAddress&quot;:&#39;和docker inspect php-app2|grep &#39;&quot;IPAddress&quot;:&#39;分别得到两个php容器的ip地址(例如172.17.0.4和172.17.0.5), 然后我们修改web/index.php文件:在&lt;h3&gt;添加一个用户&lt;/h3&gt;上方添加&lt;h1&gt;这是php-app1&lt;/h1&gt;然后将所有的http://localhost:8080都替换为http://172.17.0.3:8080(这是java容器的地址)共两处, 成功后将其保存并复制到/root/forDocker/php-app1目录下,然后继续修改,将&lt;h1&gt;这是php-app1&lt;/h1&gt;修改为&lt;h1&gt;这是php-app2&lt;/h1&gt;, 然后保存并复制到/root/forDocker/php-app2 接下来我们运行两个容器的前端脚本, 分别使用命令docker exec -d php-app1 php -S 172.17.0.4:8081 /root/php-app1/index.php和docker exec -d php-app2 php -S 172.17.0.5:8082 /root/php-app2/index.php后,我们分别访问宿主机地址的8081和8082端口, 都可以看到已经出现了相应的页面,而且已经可以进行用户的添加操作. 负载均衡其实到这里你已经对docker的操作有了一定认知了, 下面我们再进行一个简单的配置, 进行一下负载均衡(当然了,这里两个前端共用一个后台, 所以并没有多大的意义, 只是对于前端的一个分流而已):这里的负载均衡软件我使用的是haproxy, 不仅完全免费而且在负载均衡方案中也是很靠谱的一个选择, 有兴趣的可以去深入了解一下haproxy.cfg配置文件（这里haproxy并不是重点，所以就不细说了，直接贴出配置）: global log 127.0.0.1 local0 maxconn 4096 chroot /usr/local/sbin daemon nbproc 4 pidfile /usr/local/sbin/haproxy.pid defaults log 127.0.0.1 local3 mode http option dontlognull retries 2 maxconn 2000 balance roundrobin timeout connect 5000ms timeout client 50000ms timeout server 50000ms listen php_proxy bind *:8083 stats enable stats uri /haproxy-stats server php-app1 php-app1:8081 check inter 2000 rise 2 fall 5 server php-app2 php-app2:8082 check inter 2000 rise 2 fall 5 我们将该文件保存到/root/forDocker/haproxy目录中, 然后运行 docker run -itd --name haproxy -p 8083:8083 -v /root/forDocker/haproxy:/usr/local/etc/haproxy --link php-app1:php-app1 --link php-app2:php-app2 haproxy 如果成功的话, 那么这时你访问宿主机8083端口并不停的刷新页面,会出现php-app1和php-app2页面轮流出现的情况(因为我们在配置文件里选择的负载均衡策略是roundrobin,即简单的轮询). 构建镜像并推送到Docker Hub我们可以登录我们的docker hub账号, 使用docker login命令进行登录操作后即可将本地的容器打包成镜像后推送到dockerHub进行管理. 在推送之前, 我们需要先将容器构建成镜像, 这里以我们之前创建的java容器为例: 使用docker commit java java:java-test命令进行构建, 现在我们使用docker images命令查看本地的所有镜像会发现多了一个仓库名为java,标签名为java-test的镜像, 类似: REPOSITORY TAG IMAGE ID CREATED SIZE java java-test 6525b1d89a4e 12 minutes ago 643 MB 登录dockerHub后我们直接进行推送试试, docker push java, docker的守护进程提示error: Error response from daemon: You cannot push a &quot;root&quot; repository. Please rename your repository to docker.io/&lt;user&gt;/&lt;repo&gt; (ex: docker.io/yourusername/java) 这是因为我们直接推送的话(此时没有打tag也没有注明用户名), Docker会认为这是一个root仓库。root仓库是由Docker公司的团队管理的, 所以拒绝了我们的推送请求. 现在我们加上用户名再试试docker push yourusername/java, 结果提示我们: The push refers to a repository [docker.io/yourusername/java] An image does not exist locally with the tag: docker.io/yourusername/java 提示信息显示本地并没有标上docker.io/yourusername/javatag的镜像, 这是因为之前我们commit进行构建的时候没加上我们的我自己的用户名, 这样推的话这个镜像的repo是java而不是yourusername/java, 所以我们需要再打一次tag将repo改为yourusername/java: docker tag java:java-test yourusername/java:java-test, 这样再使用docker push yourusername/java就可以了, 所以你知道了最好就是在构建的时候就加上自己的用户名, 这样不用二次打tag就能推送了. 推送完成后就可以在你的dockerHub页面看到相关的镜像了. 注:打tag的时候如果不标明的话默认是lastest, rmi删除的时候默认也是lastest, 所以如果你的tag名并不是lastest而在rmi的时候不手动注明tag的话, docker会报错 赘述windows下disk image冲突有时我们修改了docker设置中disk image location的位置, 后来docker又因为崩溃被我们重置了, 重置后重启docker我们会发现原来的镜像都没有了, 我们修改disk image location到之前的位置也无法成功, 因为在现在的docker设置下(image默认存放在C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks文件夹)有一个MobyLinuxVM.vhdx, 原来我们修改的后保存的也有一个MobyLinuxVM.vhdx, 两个重名文件而且无法融合在一起, docker不知道如何去处理, 这样的情况下我们可以先退出docker, 然后将默认存放文件夹(C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks)下的MobyLinuxVM.vhdx删除, 再将之前修改位置的MobyLinuxVM.vhdx移动到默认文件夹下, 再启动docker, 就可以继续使用原来的image了, 你也可以重新修改 disk image location的位置]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网中实现免费上网的方法（2）]]></title>
    <url>%2Fpost%2FHow2AccessInternetFreelyInCampusNetwork-2.html</url>
    <content type="text"><![CDATA[该方法需要拥有校内服务器,且该服务器能正常访问外网. 原理很简单,就是访问不需要花钱的内网,然后将流量全部发到校内服务器上,让该服务器做代理进行请求转发. 该方法不讨论ipv6,因为在校园网有v6地址你就已经可以免费上网了. 代理服务器设置google搜索关键词 “shadowsocks 搭建 代理服务器” 本地配置 安装ss,配置代理服务器为校内的那台服务器地址即可,各项配置正确即可在能访问服务器的前提下访问到百度一类未被墙的网站. 这时浏览器能上网但是其他软件(像迅雷/百度网盘)没法上网怎么回事? 首先要提一下ss在本地实现代理的机制. 以Windows系统为例,设置里有“系统代理”的选项， 如果启用该选项,填上相应的配置,那么系统会自动在浏览器的设置里添加代理地址,可以这样查看, 这样的话，浏览器和其他的支持这种代理设置的软件就会在访问网络时将流量发到代理地址上,但是实际上,支持系统代理的软件非常少,一般来说只被浏览器普遍支持(所以你知道为什么直接启用ss后除了浏览器为什么其他软件都不走ss代理)。说明了这些,那么ss怎样实现在本地的代理就很容易明白了,你第一次运行ss,它会自动设置系统代理,代理地址为本地回环地址加上端口(默认为1080,可手动更改),那么浏览器的流量发到这个代理地址后,ss进行处理(根据代理规则出口流量与加密等),其实localhost:1080后面还跟了一个文件,它就是PAC 里面定义了至少一个JS函数,代理规则也都在里面,它通过JS函数来确定访问每个URL时所选用的合适代理,再将流量出口.知道了这些,你就应该明白,如果想要其他软件也用上系统代理,那么我们需要将这些软件的流量也转发到系统代理的地址上.在此我选择了proxifier来进行可选择性的代理.具体的使用请自己搜索. 但是此时你只能访问未被墙的网站,因为你的代理服务器在墙内. 二次代理想上google的解决办法当然就是二次代理了,有两种实现办法: 1.我先将流量发到自己的校内服务器上,再配置校内服务器,让它把流量发到墙外的代理服务器; 2.我直接在自己的PC上挂两个SS客户端,一个配墙外代理服务器(占1080端口),一个配校内服务器(占1081端口),流量都发到1080端口,利用pac进行选择性代理,然后利用ss客户段端设置中的Forward proxy添加一个本地1081端口的sock5代理,让1080端口的流量经过选择性代理后再全部发送到1081端口通过校内服务器出口到外网. 对于第一种方法,这里贴一个GitHub项目,它只要一条命令就可以实现二次代理,需要注意的是使用转发功能之前需要先切换到develop分支. 但是第一种方法在我的使用过程中体验并不好,第一,速度比较慢(可能是我那台服务器年纪比较大,计算处理能力较低,所以两次加密处理起来比较慢);第二,就是如果你的墙外代理服务器有多台就需要开多个端口;所以我放弃了法一,采用了法二,大概过程在上面已经说了,在此不赘述;对于proxifier的规则配置说两点,首先,default选项填1080端口;如果像我一样需要校园认证等操作不需要走代理(我这边这种过程是不能走代理,因为学校的校园网认证对于ip段做了跳转,如果是服务器一类的地址去访问则直接跳转到学校官网首页而非认证校园网登录页面)就新增加一条规则,将其action设为direct,其中的target hosts对于ip地址或网址进行匹配. 自动注册热键的ss客户端在github的shadowsocks-windows项目中下载的版本到目前为止是没有自动注册热键功能的,也就是你设置热键后每次重启电脑都要手动重新注册一下,对有热键需求的人来说肯定不方便,但是自动注册的功能已经被voq开发出了,GitHub项目在此.基于此,我用appveyor编译了一下, 生成了exe文件,appveyor项目在此,debug版比release版报错更详细,exe文件下载链接在artifacts里面,有需要的可以下载. 手机怎么办在此以IOS系统为例介绍,Android类似. 我使用的代理软件是Shadowrocket,现在app store上已经封停了,无法下载,可以使用各类助手,如果自己当前使用的助手平台上也被封了,可以下载我从pp助手获得的ipa文件-&gt;下载链接. 需要注意的是,代理规则应该是默认全部代理,对于一些特定的网址(如校园网的认证登录网址)应该进行匹配直连(direct). 而在shadowrocket的使用中,我发现使用FINAL进行默认的规则并不可行,如配置文件这样写: [Rule] IP-CIDR,127.0.0.1,DIRECT FINAL,PROXY 这表示我希望除了发到127.0.0.1回环地址的流量进行直连外,其他的全都进行代理;然而实际却并不可行,它对其他的流量并不会进行默认代理,不知道是不是软件本身的问题.在此我对域名后缀进行了关键字匹配,只要是使用域名访问的都进行转发(反正常用的域名后缀就那么多个),如DOMAIN-KEYWORD,com,PROXY,这样在访问所有.com域名后缀的站点时都走代理. 根据报错来设置代理规则例如比如我使用命令hexo s来启用heox本地服务器查看刚更新的内容效果时，访问localhost:4000站点网页打不开或者网页内容显示不完全，在这种情况下就要怀疑是代理的问题了，去查proxifier日志（建议在proxifier菜单栏中的log一栏里将file log选择为Errors only,这样就会把报错日志保存到本地文件中，查起来很方便），其中显示： [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) close, 335 bytes sent, 0 bytes received, lifetime 00:01 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) close, 0 bytes sent, 0 bytes received, lifetime 00:01 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) open through proxy 127.0.0.1:1080 SOCKS5 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) open through proxy 127.0.0.1:1080 SOCKS5 [12.01 17:15:10] chrome.exe *64 - [::1]:4000 (IPv6) warning : GetSockName() cannot work properly for the IPv4-IPv6 mixed connection. 一看发现是访问本地v6地址的4000端口出现的问题（为什么要走v6地址的原因未知），那就很简单了，我们把::1(代表v6的本地回环地址,同v4的127.0.0.1)加入到Localhost中,规则设为direct 一些注意点注意如果使用过程中有些需要使用网络的软件发生异常(如启动不响应),应该要去查proxifier日志,看看是不是代理的问题,如果没有产生日志应该将所有代理关掉再重启异常的软件试试. 赘述免费上网并不是目的, 也不是为了抖机灵, 整个过程只是对自己动手能力的锻炼而已. 注: 本文仅用于技术讨论与分享，严禁用于任何非法用途]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins入门笔记]]></title>
    <url>%2Fpost%2FIntroduction2Jenkins.html</url>
    <content type="text"><![CDATA[之前使用AppVeyor实现了提交源码到仓库然后自动拉取、生成静态页面并推送到Github Pages仓库的功能，但是我想在自己的服务器上再做一个同步更新的博客站点，因为最近在学node，所以先开始想着用node写一个监听的服务器，然后利用githook来自动拉取代码，搜了下相关的库，果然有一个叫github-webhook-handler，操作了半天，一直报node版本的错，怎么调都不行……默默放弃了，还是选择了Jenkins（之前一直担心Jenkins会额外消耗比较多的资源，因为自己的云服务器配置较低，使用后感觉自己多虑了）。在此记录一下简单的使用过程。 安装Jenkins安装Ubuntu 安装： $ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add - $ sudo echo &quot;deb http://pkg.jenkins.io/debian-stable binary/&quot; &gt; /etc/apt/sources.list.d/jenkins.list $ sudo apt update $ sudo apt install jenkins $ systemctl start jenkins 登录并创建账户安装后第一次使用需要手动获取密码来登录： $ cat /var/lib/jenkins/secrets/initialAdminPassword 得到密码密码后访问你服务器的8080端口（Jenkins默认8080端口，可以通过修改配置文件【Ubuntu下是/etc/default/jenkins】中的HTTP_PORT参数来指定），打开页面后提示你输入密码进行访问，将密码粘贴进去后进入操作界面：选择安装推荐的插件，或者你也可以自选：安装完成后会跳转到创建用户页面让你注册用户：“Save and Finish”后提示”Jenkins is ready！”之后如果要添加用户/修改密码可以在系统管理的管理用户里操作。 添加一个GitHub项目的构建创建自己github账户的access tokens关于生成personal access token的官网介绍。到你账户的settings -&gt; Developer settings -&gt; Personal access tokens，选择Generate new token,Token description可以填一些描述性文字，Select scopes里必选repo和admin:repo_hook两项（子内容全选），如下图：完成后点击Generate token，不出意外则跳转到生成成功页面，记住复制红框中生成的token： 添加github账号到jenkins为了能够使用我们的GitHub账号进行操作，我们需要在Jenkins系统设置中添加自己的github账户：系统管理 -&gt; 系统设置 -&gt; GitHub Servers ,如图：点击“Add GitHub Server”Name填自己的github用户名在Credentials选择Add一个Jenkins，其中Kind选择为Secret text，如图：将刚才生成的token粘贴进Secret栏中，点击add，添加成功。 完成后点击Test connection效果为： Credentials verified for user ****, rate limit: **** 给Jenkins添加权限编辑Jenkins配置文件(ubuntu下是/etc/default/jenkins),将 JENKINS_USER=$NAME 修改为 JENKINS_USER=&quot;root&quot; 保存退出后执行命令： $ chown -R root:root /var/lib/jenkins $ chown -R root:root /var/cache/jenkins $ chown -R root:root /var/log/jenkins $ service jenkins restart 即可。 添加一个Jenkins构建 在你的github项目里添加webhook:项目的settings中左边栏的webhooks,选择add webhook,Payload URL中填你的服务器地址(ip或域名)与jenkins端口再加上”/github-webhook”,如http://182.254.133.70:8080/github-webhook 点击jenkins左边栏中的”新建”，选择“构建一个自由风格的软件项目”，如图：点击”OK”，进入配置页面，源码管理选择Git, Repository URL:填上你项目的repo地址 Credentials:点击Add按钮添加一个Jenkins，Kind选择默认的Username with password将github的账号和密码填到相应的Username和Password中，点击Add完成添加。 构建触发器:选择GitHub hook trigger for GITScm polling,能够接收github在项目提交新的commit后推送的事件来自动触发构建 构建:选择添加自己需要的构建步骤，这里因为我需要的是自动拉取GitHub Pages库里的静态页面并部署到服务器上，所以我选择Execute shell，填上命令，如图： 保存后在左边面板上点击“立即构建”左下方Build History中结果前面的小球显示为蓝色则成功，为红则失败。 Docker安装方式我们也可以使用docker镜像来构建我们的jenkins应用: docker pull jenkins &amp;&amp; \ docker run -itd --name jenkins -p 8080:8080 -p 50000:50000 -v /home/forDocker/jenkins:/var/jenkins_home jenkins #50000端口是jenkins的slave管理端口, 如果你用不到也可以不映射 运行完了你会发现我们创建的容器并没有在运行, 我们用docker logs jenkins查看一下日志, 发现存在权限问题 touch: cannot touch ‘/var/jenkins_home/copy_reference_file.log’: Permission denied Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions? 这是因为在jenkins构建的过程中它在容器中新建了一个uid和gid都为1000的jenkins用户,从官方的dockerfile中我们可以看到.所以我们要将/home/forDocker/jenkins文件夹修改属主后, 容器里的jenkins用户才能够操作该文件夹: 我们使用chown -R 1000:1000 /home/forDocker/jenkins, 然后重新启动jenkins容器docker start jenkins, 等容器里的jenkins应用启动后我们访问服务器的8080端口即可, 初始密码文件在/home/forDocker/jenkins/secrets/initialAdminPassword文件中, 接下来的操作与之前的一样了. 赘述如果你遇到了github server,webhook以及构建项目等配置都正确,但是构建中的”GitHub hook trigger for GITScm polling”触发器选项一直提示你webhook有问题,那么你应该考虑删掉这个构建项目,重新配置一遍试试.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于DNS的一些知识整理]]></title>
    <url>%2Fpost%2FSomeKnowledgePointsAboutDNS.html</url>
    <content type="text"><![CDATA[今天在腾讯云上对于域名的解析存在点问题，在腾讯云上发了条工单并查了下DNS解析相关的内容。虽说专业网络课程上有讲到过，但只是简单提及，这里作为补充。 2018-10-02更新：之前准备考研看了王道的CS考研复习指导，感觉计算机网络一书中关于DNS部分的内容整理得挺详细的，所以添加进来更新一下。 基础概念DNS系统采用C/S模型，其协议运行在UDP之上，使用53端口。概念上可以将DNS分为三个部分：层次域名系统、域名服务器和解析器。 层次域名系统因特网使用层次树状结构的命名方法。 顶级域名（Top Level Domain，TLD）有三类： 国家顶级域名，nTLD，国家和某些地区的域名，如，.cn表示中国，.us表示美国，.hk表示中国香港特区； 通用顶级域名，gTLD，常见的有.com（公司企业）， .net(网络服务机构)，.org（非盈利组织）、.gov（美国政府部门）等； 基础结构余名，这个顶级域名只有一个，即arpa，用于反向解析域名，因此又称为反向域名； 国家顶级域名下注册的二级域名均由该国家自行确定。 在域名系统中，每个域分别由不同的组织进行管理，每个组织都可以将它的域再分成一定的子域并将这些子域委托给其他组织去管理。如，管理cn域的中国将edu.cn子域授权给中国教育和科研计算机网CERNET来管理。 域名服务器因特网的域名系统被设计为一个联机分布式的数据库系统，并采用了C/S模型。域名到IP地址的解析是由运行在域名服务器上的程序完成的，一个服务器所负责管辖的范围称为区（不是以“域“为单位），各单位根据具体情况来划分自己管辖范围的区，但在一个区中的所有节点必须是能够连通的，每个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。每一个域名服务器不但能够进行一些域名到IP地址的解析，而且必须具有连向其他域名服务器的信息。当自己不能域名到IP地址的转换时，能够知道到什么地方去找别的域名服务器。 DNS使用了大量的域名服务器，它们以层次方式组织。没有一台域名服务器具有因特网上所有主机的映射，相反，该映射分布在所有的DNS服务器上。采用分布式设计的DNS系统是一个在因特网上实现分布式数据库的精彩范例。 主要有四种类型的域名服务器：👇 1. 根域名服务器根域名服务器是最高层次的域名服务器，所有的根域名服务器都知道所有的顶级域名服务器的IP地址，根域名服务器也是最重要的域名服务器，不管是哪一个本地域名服务器，若要对因特网上任何一个域名进行解析，只要自己无法解析，就首先求助于根域名服务器。因特网上有着13个根域名服务器，尽管我们将这13个根域名服务器中的每个都视为单个的服务器，但是每台”服务器“都实际上是冗余服务器的集群，以提供安全性和可靠性。需要注意的是，根域名服务器用来管辖顶级域（如.com），通常它并不直接将待查询的域名直接转换为IP地址，而是告诉本地域名服务器下一步应该找哪一个顶级域名服务器进行查询。 2. 顶级域名服务器这些顶级域名服务器负责管理在该顶级域名服务器注册的所有二级域名。 当收到DNS查询请求时，就给出相应的回答（可能是最后的结果，也可能下一步应当查找的域名服务器的IP地址）。 3. 授权域名服务器（权限域名服务器）每一个主机都必须授权域名服务器处登记。为了更加可靠的工作，一个主机最好至少有两个授权域名服务器。实际上，许多域名服务器都同时充当着本地域名服务器和授权域名服务器。授权域名服务器总是能够将其管辖的主机名转换为该主机的IP地址。 4. 本地域名服务器本地域名服务器对域名系统非常重要，每一个因特网服务提供者ISP，或一个大学，甚至一个大学里的系，都可以拥有一个本丢域名服务器，当一个主机发出DNS查询请求时，这个查询请求报文就发送给该主机的本地域名服务器。事实上，我们在Windows系统中配置”本地连接“时，就需要填写DNS服务器地址，这个地址就是本地DNS域名服务器地址。 域名解析过程域名解析是指把域名映射为IP地址或把IP地址映射为域名的过程。前者成为正向解析，后者称为反向解析。 域名解析有两种方式：递归查询和递归与迭代的相结合的查询。 递归查询：多次的查询请求在DNS服务器之间进行，客户机得到的是解析结果。 迭代查询：客户机得到的是下一个DNS的地址，需要客户机不断的发出查询请求，最终得到结果。 常用查询方式常用递归与迭代相结合的查询方式，该方式分为两个部分：👇 1.主机向本地域名服务器的查询采用的是递归查询也就是说，如果本地主机所查询的本地服务器不知道查被查询域名的IP地址，那么本地域名服务器就以DNS客户的身份，向根域名服务器继续发送查询请求报文（即替该主机继续查询），而不是让该主机自己进行下一步的查询。在这种情况下，本地域名服务器只需要向根域名服务器查询一次，后面的几次查询都是递归的在其他几个域名服务器之间进行的。本地域名服务器最终从根域名服务器得到了所需的IP地址，最后将查询结果告诉发起查询的本地主机。 2.本地域名服务器向根域名服务器的查询采用迭代查询当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器：“你下一步应该向哪一个顶级域名服务器进行查询”。然后让本地域名服务器向这个顶级域名服务器发起后续的查询。同样，顶级域名服务器收到查询报文后，要么给出所要查询的IP地址，要么告诉本地域名服务器下一步应该向哪一个权限域名服务器查询……如此下去，最后本地域名服务器知道了所要解析的域名的IP地址，将结果返回给发起查询的本地主机。 基本解析过程对于域名解析的过程我们都知道，我在网上找了一个比较详细的过程并进行了简单修改（原文在此）：当你在浏览器输入一个域名地址回车请求后， 第 1 步：浏览器会检查缓存中有没有这个域名的IP地址映射，如果有该解析过程将会结束。浏览器缓存域名也是有限制的，包括缓存的时间、大小，可以通过TTL属性来设置。（各大浏览器都默认开启DNS缓存，用户可以进行操作，详细过程参考该博文：浏览器的DNS缓存） 第2步：如果浏览器缓存中没有，操作系统会先检查自己本地的hosts文件（Windows下是C:\Windows\System32\drivers\etc\hosts，Linux下是/etc/hosts）是否有这个地址映射，如果有，就先调用，完成解析。 第 3 步：如果hosts里没有这个域名的映射，则查找本地DNS缓存中是否有这个地址映射，如果有则直接返回，完成解析。 第 4 步：如果hosts与本地DNS缓存都没有相应的网址映射关系，系统首先会找本地DNS服务器进行查询，此服务器收到查询时，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 第 5 步：如果要查询的域名，不由本地DNS进行区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 第 6 步：如果本地DNS的区域文件与缓存解析都失效，则根据本地DNS的设置（是否设置转发器）进行查询，如果未用转发模式（也就是使用递归查询模式），本地DNS就把请求发至13台根DNS，根DNS收到请求后会判断这个顶级域名(例如.com，下面以.com为例)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP（这里注意，根DNS并不缓存地址映射，它们直接返回管辖相应域的DNS的ip地址）。本地DNS收到IP信息后，将会联系负责.cn域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS地址给本地DNS。当本地DNS收到这个地址后，就会找该地址的服务器，重复上面的动作，进行查询，直至找到域名对应的主机。 第 7 步：如果用的是转发模式（也就是使用迭代查询模式），此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。 我通过工单了解到了什么关于添加自己的域名解析，比如我在腾讯云的域名解析控制台添加了自己safeandsound.cn域名的一条A记录，那么腾讯到底做了什么？ 用户在提交自己域名的一条解析后，域名商那边会将新增/修改的域名解析记录提交到自己的域名服务器，并将TTL设置为你选定的值。 拥有提交记录到根域名服务器的机构是需要事先通过ICANN官方认证的。 关于TTL该值与ip协议中的TTL并非一个概念，但是有相同之处，它是域名解析记录在DNS服务器的生存时间（当DNS服务器收到域名解析请求时，会先检查本地是否有记录，有记录则直接返回，无则递归向上请求解析；在获得解析记录后，这条记录会在该服务器上保存一段时间，这个保留时间就是TTL值【单位为秒】，在超过这个值后，服务器会丢弃这条记录重新主动请求）。关于TTL值的设置，一般默认是600，也就是十分钟，如果页面不经常变动的话可以设置的长一点，这样DNS就不会经常去请求解析直接利用缓存，可以让服务更稳定（提升的程度有限）不建议超过24小时，否则更新后的解析记录同步到全球DNS的时间会比较长；如果要求各地DNS能更快的得到更新的记录那就将TTL设置的小一点,建议先将TTL值设小，等估计各地的DNS更新完后再将TTL改大些。一般推荐的值是600~86400，即10分钟到24小时。]]></content>
      <tags>
        <tag>Network</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Appveyor入门笔记]]></title>
    <url>%2Fpost%2FIntroduction2Appveyor.html</url>
    <content type="text"><![CDATA[之前对于备份hexo搭建的博客源码采用的方式是在Github Pages对应的库中新开一个分支，每当源码有重要的客制化变更时都推一次到备份的分支上，但是这样并不是一个好办法，因为，但是新开一个库专门存源码的话又不想每一次更新时推两次（一次到源码库，一次到GitHub Pages的静态页面库）怎么办？答案就是使用CI。我们直接推源码的更新到源码库，然后让CI工具自动拉取源码生成静态页面后再自动推到静态页面库中。如题，这里采用的CI工具是appveyor。 appveyor简介appveyor的特点就是操作全部上云, 与用户平台无关, 你可以在采用本地appveyor.yml配置文件(代码托管方[如github]必须提供了相关API)或在appveyor项目里配置两种方式对你的CI项目进行配置, 项目会运行在官方预安装了很多软件的虚拟机中; 项目按照你的配置build完成后会将结果以邮件的方式反馈给你(有时延迟比较大, 需要等个二三十分钟). 反正我个人感觉非常好用, 非常非常好用, 嗯!具体的请自己去了解吧. 基本使用首先当然是注册账号了, 用github账号登录就好了(反正后面也是要绑定的). 创建一个项目这里以GitHub上的项目为例讲一下push commit到GitHub仓库后appveyor自动拉取项目并进行操作的过程: 登录上去后点NEW PROJECT添加项目; 在GitHub账户里选择项目, 点击ADD 在GitHub仓库里添加appveyor.yml配置文件, 因为配置的选项有很多, 具体的写法请查看appveyor文档, 这里只举一个很简单的例子:appveyor自动拉取github项目后, 在build之前列一下当前目录里的文件, 然后在build过程中只打印一句”this is just a test”.我们在GitHub仓库的根目录里添加一个文件, 取名为appveyor.yml, 然后在里面输入: before_build: - dir build_script: - echo &quot;this is just a test&quot; 然后保存, commit即可.随后我们到appveyor项目界面可以看到已经自动在运行了, console里会打印出如下类似内容 Build started git clone -q --branch=master https://github.com/WenjayDu/test.git C:\projects\test git checkout -qf 65d495665aae3ead5e4ddc06c88a67246847b621 dir Volume in drive C is Windows Volume Serial Number is D4AB-4044 Directory of C:\projects\test 12/12/2017 01:54 AM &lt;DIR&gt; . 12/12/2017 01:54 AM &lt;DIR&gt; .. 12/12/2017 01:54 AM 68 appveyor.yml 1 File(s) 68 bytes 2 Dir(s) 40, 973, 512, 704 bytes free echo &quot;this is just a test&quot; &quot;this is just a test&quot; Discovering tests...OK Build success 这就算是一个成功的例子了, 整个配置文件很简单, 如果需要比较复杂的操作可以参考appveyor-yml的参考文档, 具体的也可以查appveyor docs 基本流程整个过程是这样的: 你添加自己的GitHub仓库后, appveyor会自动到该GitHub仓库的设置里添加一个webhook(触发事件默认为Pull request和Push), 与当前的appveyor项目绑定, 所以每当你有新的推送时, GitHub会自动触发该webhook; appveyor项目被触发后会先调用GitHub官方的api查看该repo根目录下是否有appveyor.yml配置文件, 如果有就先只下载该文件对项目环境进行配置, 然后clone该repo, 再进行项目的整个build;如果没有配置文件则默认使用msbuild, 即UI配置, 这需要你预先在项目设置里进行配置. 什么?UI配置和yaml配置能不能共存?你问这个啊, 官方文档里写的很清楚了:It’s worth noticing that both appveyor.yml and UI configuration are mutually exclusive. It’s always either YAML or UI - the settings from each are not merged. If you have appveyor.yml in your repo it will override all settings made on the UI unless explicitly disabled by Ignore appveyor.yml. There are few exceptions, which are:1.Environment variables. Variables defined on UI are getting merged with those ones defined in appveyor.yml. Variable values with the same names are getting overridden with values from UI.2.Notification settings defined on UI are getting merged with those ones defined in appveyor.yml.3.Build version format is taken from UI if it is not set in appveyor.yml. 简而言之就是, 二者不能共存(不能合并), yaml配置文件的优先级更高, 如果有yaml配置则UI配置会全部失效(除非你在UI配置里选择忽略yaml配置文件), 当然, 除了最后列出的三点例外(环境变量[两者都有则合并], 提醒[两者都有则合并]和build版本[yaml没写而UI配置了则用UI的]). 要推送artifacts怎么办如果你需要在build完成之后将成功生成的产品发布/推送到你的GitHub仓库的话, 那就还需要进一步设置.在官方文档的Git push from build也说明了, 这里我以hexo博客为例进行具体说明, 我创建了hexo源码库与静态页面库两个repo(当然你也可以都放在一个repo中, 分成两个branch就可以了), 将源码和博客站点分开, 想要的效果是: 我主动推送更新到源码库中之后, appveyor自动拉取帮我生成静态页面然后推到静态页面库中, 这样博客站点就自动更新了, 这个过程大概是: hexo源码库更新后触发webhook; appveyor项目自动拉取appveyor.yml对环境进行配置, 然后clone项目; 在install部分用npm安装一系列依赖, 在build_script部分生成静态页面, 在on_success部分定义生成成功后进行推送的步骤; build其实主要是hexo g来生成静态页面, 也可能你需要后期处理一下(如压缩代码), 完成build后会将之前定义的artifacts文件夹中的内容(在这里是public文件夹, 即静态页面生成后存放的文件夹)推送到静态页面库中, 大功告成 其实, 整个过程和上面的基本流程相比也就是多了一个推送的步骤而已, 想想, 如果你需要commit到仓库, 除了登录到GitHub还能用什么办法?那就是OAuth token了, 也就是personal access token, 能够通过GitHub认证, 拿到用户完全的操作权限. 具体的操作如下: 1.生成personal access token基本操作, 不会的请参考官方文档保存生成的token,等会用 2.加密生成的token到Appveyor加密页面对刚刚生成的token进行加密(加密后的token才能放心的写到appveyor.yml配置文件里)对于这个Encrypt data, 官方文档里也有说明在此.保存加密的token,等会用 3.配置文件这里我也是在网上复制的配置文件,反正比我写的条理多了 clone_depth: 1 environment: access_token: secure: [填上刚刚加密后的token] install: - node --version - npm --version - npm install - npm install hexo-cli -g build_script: - hexo g artifacts: - path: public on_success: - git config --global credential.helper store - ps: Add-Content &quot;$env:USERPROFILE\.git-credentials&quot; &quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot; - git config --global user.email &quot;%GIT_USER_EMAIL%&quot; - git config --global user.name &quot;%GIT_USER_NAME%&quot; - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\static-site - cd %TEMP%\static-site - del * /f /q - for /d %%p IN (*) do rmdir &quot;%%p&quot; /s /q - SETLOCAL EnableDelayedExpansion &amp; robocopy &quot;%APPVEYOR_BUILD_FOLDER%\public&quot; &quot;%TEMP%\static-site&quot; /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1)) - git add -A - if &quot;%APPVEYOR_REPO_BRANCH%&quot;==&quot;master&quot; if not defined APPVEYOR_PULL_REQUEST_NUMBER (git diff --quiet --exit-code --cached || git commit -m &quot;Update Static Site&quot; &amp;&amp; git push origin %TARGET_BRANCH% &amp;&amp; appveyor AddMessage &quot;Static Site Updated&quot;) 然后在UI设置的Environment里,添加四个环境变量:STATIC_SITE_REPO(是要提交到的repo地址,也就是我静态页面库的地址)，TARGET_BRANCH(repo分支,填master即可)，GIT_USER_EMAIL(GitHub账户的邮箱)和GIT_USER_NAME(GitHub账号用户名),贴上我的供参考:当然, 你也可以直接在配置文件里修改, 直接将环境变量改成相应的值即可. 这样再推送就可以看到appveyor自动进行build了. 赘述Artifacts的保存时间值得一提的是, 自2018年6月17号起, appveyor上项目(不论私有或是公有)的artifacts保留的时间为6个月, 超过六个月则会被永久删除, 详情请见官方文档 👉 Artifacts retention policy “hexo博客自动生成”的npm版本问题使用appveyor自动生成hexo博客静态页面期间遇到了比较诡异的情况:提交后有时候会build成功, 有时候会build失败, 有时候失败了再build一次就成功了, 有时候失败了再build好几次成功不了, 完全是概率问题.以下是错误日志: npm ERR! Windows_NT 6.3.9600 npm ERR! argv &quot;C:\\Program Files (x86)\\nodejs\\node.exe&quot; &quot;C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; npm ERR! node v4.8.4 npm ERR! npm v2.15.11 npm ERR! path C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043 npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall rename npm ERR! Error: EPERM: operation not permitted, rename &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043&#39; -&gt; &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz&#39; npm ERR! at Error (native) npm ERR! { [Error: EPERM: operation not permitted, rename &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz.904991043&#39; -&gt; &#39;C:\Users\appveyor\AppData\Roaming\npm-cache\lodash\4.17.4\package.tgz&#39;] npm ERR! errno: -4048, npm ERR! code: &#39;EPERM&#39;, npm ERR! syscall: &#39;rename&#39;, npm ERR! path: &#39;C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.4\\package.tgz.904991043&#39;, npm ERR! dest: &#39;C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.4\\package.tgz&#39;, npm ERR! parent: &#39;babel-traverse&#39; } npm ERR! npm ERR! Please try running this command again as root/Administrator. 看日志好像是权限的问题，Google了一下, 在appveyor官方的github账户中的该issue中提到了将npm版本安装为5.3即可:npm -g install npm@5.3，到底还是版本的问题 appveyor创建Git项目(非github)与GitHub文件下载的API调用相关问题如果创建project时选择的是Git, 即使用Clone URL的方式添加git repo来创建项目的话, 那么源项目中即便有appveyor.yml配置文件也无法使用, 其原因被我在appveyor官方github的一个issue中找到, 因为配置文件的工作原理是appveyor在build创建之前通过Github等托管方提供的API先将配置文件下载下来再自动对运行环境进行配置, 而是使用这个API是需要access token的, 当然, 你可能要问”为什么不直接去下appveyor.yml文件?而非要使用API呢?像octotree一类的插件不就是可以直接下载么?”可是octotree的项目中也说了它也是用的api:Octotree uses GitHub API to retrieve repository metadata. By default, it makes unauthenticated requests to the GitHub API. However, there are two situations when requests must be authenticated:1.You access a private repository2.You exceed the rate limit of unauthenticated requestsWhen that happens, Octotree will ask for your GitHub personal access token. If you don’t already have one, create one, then copy and paste it into the textbox. Note that the minimal scopes that should be granted are public_repo and repo (if you need access to private repositories). 关于API调用速率限制的github官方说明, 简而言之, 未登录则对ip进行限制, 每小时60次;使用登录认证或OAuth token则对用户进行限制, 每小时5000次;所以如果appveyor要使用API的话肯定是使用认证的方式.再回到git方式创建的项目无法使用配置文件的问题上, 你可能要问”既然我在appveyor的账户里填了我的github personal access token, 为什么官方不在这个创建方式上做些判断, 检测到是GitHub/BitBucket等的项目就带上token去拉”, 这……你还不如登录自己的GitHub账号直接fork这个项目, 然后在appveyor里选择github方式创建项目, 万事大吉.总而言之, 如果使用git方式创建项目的话, 就只能使用GUI的方式来配置项目, 不能在git仓库里使用配置文件的方式.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派食用指南]]></title>
    <url>%2Fpost%2FHow2EatRaspberry.html</url>
    <content type="text"><![CDATA[对于入手树莓派 是蓄谋已久🙃现在如愿以偿。 本文整理了使用过程中遇到的一些问题。 盒子在实际使用之前建议买一个盒子, 因为树莓派本身只有一块板子, 如果板子发生弯曲的话里面的印制线路很可能会被折断(树莓派的线路是多层压制在一起的,像一块三明治一样), 而且很多焊点和组件很可能因为你的操作不当(比如把它放在铁质桌子这种导体上)而发生短路, 有了盒子也就多了一层保护. 安装系统 下载镜像raspberryPi官方的镜像集合在这里，kali的镜像在这里 安装安装系统的网上教程很多，我使用的是Raspbian系统,用rufus直接烧录进去tf卡里；当然也可以将镜像烧录到U盘，然后开机进bios从U盘安装系统，这种方法需要使用显示器和有线键盘。 指示灯简介树莓派上除了rj45网口的led指示灯（speed led【黄灯】：长亮代表100M或者更高速的网卡，不亮代表10M网卡，但有些千兆网卡的灯以颜色区分，不亮代表10M/100M，黄色常亮代表1000M；active led【绿灯】：灯灭代表未连接，长亮代表已连接上但无数据收发，闪烁代表有数据收发）外在电源接口处还有两个状态灯，一个红灯一个绿灯，红灯是电源灯，接通后常亮，如果闪烁说明当前电源不稳定；绿灯是读写指示灯，在存储卡发生数据读写时闪烁，否则熄灭，以此来判断当前是否发生数据读写。 连接注: 系统默认ssh服务不随机自启动，我们将tf卡插在笔记本上，在显示出的boot分区中创建一个名为ssh的空白文件来触发ssh服务的开启 网线直连笔记本我采用的方式是笔记本网线直连树莓派，然后将笔记本无线网卡的网络共享给以太网卡，这样不仅树莓派能够上网，我也能ssh到树莓派。 网线连接好、树莓派主板加电启动之后，我们使用arp命令扫描一下本地的mac与ip映射表，并抓取出树莓派的地址映射： C:\Users\jay&gt; arp -a |findstr &quot;b8-27-eb&quot; 192.168.137.232 b8-27-eb-8e-9e-fe 静态 “b8-27-eb”是树莓派网卡mac地址的前三个字节，也就是树莓派制造商的OUI（组织唯一识别符），从IEEE官方提供的OUI列表，我们可以查询到。 获取到ip后我们使用ssh连接，默认用户名为pi，密码为raspberry。 注: 如果遇到笔记本能连接树莓派但是树莓派无法上网的情况(即仅本地局域网可访问), 请将笔记本无线网卡属性里的共享先取消, 保存后, 再重新开启共享, 如果还不行的话就先取消共享再禁用笔记本无线网卡, 再启用无线网卡并开启共享. wifi自动连接如果第一次启动的时候手边没有网线，但是有路由器, 或者手机可以开热点，可以配置Wi-Fi连接。 和第一次开机触发SSH服务的方法一样，将tf卡插在笔记本上，在显示出的boot分区中建立名为wpa_supplicant.conf的文件，里面添加如下内容： country=GB ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;Wi-Fi名称&quot; psk=&quot;Wi-Fi密码&quot; priority=填写数字，数字越大代表优先级越高 } 添加的配置会在系统的/etc/wpa_supplicant/wpa_supplicant.conf配置文件里. 树莓派主板加电，稍等几分钟，就会连上Wi-Fi了。 注:请注意wifi的频率, 树莓派只有2018年发布的3b+版本才支持5Ghz的频带, 之前的都只支持2.4G, 如果你的wifi是5G, 那么老版的树莓派是识别不了的. 连接显示器遇到的问题我有一次在连接显示器的时候突然黑屏了，在网上搜索一下后得知需要修改boot目录下的config.txt文件，将hdmi_safe=1的注释取消掉。可以参考该教程解决使用显示器的问题 使用root账号root账号默认未启用，如果要使用root账号，我们需要: #设置root账号密码 sudo passwd root #启用root账号 sudo passwd --unlock root 如非必要不建议使用，毕竟账号pi使用sudo无需输入命令，方便的同时也更安全。 网络手动连接wifi首先需要开启无线网卡, 使用命令iw dev|grep Interface查看无线网卡名称, 一般为wlan0然后ifconfig查看该网卡是否已经启动, 如果没有显示无线网卡的话使用ifconfig 无线网卡名 up命令启动网卡 使用iw 无线网卡名 scan |grep SSID查看板子能够扫描到的wifi名称, 可以省略grep命令来查看热点的详细信息 如果我们的热点没有加密的话, 那么直接使用命令iw wlan0 connect SSID 如果热点是使用WEP加密方式的话, 可以使用命令iw wlan0 connect SSID key 0:[密码] 如果热点是使用WPA或WPA2加密的, 那么可以直接编辑/etc/wpa_supplicant/wpa_supplicant.conf文件，在后面追加 network={ ssid=&quot;Wi-Fi名称&quot; psk=&quot;Wi-Fi密码&quot; priority=填写数字，数字越大代表优先级越高 } #如果有多个可选wifi可以继续添加 network={ ssid=&quot;第二个Wi-Fi的名称&quot; psk=&quot;第二个Wi-Fi的密码&quot; priority=填写数字，数字越大代表优先级越高 } network={ ssid=&quot;第三个Wi-Fi的名称&quot; psk=&quot;第三个Wi-Fi的密码&quot; priority=这里填写数字，数字越大代表优先级越高 } #以此类推 保存设置后, 使用命令wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf进行启用, 会按照配置文件中的优先级进行顺序选择(如果该热点搜索得到的话). 连接成功的话会出现如下log: Successfully initialized wpa_supplicant p2p-dev-wlan0: CTRL-EVENT-REGDOM-CHANGE init=USER type=COUNTRY alpha2=GB wlan0: Trying to associate with e2:ac:cb:bd:d1:37 (SSID=&#39;jay&#39; freq=2437 MHz) wlan0: Associated with e2:ac:cb:bd:d1:37 wlan0: WPA: Key negotiation completed with e2:ac:cb:bd:d1:37 [PTK=CCMP GTK=CCMP] wlan0: CTRL-EVENT-CONNECTED - Connection to e2:ac:cb:bd:d1:37 completed [id=0 id_str=] p2p-dev-wlan0: CTRL-EVENT-REGDOM-CHANGE init=CORE type=WORLD 如果出现ctrl_iface exists and seems to be in use - cannot override it的报错, 说明已经有wpa_supplicant的进程存在了, 我们可以使用netstat -anp|grep supplicant查出相应的pid杀掉即可. 静态ip有些时候你拔下网线后重新插回去，会导致树莓派重新获取ip，遇到如下的尴尬情况 C:\Users\jay&gt; arp -a |findstr &quot;b8-27-eb&quot; 192.168.137.232 b8-27-eb-8e-9e-fe 静态 192.168.137.240 b8-27-eb-8e-9e-fe 静态 出现了两个地址映射,这是因为重新插回去后树莓派被分配了一个新的ip,而之前的地址映射还存在arp地址映射表中,所以就出现了两个结果.我们可以编辑dhcpcd.conf配置文件来主动获取静态ip sudo vi /etc/dhcpcd.conf 在文件中添加（如果嫌弄乱文件可以搜索”profile static_eth0”这个pattern然后在后面进行修改） #根据自己的实际情况来，以下只是我的配置，仅供参考 interface eth0 static ip_address=192.168.137.232/24 static routers=192.168.137.1 static domain_name_servers=192.168.137.1 完成后重启network服务即可 换源国外源速度相对较慢, 建议换成国内的, 推荐中科大和清华的源 👇 中科大Raspberrypi源使用帮助 清华Raspbian镜像使用帮助]]></content>
      <tags>
        <tag>Hardware</tag>
        <tag>RaspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网中实现免费上网的方法（1）]]></title>
    <url>%2Fpost%2FHow2AccessInternetFreelyInCampusNetwork-1.html</url>
    <content type="text"><![CDATA[这个学期我们学校的校园网开始了流（变）量（相）计（卷）费（钱）的策略，不过运营商可以进行代理，所以有的同学使用指定的手机套餐就可以不限流量。但是我的手机卡并不是校园卡，所以使用的还是校园网的单独计费策略，当然套餐里的这点流量对于喜欢看点剧的我肯定是不够用的🙂。平时因为学校机房中有几台服务器在我手里，使用校内流量走代理免费上网完全是没问题的，但是国庆期间因为各种原因，校内服务器对外网络基本全部封闭了，所以代理是走不了了，可是剧还是要看的啊🙃，于是就有了这篇博客。 原理原理很简单，AP使用的是DHCP自动分配ip的策略，我们扫一遍本地网络中的机器，一般都会有在上网的PC，因为AP根据这台PC的mac分配给了它IP地址，而且这台PC登陆了校园网所以已经获取了访问外网的权限，也就是说这个PC的IP是可访问外网的，我们只要拿到它就行了。 因为是DHCP自动分配，所以我们只要拿到它的mac地址就能拿到IP（这种扫描器有很多，nmap也可以），我们先把网断掉，然后到系统的设置里面将网卡的mac地址修改成与之前扫描到的PC一致（这样的修改只是修改了操作系统从网卡中读取并记录在系统中的mac地址的值，并非修改了烧录在网卡中的地址，所以与“mac地址不可修改的说法并不冲突”，当然了，修改烧录的地址也并非不可行，但是这种硬件操作的方法对用户的专业素质要求很高，因为复杂度高风险也大），然后重新启动网卡，连接到AP，查看自己获取到的IP是不是变得跟之前扫描的PC的ip一致，一致则说明欺骗成功，到登录的认证页面刷新查看，显示出来的登录用户应该是PC的主人。 在此只讨论方法，对步骤不进行详细说明。 问题值得一提的是，这种mac地址欺骗的方法得到的上网质量可能比较差，因为在AP看来从外网接收到的数据是一个目标的，但实际上是两台电脑在上网，所以数据包的分发会存在问题，可能就会导致服务掉线、下载文件走走停停之类的结果（我测试时使用了室友的mac地址，他的qq出现了掉线情况，我的迅雷下载时走时停），所以如果只是下载电影什么的还是可以的，放在那让它慢慢跑就可以了，但是打局游戏什么的就不要想了。 赘述当然了，上面只是测试下我想法的可行性，实验一下玩玩罢了，实际并没有这么做的必要，毕竟那么多同学是运营商免流的，需要下载大文件临时借个账号就可以了。 对于之前提到的服务器代理校内流量出去的问题，用pip装个影梭代理一下就可以了，就简单的使用上并没什么技术可言，网上之类的教程也很多，如果学校使用的是提供ipv6地址的网络（如教育网），那么校外的有ipv6地址的服务器也是可以的，因为现在校园网ipv6应该都是不计费的（不绝对，天知道你的学校为了安（赚）全（钱）会做出什么出格的事），流量可以直接出去。 在这过程中，我遇到的一个问题就是：服务器有v6地址，本地PC也有v6地址，两个都可以单独访问Google，但是PC走服务器代理的话就无法访问Google一类被墙掉的网站，服务器使用的是双栈代理，而且PC此时也可以访问六维一类的v6站点，说明v6流量是出的去的，对此我做了很多测试，但仍毫无头绪，如果有朋友知道其中的缘由，还望告知。 注: 本文仅用于技术讨论与分享，严禁用于任何非法用途]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于php下实现异步计划任务的一种方法]]></title>
    <url>%2Fpost%2FHow2ImplementAsynchronousScheduledTasksInPHP.html</url>
    <content type="text"><![CDATA[在一个网络管理系统的实现过程中需要完成这样一个功能，老师在上课时通过交互界面将该教室的网络关闭，课程结束后系统将自动将教室网络开放，这有两方面的要求，首先是计划任务的实现：下课后自动恢复网络，这里使用循环来检查任务执行情况，因为如果全部都写到操作系统的计划任务中那就太繁重了（当然也可以只写一个系统的计划任务，将它和数据库结合起来实现，这是我最后采用的方法）；二就是老师提交“关闭网络”的请求时应当异步处理，因为计划任务是死循环，如果不进行异步处理则页面将永远处于加载状态直到用户强制阻断或任务执行结束。 具体过程计划任务唯一化因为一堂课上可能会多次切换网络状态，所以必须让当前教室的网络恢复计划任务唯一化，新的计划任务应当取代旧的，这里我使用文件flag的方式来实现：用$_SESSION[‘ID’]加上当前时间戳的方式来命名flag文件，$_SESSION[‘ID’]为用户ID，由于老师一堂课只能在一个教室上课，所以这是唯一的；当前时间戳（time()函数获取）精确到秒，足够保证用户在这个时间段内操作唯一。 每一次生成计划任务时我们都生成这样一个文件保存在flag文件夹中，并将文件名传给任务函数，让它去检查这个文件状态，存在的话则任务有效，否则终止任务；相对的，生成新任务时，我们把flag文件夹中的所有以当前$_SESSION[‘ID’]开头的flag文件全部删除，再生成新的任务和flag，这样旧的任务就会失效，由此保证任务的唯一性。 异步这里是用fsockopen函数来实现异步，这样实现的好处就是有很大的自定义空间，例如相比于popen()函数的不可传递参数。 代码//user.php //作用：用户交互界面，提交数据给set-network.php //代码如下： $url = &quot;http://localhost:8081/tch/set-network.php&quot;; sock_get($url, $_GET[&quot;network&quot;], $_GET[&quot;classroomName&quot;],$endTimestamp); //fsockopen模拟get提交函数 function sock_get($url, $network, $classroomName, $endTimestamp) { //设置get提交的数据 $data = array( &quot;network&quot; =&gt; $network, &quot;classroomName&quot; =&gt; $classroomName, &quot;endTimestamp&quot; =&gt; $endTimestamp); $http_data = http_build_query($data); $info = parse_url($url); $fp = fsockopen($info[&quot;host&quot;], $info[&quot;port&quot;], $errno, $errstr, 3); $head = &quot;GET &quot; . $info[&#39;path&#39;] . &quot;?&quot; . $http_data . &quot; HTTP/1.0\r\n&quot;; $head .= &quot;Host: &quot; . $info[&#39;host&#39;] . &quot;:&quot; . $info[&#39;port&#39;] . &quot;\r\n&quot;; $head .= &quot;\r\n&quot;; fputs($fp, $head); fclose($fp); } //set-network.php //作用：从用户操作接收数据用来生成计划任务 //代码如下： require &quot;restore-network.php&quot; //查找当前用户有无已存在的flag，有的话删除，即终止已存在的恢复网络计划任务 $search = glob(&quot;./flags/&quot; . $_SESSION[&#39;ID&#39;] . &quot;*&quot;); if ($search) { foreach ($search as $item) { unlink($item); } } $flag = &quot;./flags/&quot; . $_SESSION[&quot;ID&quot;] . time() . &quot;.flag&quot;; file_put_contents($flag, &quot;&quot;, FILE_APPEND); $schedule = new restore_network(); $schedule-&gt;keepWake($flag, $endTimestamp); //restore-network.php //作用：计划任务和恢复网络的功能实现 //代码如下： ignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行. set_time_limit(0);//设置不响应最长时间不受限制,让程序可以无限制的执行下去 //定时任务函数，不断循环来定时执行任务 function keepWake($flagFile, $endTimestamp) { //当前时间戳比结束时间戳小则一直循环 while (time() &lt; $endTimestamp) { // 定时任务终止条件:本任务的flag文件不存在 if (!file_exists($flagFile)) { die(&#39;process terminated&#39;); } sleep(120); } //删除flag文件 unlink($flagFile); //执行恢复网络功能函数，这不是重点，在此忽略函数内容 $this-&gt;restoreNet(); } 赘述尽管我最后用的并不是这种解决办法，因为考虑到万一web服务器软件宕掉的话那么这些计划任务都会丢失，我采用了将定时任务所需的参数存入数据库，再将一个php脚本写入操作系统计划任务中（如linux的crontab），每隔几分钟执行一遍，由这个脚本去数据库查询是否有到期的定时任务，有的话则调出数据进行执行，再数据库中相应的任务删除。整个过程可能考虑的不是很周到，只能算是一个实现目标的方法。]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php部分版本使用oci8拓展问题]]></title>
    <url>%2Fpost%2FHandleOci8ProblemInPHP.html</url>
    <content type="text"><![CDATA[最近在使用php实现从服务器Oracle数据库拉取数据表到本地mysql功能时遇到了这个问题：我使用的是xampp集成的php5.6.3版本，在它的php.ini配置文件中关于oci8拓展的配置是这样的： extension=php_oci8_12c.dll ; Use with Oracle Database 12c Instant Client 从Oracle官网下载instantclient-basic-nt-12.2.0.1.0.zip拓展，解压后我把得到的instantclient_12_2目录移动到C:\Program Files下并加入环境变量，但是idea运行项目时一直在报: PHP Warning: PHP Startup: Unable to load dynamic library &#39;C:\xampp\php\ext\php_oci8_12c.dll&#39; 导致oci8接口函数，如oci_connect等无法使用。 解决过程在把stack overflow翻了个遍之后找到了可行的解决办法——放弃php_oci8_12c.dll，将其更换为其他的版本。 去pecl下载其他版本的OCI8 extension下载地址，我选择了2.0.10版本，这是支持php5的最后一个版本，注：下载dll动态链接库文件需要点击”oci8-2.0.10.tgz (186.9kB)”链接后面的”（windows田字图形）DLL”链接，这是下载直达链接，根据自己的php版本下载合适的。 替换文件将解压后的下载文件移动到php拓展目录（即extension_dir）,然后在php.ini中加上 extension=php_oci8_11g.dll 去 Oracle官网下载相应的instant client V11，解压后把目录添加进系统变量。 检查cmd输入”PHP –ri oci8” C:\WINDOWS\system32&gt;PHP --ri oci8 结果显示： oci8 OCI8 Support =&gt; enabled OCI8 DTrace Support =&gt; disabled OCI8 Version =&gt; 2.0.8 Revision =&gt; $Id: f04114d4d67cffea4cdc2ed3b7f0229c2caa5016 $ Oracle Run-time Client Library Version =&gt; 11.2.0.1.0 Oracle Compile-time Instant Client Version =&gt; 11.2 Directive =&gt; Local Value =&gt; Master Value oci8.max_persistent =&gt; -1 =&gt; -1 oci8.persistent_timeout =&gt; -1 =&gt; -1 oci8.ping_interval =&gt; 60 =&gt; 60 oci8.privileged_connect =&gt; Off =&gt; Off oci8.statement_cache_size =&gt; 20 =&gt; 20 oci8.default_prefetch =&gt; 100 =&gt; 100 oci8.old_oci_close_semantics =&gt; Off =&gt; Off oci8.connection_class =&gt; no value =&gt; no value oci8.events =&gt; Off =&gt; Off Statistics =&gt; Active Persistent Connections =&gt; 0 Active Connections =&gt; 0 cmd输入”php -r “var_dump(function_exists(‘oci_connect’));”” C:\WINDOWS\system32&gt;php -r &quot;var_dump(function_exists(&#39;oci_connect&#39;));&quot; 结果显示： bool(true) 则已成功。 注意idea需要重启电脑后方可使用oci8拓展的相关接口函数（我尝试过”synchronize”和”Invalidate Caches / Restart”功能，都无效），否则仍然会提示找不到动态链接库文件。也可能是因为我使用的是php内置的服务器问题，在此提一下。 赘述这个问题的存在不知道是xampp的锅还是这个php版本的锅，总而言之问题现在是解决了，算是有所收获吧，所以总结一下。其他版本若出现相似问题也可以参考。]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>PHP</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度网盘下载高速通道延时]]></title>
    <url>%2Fpost%2FAccelerateDownloadSpeedOnBaiduNetdisk.html</url>
    <content type="text"><![CDATA[百度网盘PC客户端下载有300秒的高速通道试用，而“300”不过是个存在内存中的数值，借助于 Cheat Engine 这样的内存扫描工具，我们可以任意修改其大小。 注:因windows系统更新,CE似乎已经无法扫描到这部分应用程序的内存数据,故该方法已经失效.在V2EX上看到有帖子说吾爱破解上有老哥写了个对于百度网盘真实下载地址的解析器, 实测可用. 步骤 首先上 官 网 下载CheatEngine并安装。 打开百度网盘客户端 和 CheatEngine（以下简称CE）。CE左上角file下有个小电脑在闪烁，如图，打开它。 然后从程序列表里选择百度网盘客户端，如图，打开； 开始下载所需要的文件，然后点击试用高速通道； 立即切换到CE，在Value输入框中设定一个值，如257，当百度网盘高速通道试用时间变成257时，点击New Scan按钮对百度网盘客户端占用的内存进行扫描； 扫描后会发现左侧列表中会展示出很多查找到的内存地址，找到value一栏中的值和百度网盘客户端高速通道试用时间的值相同的一项，双击选中，到下面的操作栏中进行修改； 双击修改剩余时间，由于存放地址是4字节大小的内存，所以最大的值只能为(2^32)-1=4294967295，如果值比这个数大会导致溢出，CE会将其随机降为一个比4294967295小的较大值。 修改完成，可以关闭CE。 赘述CE这种内存扫描器其实有很多，我自己接触的第一款就是初中时候在Symbian系统上使用的“八门神器”，用来修改手机中小游戏的各种参数，弹药量、生命值之类。 以上方法只适用于有试用高速通道的时候，像有的时候没有试用高速通道的机会便没法进行加速。建议修改成较大的值（注：发现如果在修改过一次的基础上修改第二次会将剩余时间卡死。实际并没有所谓，因为时间值足够大），就算下载完毕之后不要马上关闭客户端（因为下次打开可能就没有试用高速通道的机会），高速通道的剩余时间仍会继续跑。 虽然有时间限制，但是修改的值较大的话基本可以忽略这个限制。可以说唯一的限制在于试用高速通道的机会。 我在学校内使用ipv6走高速通道网络状态好的时候速度还是挺让人满意的。 以上。]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows热点不可用解决办法]]></title>
    <url>%2Fpost%2FSolution4UnusableMobileHotspotOnWindows.html</url>
    <content type="text"><![CDATA[该问题的现象表现为windows热点开启成功，且在移动端可以正确进行密码的认证，但就是无法连接上或是连接上之后无法上网（移动端此时已通过dhcp获取到ip）。 解决办法法一首先想到的当然是对本地热点的重启，若重启后仍然无效，参考法二； 法二step 1: 在网络适配器管理（控制面板\网络和 Internet\网络连接）中将你的热点连接禁用； step 2: 进设备管理器（win+x键调出选项栏后按M键选择设备管理器），菜单栏中“查看”选中“显示隐藏的设备”， 在下面打开网络适配器一栏，会有一个图标带向下箭头（已被禁用）的 network virtual Adapter（虚拟网络适配器），不同的电脑因为网卡不同或者oem定制的问题可能会导致适配器名字不一样，根据具体情况自己选择。双击它，“启用设备”。 完成以上步骤后再启动自己的热点 类似的问题类似的共享网络的问题, 如给树莓派共享网络的时候能连上板子但是板子上不了网, 也可以采用这种方法解决, 详见👉 树莓派食用指南 赘述以上方法是我在遇到该问题后自己摸索出来的，在我的电脑上可解决问题。 如果无法解决你所遇到的问题，建议搜索其他的解决办法。]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(xrdp+vnc)远程linux桌面]]></title>
    <url>%2Fpost%2FImplementRemoteDesktopOnLinuxWith(Xrdp%2BVNC).html</url>
    <content type="text"><![CDATA[相信大家桌面远程linux服务器大多用的都是vnc（虽然对于linux系统桌面远程用的确实很少），这里提一下xrdp的优势，1.加密，vcn本身的传输是不加密的（可以借助于SSL实现）；2.因为xrdp实质上就是一个 rdp 服务器，所以我们在windows上只需要借助自带的mstsc就可以直连linxu桌面系统，因为都使用了rdp协议，很方便；3. 支持多用户登录；4.第四个优势…要说第四个优势的话……开源算么？（逃… 操作步骤安装xrdp+vncserver：#CentOS yum install epel-release yum update yum install xrdp tigervnc-server #Ubuntu apt-get update apt-get install xrdp tigervnc-server 如果服务器桌面系统都没装的话，建议选择xfce一类轻量型桌面 #CentOS yum groupinstall xfce4 #Ubuntu apt-get install xubuntu-desktop #安装完成后运行 systemctl set-default graphical.target #使系统默认从GUI启动 #如果要恢复默认从CLI启动 systemctl set-default multi-user.target #使系统默认从CLI启动 设置xrdp开机自启：systemctl enable xrdp.service #启动xrdp服务 systemctl start xrdp 如果xrdp报错的话可以参考 该链接 ，运行： #Allow SElinux to allow: chcon --type=bin_t /usr/sbin/xrdp chcon --type=bin_t /usr/sbin/xrdp-sesman #Start it systemctl start xrdp 运行”vncserver”命令在当前用户家目录实例化vnc配置#如果想以其他用户的身份连接远程连接，需要先使用su命令来切换用户 vncserver 配置vncserver服务：cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:&lt;NUMBER&gt;.service #&lt;NUMBER&gt;为数字 #将/etc/systemd/system/vncserver@:&lt;NUMBER&gt;.service中的&lt;USER&gt;替换为你的用户名，共两处。 #如果是root用户的话，其中的家目录需要改为/root，而非/home/&lt;USER&gt; systemctl重新加载配置文件systemctl daemon-reload 防火墙允许服务注意iptables规则是否有拦截xrdp和vnc服务访问网络。 Centos7及以上上需要配置firewall允许xrdp和vnc:firewall-cmd --permanent --zone=public --add-port=3389/tcp #允许xrdp（默认端口为3389） firewall-cmd --permanent --zone=public --add-service=vnc-server firewall-cmd --reload 启动vncsystemctl start vncserver@:&lt;Nummer&gt;.service 赘述一些问题与注意点Windows上mstsc直连session需要选择xvnc 如果需要以root身份登录，则需要以root身份运行vncserver,配置vncserver@:{n}.service文件后，在/home目录创建root文件夹，将其链接到/root目录即可 若使用vnc客户端连接的话，分辨率可能会导致无法满屏显示，这时可以直接修改vnc的分辨率( 参考链接 )： 如果要使用的分辨率在现有的模式中没有的话，我们可以自己手动添加1.首先查询所需要参数，cvt 加分辨率例如我需要1366*768的分辨率，则输入“cvt 1366 768”，查询该分辨率的有效扫描频率是多少将Modeline “1368x768_60.00” 后面的“85.25 1368 1440 1576 1784 768 771 781 798 -hsync +vsync”参数复制2.创建所需的模式 xrandr --newmode &quot;模式名&quot; + 上一步复制的参数 3.这时接使用刚刚创建的模式会提示找不到模式，需要手动添加一下 xrandr --addmode 显示器名 &quot;模式名&quot; 创建成功：添加成功：4.使用新建模式 xrandr --output 显示器名 --mode &quot;模式名&quot; 当前设置在重启后失效，可以将其写入配置文件保证设置永久有效 分辨率也可以通过vnc客户端设置，但是画质会受影响 本文部分参考 该博文 🙃当然了, 折腾了这么久, 本人其实是更加推荐使用teamviewer的(逃……]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text使用技巧]]></title>
    <url>%2Fpost%2FTips%26Tricks4SublimeText.html</url>
    <content type="text"><![CDATA[本文用以记录我使用sublime text作为编辑器过程中的一些技巧。 关于全面的教程本文只点提一些我觉得好用的地方, 关于sublime text全面的内容, 推荐 Sublime Text 全程指引 by Lucida一文. 安装Package Control新安装的sublime需要安装包管理器,以便今后安装插件; 官网上的安装教程在此 使用包管理器安装插件快捷键ctrl+shift+p后输入install, 下方会出现一系列的选项，选中Package Control: Install Package(一般第一个选项就是)回车即可进入包管理器的安装模式，在弹出的输入框中输入你想要安装的插件即可，回车进行安装。 删除插件同安装，快捷键ctrl+shift+p后输入remove，选中Package Control: Remove Package，回车即可进入删除模式，选中要删除的插件回车即可删除 启用vim模式Preference -&gt; Settings -&gt; User，将ignored_packages字段中的配置清空，如下: &quot;ignored_packages&quot;:[], 清空了原本被忽略的Vintage(Sublime Text的vi模式编辑包)后就开启了vi模式。 字体在Windows上sublime的字体渲染往往会出现问题，变得大小、高低不一致， 严重影响我们的文档编写工作，如下图:实际上在用户设置里面加上如下配置就能解决问题 &quot;font_face&quot;: &quot;Segoe UI&quot;, &quot;font_options&quot;: [&quot;gdi&quot;] Segoe字体是微软开发的一款字体, Windows自带有; gdi则是windows的一款渲染器.这样设置后的效果如下图: 使用sublime tmpl插件快速创建文件模板搜索插件sublime tmpl安装即可, 默认快捷键如下: ctrl+alt+h html ctrl+alt+j javascript ctrl+alt+c css ctrl+alt+p php ctrl+alt+r ruby ctrl+alt+shift+p python 也可以使用快捷键ctrl+shift+p, 输入: “tmpl:”, 可以找到创建文件的菜单列表. CoolFormat代码格式化coolFormat是比较好用的代码格式化通用插件，默认快捷键是ctrl+alt+shift+q格式化全部代码，ctrl+alt+shift+s格式化选中代码，如果要修改则Preference -&gt; Browse Packages进入CoolFormat文件夹中，修改Default.sublime-keymap文件中的绑定快捷键即可。 Markdown编写环境因为用的挺顺手的，所以推荐一下。我在sublime上编写markdown文档的环境配置是:Markdown Editing + OmniMarkupPreviewer + Markdown Extended + Monokai Extended 插件介绍MarkdownEditing作为sublime上编写Markdown必备的插件，不仅可以高亮显示Markdown语法还支持很多编程语言的语法高亮显示（需要主题支持）。 OmniMarkupPreviewer用来渲染和预览markdown文档的效果。 这两个插件安装完了以后我们在编写markdown时会发现Markdown文档在Sublime中是默认无高亮的，而且很多主题也不支持Markdown的高亮，而Monokai Extended和Markdown Extended 的组合很好的解决了这个问题。 以上插件都安装完成后，重启sublime，然后在preferences-&gt;color scheme-&gt;Monokai Extended 选择一项你顺眼的作为配色模式，再将Markdown Extended选为markdown文档的语法规则即可（view-&gt;systax-&gt;open all with current extension as 如图）： Tips 具体的markdown语法可以参照曾经wowubuntu网站上的Markdown语法说明 (简体中文版)，或者是Markdown 入门参考。 插件使用的小技巧去搜一下就有了，在此就不赘述了 我最后使用的配色方案是Color heme: Monokai Extended Origin, Theme: Adaptive.sublime-theme, 这样编写markdown非常舒服 部分问题解决办法亚洲字体在sidebar切换缓慢问题一开始发现这个问题是因为用sublime写博客, 在使用sidebar显示博客文件夹的时候如果打开文件名含有中文的文件时, 整个sidebar的渲染就会变得很卡顿, 后来在官方论坛上找到了相似的问题 👉 asian language on the sidebar scroll bar slows down, 这才发现不只是中文, 亚洲字体好像都这样, 开发者给出解决办法是, 在设置里加上如下字段以更改主题的字体渲染器: &quot;theme_font_options&quot;: [&quot;gdi&quot;] 尝试后有效, 但该问题在最新的开发版(3161)里似乎已经被解决了, 正式版上线后应该就没事了.(2018-05-08更新: 现最新版已解决该字体渲染问题) 屏蔽更新正常情况下有新版本的时候软件会弹出提示框来询问你是否更新, 如果想要屏蔽更新提示的话, 在配置文件中写入: &quot;update_check&quot;: false, 即可.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打包Chrome插件&使用非ChromeStore上的插件]]></title>
    <url>%2Fpost%2FHow2PackChromePlugin%26UsePluginsNotFromChromeStore.html</url>
    <content type="text"><![CDATA[最近在使用Chrome插件json-viewer的时候遇到了一些功能限制问题, 在找到了一个开源的增强版, 于是自己修改了下样式打包成插件, 在此总结一下. 前述最近在学习维护学校iptv服务器时获得了电视墙缓存图片的json数据，chrome打开页面后jsonViewer无法格式化代码，如图（jsonViewer此时并没有启动，因为它并不会格式化本地文件）： 在网上找到了一个 网友自己拓展的json-viewer ，与 http://www.jsonohyeah.com/上的效果相近，不过可以本地格式化，省去联网了，觉得很好用。 觉得样式丑的可以去github拉取代码自己改下样式（样式表在WebContent\viewer\index.html文件中），然后chrome打包拓展程序安装。 打包与安装拓展程序首先下载插件源码, 以这里的JSONView为例, 解压后会得到一个WebContent文件夹, 然后进入chrome的插件管理界面, 打开地址chrome://extensions, 会看到有如下打包拓展程序的按钮: 点击打开打包对话框, 在拓展程序根目录一栏中填入WebContent文件夹路径(否则会报错“清单文件缺失或不可读”), 私钥文件一栏不用管, 如下图: 点击打包拓展程序 ( 如果报错“指定扩展程序的私有密钥已存在。请重复使用该密钥，或者先删除它” 则删除pem密钥文件即可 ), 会在WebContent文件夹的同级目录下得到WebContent.crx和WebContent.pem两个文件, pem密钥文件对我们来说并没有什么用, 我们直接将得到的WebContent.crx文件拖放到chrome://extensions页面上即可安装. 本人已修改样式且打包了的JsonViewer拓展程序下载地址在此 , 是github的地址, 可能会报”危害计算机”警报, 信任即可, 有疑虑也可以自己打包. 授权安装后你会发现程序是被禁用的状态, 因为这并不是Chrome Store上的插件, 所以chrome为了安全会直接禁用这种插件, 如下图: 但是我们可以通过Chrome的配置策略来将插件加入白名单, 请记住你自己被禁用插件的类似上图中的插件ID, 等会有用 . 注: 接下来的操作需要用到windows系统的组策略机制, 但自win8开始组策略只在专业版/企业版/教育版才有, 所以请确保你的系统版本拥有组策略机制. 下载Chrome ADM模板进入Chrome官方下载地址下载策略包, 如下图: 👉 直接下载传送门 👈 下载后解压得到一个policy_templates文件夹, 我们需要的策略文件是policy_templates\windows\adm\zh-CN目录下的chrome.adm文件, 请记住它的绝对路径, 等会有用. 添加组策略然后我们在运行里输入gpedit.msc打开组策略编辑器, 进行如下操作: 选择添加模板: 点击添加按钮, 进入刚才chrome.adm文件的路径, 选择添加chrome.adm, 效果如下图, 然后点击关闭按钮: 进入Chrome模板填加白名单, 如下图: 依次操作, 添加之前记住的拓展程序的ID号码, 保存即可: 再看插件的状态不会有红色的警告文字。 成果最终格式化电视墙缓存图片的json数据效果如图： 赘述安装时也可以开启开发者模式，选择“加载已解压的拓展程序”，从WebContent文件夹直接安装源码。这样安装后就不会有被直接禁用的问题, 但是每次打开chrome都会提醒你禁用开发者模式下安装的拓展, 很烦人, 加入白名单即可.]]></content>
      <tags>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql中文乱码的解决办法]]></title>
    <url>%2Fpost%2FSolution4GarbledChineseCharactersInMysql.html</url>
    <content type="text"><![CDATA[相信既然这么进来了，那么问题肯定是差不多的，下面直接讲述解决办法： 我们在mysql中使用命令show variables like &#39;%chara%&#39;和show variables like &#39;%collation%&#39;分别可以看到mysql当前设置的编码方式 解决办法修改配置文件首先在mysql配置文件my.ini中进行配置修改 #搜索找到[mysqld]，在它下面添加配置，如下 [mysqld] character-set-server = utf8 #搜索找到[mysql]，在它下面添加配置，如下 [mysql] default-character-set = utf8 修改连接编码和中文字段编码接下来我是从phpmyadmin上操作的，如果你没有可视化操作界面，那就转换成sql语句来操作吧。 set names &quot;utf8&quot;; 再将所有需要插入中文的字段进行结构修改：例如下面的message字段 将排序规则修改为utf8_general_ci 对于docker的mysql容器如果创建的mysql容器在运行中出现了中文乱码的情况，则在创建容器到时候在最后面加上--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci即可. 赘述我曾多次遇到这种问题都是这么解决的，也曾利用修改排序规则的方法帮同学结果过类似问题，在此仅供参考。]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>Docker</tag>
        <tag>Tips+Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F%2F404.html</url>
    <content type="text"><![CDATA[404 &lt;!DOCTYPE html&gt;&lt;html&gt; &lt;style&gt; * { everything:awesome;} &lt;/style&gt; &lt;body&gt; ERROR 404! FILE NOT FOUND! &nbsp;&lt;/body&gt;&lt;/html&gt; The page you requested cannot be found right now. Try typing ‘back’ to go back or ‘game’ to play “t-rex-runner”.]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F%2Fgame.html</url>
    <content type="text"><![CDATA[t-rex runner window.onload = function(){var isMobile = /Android|webOS|iPhone|iPad|BlackBerry/i.test(navigator.userAgent);if(isMobile){document.getElementById(“hint”).innerHTML=”press Screen to start game”;document.getElementById(“home”).innerHTML=”press here to back home”;}}; press Space to start click here to back home]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[关于 .content { background:rgba(248,248,248,0) none repeat scroll !important; } .header{ background:rgba(248,248,248,0) none repeat scroll !important; } .footer{ display:none; } #self-introduction { margin-top: -10%; } 这是杜文杰的个人博客。我热爱代码，喜欢技术，支持开源，是一个较为自我驱动的人。会吹一点口琴，口哨吹的比口琴好。羽毛球打的一般，喜欢长跑。智商中等偏下，大学高数课上少有不被室友叫醒的时候。略好读书。最爱李诞的一句： 我喜欢人类，人类真的特别了不起，进化出了智力，但很多时候选择不用。很潇洒的物种。by 李诞]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2Fgame.css</url>
    <content type="text"><![CDATA[/* Copyright 2013 The Chromium Authors. All rights reserved. * Use of this source code is governed by a BSD-style license that can be * found in the LICENSE file. */ @font-face { font-family: 'Joti One'; font-style: normal; font-weight: 400; src: local('Joti One'), local('JotiOne-Regular'), url(https://cdn.safeandsound.cn/fonts/JotiOne-Regular.ttf) format('truetype'); } html, body { padding: 0; margin: 0; width: 100%; height: 100%; } .hint{ color: #535353; text-align: center; font-family: 'Joti One', cursive; font-size: 200%; margin: 0px; padding: 0px; margin-top: -240px; } .home{ font-size: 130%; display: block; text-align: center; margin-top: -15px; font-family: 'Joti One', cursive; text-decoration: none; color: #FF5E53; } .home:hover{ font-size: 150%; text-decoration: none; color: #DD635B; } .icon { -webkit-user-select: none; user-select: none; display: inline-block; } .icon-offline { content: -webkit-image-set( url(assets/default_100_percent/100-error-offline.png) 1x, url(assets/default_200_percent/200-error-offline.png) 2x); position: relative; } .hidden { display: none; } /* Offline page */ .offline .interstitial-wrapper { color: #2b2b2b; font-size: 1em; line-height: 1.55; margin: 0 auto; max-width: 600px; padding-top: 100px; width: 100%; } .offline .runner-container { height: 150px; max-width: 600px; overflow: hidden; position: absolute; top: 35px; width: 44px; } .offline .runner-canvas { height: 150px; max-width: 600px; opacity: 1; overflow: hidden; position: absolute; top: 0; z-index: 2; } .offline .controller { background: rgba(247, 247, 247, .1); height: 100vh; left: 0; position: absolute; top: 0; width: 100vw; z-index: 1; } #offline-resources { display: none; } @media (max-width: 420px) { .suggested-left > #control-buttons, .suggested-right > #control-buttons { float: none; } .snackbar { left: 0; bottom: 0; width: 100%; border-radius: 0; } } @media (max-height: 350px) { h1 { margin: 0 0 15px; } .icon-offline { margin: 0 0 10px; } .interstitial-wrapper { margin-top: 5%; } .nav-wrapper { margin-top: 30px; } } @media (min-width: 600px) and (max-width: 736px) and (orientation: landscape) { .offline .interstitial-wrapper { margin-left: 0; margin-right: 0; } } @media (min-width: 420px) and (max-width: 736px) and (min-height: 240px) and (max-height: 420px) and (orientation:landscape) { .interstitial-wrapper { margin-bottom: 100px; } } @media (min-height: 240px) and (orientation: landscape) { .offline .interstitial-wrapper { margin-bottom: 90px; } .icon-offline { margin-bottom: 20px; } } @media (max-height: 320px) and (orientation: landscape) { .icon-offline { margin-bottom: 0; } .offline .runner-container { top: 10px; } } @media (max-width: 240px) { .interstitial-wrapper { overflow: inherit; padding: 0 8px; } }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2FmyCSS.css</url>
    <content type="text"><![CDATA[/*字符上下颠倒*/ .upside-down { filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); /* IE6,IE7 */ ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)"; /* IE8 */ -moz-transform: rotate(-180deg); /* 火狐3.5+ */ -o-transform: rotate(-180deg); /* Opera 10.5 */ -webkit-transform: rotate(-180deg); /* Safari 3.1+, Chrome */ position: absolute; } /*在颠倒字符右侧的字符*/ .upside-down-right{ font-style:normal; margin-left:25px; } /*词条页面的标题效果*/ .entries-title{ font-size:80%; font-weight:100%; color:black; }]]></content>
  </entry>
  <entry>
    <title><![CDATA[🙂一些我平时遇到的不理解的词条整理后放在这🙃]]></title>
    <url>%2Fentries%2Findex.html</url>
    <content type="text"><![CDATA[X阶逻辑像一阶、二阶逻辑，其中的*阶一方面是表示量化的程度，另一方面是表示逻辑系统有多强的表达能力。 首先是命题逻辑（也有人叫零阶逻辑），在它里面，一个字母代表一个命题，命题逻辑表达命题之间的关系，如“p&amp;q”，“if p then q”等。 一阶逻辑引入了两个量词，即任意和存在, universal quantifier(∀)和existential quantifie(∃), 并且引入了一阶谓词，这使得一阶逻辑可以量化个体。 但一阶逻辑的表达能力有限，它可以表达“∀中国人都喜欢喝茶”或“∃中国人喜欢喝茶”，但是无法表达“有80%的中国人喜欢喝茶”，因为这“80%的中国人”本身是一个个体的集合，或者可以看成是对谓词的量化，即“中国人有80%喜欢喝茶”（可能这个例子这么说有点语义逻辑问题），所以如果要这么表达就需要引入二阶逻辑。二阶逻辑可以量化谓词，表达能力更强。 集合论上来说, 一阶量化个体, 二阶量化包含个体的集合, 三阶量化包含包含个体的集合的集合, 等等，以此类推。 参考知乎问题 一阶逻辑和高阶逻辑的区别，能不能具象一点说明？ iterater与iteration作为名词时的区别iterate表示许多次iteration运行后的结果。所以在一个迭代函数中，每一个iteration就是一次循环，而iterate就是函数运行完后的结果。 引自 StackExchange iterate and iteration as nouns CAP定理(CAP Theorem) 在理论计算机科学中，CAP定理，又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点： 一致性（Consistency） ：等同于所有节点访问同一份最新的数据副本； 可用性（Availability）：每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据； 分区容错性（Partition tolerance）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。 根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。 wiki CAP定理 《NoSQL精粹》一书中对于可用性的解释是：“如果客户可以同集群中的某个节点通信，那么该节点就必然能够处理读取及写入操作”。对于“分区容错性”的定义是：“如果发生通信故障，导致整个集群被分割成多个无法互相通信的分区时（这种情况也叫‘脑裂’，split brain），集群仍然可用”。 集群必须要容忍”网络分区“状况，而这正是CAP定理的意义所在。CAP定理实际上是讲：当系统可能会遭遇”分区“状况时（比如分布式系统），我们需要在”一致性“与“可用性”之间进行权衡。这并不是个二选一的决定，通常来说，我们都会略微舍弃“一致性”，以获取某种程度的“可用性”。这样产生的系统，既不具备完美的“一致性”，也不具备完美的“可用性”，但是这两种不完美的特性结合起来却能够满足特定的需求。 启发式算法(Heuristic Algorithm)启发式算法可以这样定义：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例的一个可行解，该可行解与最优解的偏离程度一般不能被预计。– 百度百科 启发式是基于有限的知识与认知从而得到相关问题的结论的分析行为，由此得到的解决方案有可能会偏离最佳方案。典型的启发法有试错法和排除法。– 摘自wiki 启发式算法部分来自于自然的规律或是仿自然体，还有部分来自于人们积累的工作经验。 启发式比盲目的寻求解决方法要有效，虽然不一定能得到最佳方法但很多时候都能得到“能用”的方法或者说近似最优解（具体怎么近似，需要针对具体问题），因此它在理论上也缺乏保障。 帕累托法则(Pareto Principle)”也被称为80/20法则、关键少数法则, 指出，’约仅有20%的变因操纵着80%的局面‘。此一概念起源于意大利经济学家 帕累托 (Vilfredo Pareto) 在洛桑大学注意到了80/20的联系，于他的第一篇文章《政治经济学》中说明了该现象，例如：意大利约有80％的土地由20％的人口所有、80%的豌豆产量来自20%的植株等等。“ –摘自wiki 在编程方面总被用来指出80%的应用程序性能改善源自20%的性能问题。 NFL定理(No Free Lunch Theorem)在机器学习领域，NFL定理告诉我们，如果不考虑所要解决的实际问题，那么任何算法的期望性能都是差不多的。但是你知道的，实际运用中我们会关注正在面对的问题并期望得到它的解决方案。 周志华教授的《机器学习》一书中如是说: NFL定理最重要的寓意，是让我们清楚地认识到，脱离具体问题，空泛地谈论”什么学习算法更好“毫无意义，因为若考虑所有潜在的问题，则所有的算法一样好。要谈论算法的相对优劣，必须要针对具体的学习问题；在某些问题上表现好的学习算法，在另一问题上却可能不尽如人意，学习算法自身的归纳偏好与问题是否相配，往往会起到决定性作用。 奥卡姆剃刀(Occam’s Razor)原则奥卡姆剃刀为简约之法则，它推崇简约，原文为“切勿浪费较多东西，去做‘用较少的东西，同样可以做好的事情’。” 但是其意并不是说简单的就是正确的，它可以看作是种思维方式，一种解决问题的法则。在自然科学中，奥卡姆剃刀被作为启发法技巧来使用，“在平时也可以用来指导我们的工作，比如我们可以用A和B达到同样的效果，但B更简单，于是我们选择B”，这就算是该原则的运用。“然而，奥卡姆剃刀本身存在不同的诠释，使用奥卡姆剃刀原则并不平凡”，因为对于“更简单”这个条件的判断或理解，在很多时候是无法进行的。 鸭子类型(duck typing)鸭子类型是动态语言所特有的概念。Wiki上的解释，有趣的类比”If it walks like a duck and it quacks like a duck, then it must be a duck.” 其意为，一个对象的到底是什么是由它的行为所决定的，我们并不关心它本质上是什么(继承自什么对象实现了什么接口)，我们是通过它能干什么来判断它是什么🤔很有趣嘛。 猴子补丁(monkey patching)起源:猴子补丁的这个叫法起源于Zope框架，大家在修正Zope的Bug的时候经常在程序后面追加更新部分，这些被称作是“杂牌军补丁(guerilla patch)”，后来guerilla就渐渐的写成了gorllia(猩猩)，再后来就写了monkey(猴子)，所以猴子补丁的叫法是这么莫名其妙的得来的。 它是动态语言所特有的概念，在动态语言中，一切皆对象，例如你可以用一个对象去替换另一个对象的属性，那么这样的话你就可以非常灵活的去进行功能的追加或删改。 关于实际例子，StackOverflow上有相关的问题:What is monkey patching? 阻抗失谐(impedance mismatch)该词是数据库领域术语, 反用了微波电子学术语&quot;阻抗匹配&quot;(impedance match),用来比喻数据模型与实际编程语言不搭调的窘境。–摘自《NoSQL精粹(NoSQL Distilled)》 这种”阻抗失谐”的现象(尤其是在关系型数据库中)表现为:关系模型和内存中的数据结构之间存在差异, 如编程语言在内存中构造的数据结构中有”嵌套”的表示, 但是在关系型数据库中却无法包含嵌套记录, 它的关系元组必须是简单的, 这就导致如果要把内存中数据结构的对象持久化到关系型数据库中就必须要将其转换成”关系”形式, 这样关系型数据库才能保存并表达, 这就发生了”阻抗失谐”: 需要在两种不同的表示形式之间转译. 微服务结构 &amp; 单体式应用最近看书时总是看到拿微服务结构与单体式应用对比, 在此归纳总结一下. 微服务微服务是以专注于单一责任与功能的小型功能模块为基础，利用模组化的方式组合出复杂的大型应用程序。 其比较明显的特性有:1.独立性(有些地方也叫真空性),微服务模式中的每一个组成部分都是一个服务,各个服务彼此独立, 有完整的运行机制与对外接口; 2.服务是粒度最小的单位, 不可再分, 即一个微服务不能进一步划分为多个更小的服务; 3.服务能够快速重组成新的系统, 就像积木一样, 体现了模块化. 单体式应用一个单体式应用里面有许多的逻辑、服务，并且都有密不可分的关系。一旦其中一个服务不可用时，就会造成另一个服务也无法使用.虽然外部结构看起来会比较简单, 但是在资源分配、测试、拓展等各方面看来都不够灵活.（所以你知道微服务的优势在哪了）。 一个比较好理解二者之间区别的例子就是, 微服务就像是docker, 而单体式应用就像是传统的虚拟机(这只是我在理解过程中的一个比喻, 不一定准确). IaaS/PaaS/SaaS/XaaS这里所谓的*aaS即”* as a Service“, 本质就是把*当作服务来进行出售. IaaS(Infrastructure as a Service, 基础设施即服务),其意指如果你只是要使用硬件设备罢了, 那就没有必要花巨资购买整套设备并为设备用地以及今后的维护、设备拓展/更新买单,你可以租用硬件, IaaS方面的公司(如Amazon[AWS])会提供服务器,存储器等硬件设备,这样就可以节约成本，利用对方公司提供的服务， 你可以随时使用这些设备来运行你的服务/应用。 PaaS(Platform as a Service,平台即服务)，这里的平台有时也叫做中间件，即云计算环境中的应用基础设施服务，也就是支撑应用和运行时环境，如虚拟服务器、操作系统、应用服务器、数据库等 SaaS(Software as a Service,软件即服务),也就是软件提供服务了, 这个很好理解. IaaS、PaaS、SaaS其实是云计算领域的三个概念,基础设施在最下面,平台在中间,软件则在最上面, 如果你什么都有, 那么就是本地部署, 也就无所谓这些*aaS了. XaaS也就是Anything as a Service，可以说IaaS，PaaS，SaaS是其子集以上内容部分参考了 何足道 知乎回答 方言 Dialect(computing)此处指计算机行业中的dialect, 其意为一门编程语言或数据交换语言的拓展或者变种形式(摘自wiki,A dialect of a programming language or a data exchange language is a (relatively small) variation or extension of the language that does not change its intrinsic nature) 如各个关系型数据库厂商的SQL方言; Clojure是一种Lisp方言; 等 CI/CD/CR持续集成(CI, Continuous integration),持续交付(CD, Continuous delivery),持续部署(CR, Continuous release) 所谓持续的思想就是: 既然我们知道开发的需求很难一次性完整的定下来, 那么我们就一点一点的开发, 每一次功能完成后再加到主体上去, 这样使得开发过程更加(敏捷&amp;灵活), 有错可以及时更改, 与最后一次性对系统进行合并/集成然后再构建 测试 发布相比(风险&amp;损失)更小, 也就符合了极限编程的要求. 持续是指整个过程中项目功能的合并, 构建, 测试, 发布产品等, 这些环节是持续的. 持续集成很好理解, 给出的wiki链接页面中解释得很清楚, 就是每次一点代码(在开发者通过构建&amp;测试之后)集成到主线. 持续交付是指将集成后的代码通过更真实的类生产环境的测试后部署到生产环境中, 但是是否部署是可选的, 部署是手动的. 而持续部署就是在持续交付的基础上进行全自动的部署. 如wiki中所描述的如果要实施持续部署，必须先实施持续交付. 几种流行的部署技术蓝绿部署蓝绿部署(Blue/Green Deployment)的特点是无停机时间且风险较小,具体的流程介绍在链接的博客里已经说的很清楚了,在此不赘述. 滚动部署停止部分服务并对其进行更新,完成后投入重新使用.如此重复直到所有服务都更新为新的版本.但是在升级的过程中,服务运行的环境是变化的,你并不知道哪个时候的环境是稳定,所以如果需要回滚的话,那就要回滚到稳定的环境里,意味着可能要从头再来. 灰度部署不停止老版本的服务,另外开一个新版本的服务给用户使用,新版本出现问题即可回滚. 因为跳跃式发布是很危险的,所以需要像灰度(指从黑白之间)这种平滑过渡的发布. 与A/B测试一样,本质就是发布多个版本看效果如何,也就是试错,有问题就回滚,经过一段时间的验证后没问题就正式发布. REST架构根据wiki定义：”具象状态传输（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。”wiki中提到“REST是设计风格而不是标准”，这是很重要的一点，首先在理解之前你不能误解它本身的含义和存在的意义。 具象状态传输架构风格最重要的架构约束有6个： 1.客户-服务器（Client-Server）：通信只能由客户端单方面发起，表现为请求-响应的形式。 2.无状态（Stateless）：通信的会话状态（Session State）应该全部由客户端负责维护。 3.缓存（Cache）：响应内容可以在通信链的某处被缓存，以改善网络效率。 4.统一接口（Uniform Interface）：通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。 5.分层系统（Layered System）：通过限制组件的行为（即每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。 6.按需代码（Code-On-Demand，可选）：支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。”。 wiki 具象状态传输 我的理解是，REST就是定义一个系统/软件的架构,以及如何设计出RESTful API的，它让系统对外提供的接口更加规范（也就是符合REST风格），如REST的提出者Roy Thomas Fielding在他提出REST的博士论文中所说:”My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture.”这些RESTful的接口将会“功能强大，性能出色且友好易用”。 编程语言的自举首先一提，能够自举是一门编程语言成熟的标志之一（不能不代表不成熟）。简单来说就是语言自身的编译器可以编译自己的编译器。引用知乎上轮子哥的回答比较简单易懂： 你想创造一门V语言而且用V语言来写V编译器的话，你得按照下面的方法做：1、用C++把那个编译器（A）写出来，顺便留下很多测试用例。2、用V语言把那个编译器写（B）出来，用A.exe来编译B，修改直到所有测试用例都通过为止。3、B.exe来编译B自己得到B2.exe，修改直到B2.exe所有测试用例都通过为止。这是为了保证，就算B本身有很多bug，至少编译自己是没有bug的，从而你就可以走到第四步。4、当你觉得有信心了，用A.exe把B编译一遍，就得到了B.exe。然后A的代码和A.exe都在也不需要存在了，删掉他们。以后你就不断的用B.exe来编译下一个版本的B就好了。就自举了。 vczh 知乎回答 那么图灵完备的语言是不是都可以自举呢？从我个人“没有哪一门图灵完备语言实现的功能是另一门图灵完备语言所不能实现的”的观点来看答案是肯定的。觉得没有必要在“能不能”和“有没有实现”这个问题上纠结，这只是编程语言的一种性质，能不能自举是一回事，有没有必要真的实现就是另一回事了。 图灵完备wiki描述：“在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）可以用来模拟单带图灵机，那么它是图灵完备的”。图灵机的基本思想是“用机器来模拟人们用纸笔进行数学运算的过程”，也就是说图灵机能执行所有可被描述的计算。 也存在着一类问题我们人类能构造出来而图灵机不能解的，那就是悖论。悖论是不具有可计算性的，如典型的停机问题等。关于图灵机推荐这一篇论文。 编程语言的图灵完备性图灵完备的语言也就是可以模拟出图灵机的语言，大部分的GPL（General Purpose Language, 通用编程语言, 此处不是指GPL通用开源协议）基本都是（所以在项目实践中谈语言是否图灵完备的意义并不大），所以也易知没有哪门图灵完备语言实现的功能是另一门图灵完备语言所不能实现的（只是过程的难易程度，也就是开发成本不同）。 相对于GPL，大部分的DSL（Domain Specific Language，领域专用语言）都不是图灵完备的，典型的就是SQL（指SQL92标准，T-SQL之类不属于）、html等。 语法糖wiki描述：“语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·兰丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性”。 在我理解，语法糖的存在其实就是为了让代码写起来更简洁&amp;读起来更舒服（但是我感觉它与可读性的关系并不是绝对的正相关，因为一种写法对熟悉这门语言特性的人来说可能很舒服，但是不熟悉的人可能就很难理解，编程和理解的能力永远是相对而言的），其在绝大多数情况下并不会影响到语言（特别是编译型语言）执行的效率，因为它在被语言处理器（编译器、静态分析器等）处理的过程中就被转换掉了（有点类似C++内联函数的意思），该过程如wiki所言：“把‘加糖’的结构变成基本的结构，这个过程叫做‘去糖’”。 语法盐类似的也有语法盐。wiki描述：“语法盐（英语：syntactic salt）是指在计算机语言中为了降低程序员撰写出不良程式码的设计，但其中仍会有潜藏错误存在的可能。例如，C语言或C++语言中Switch指令的case中若不加break编译器并不会产生错误讯息，部分程序员认为宣告变数型态也是语法盐的一种”。 Wiki上还举了一个容易理解的java的例子：Java中并不允许将一个宣告为float类型的变量赋值给一个宣告为int类型的变量，但是C和C++会自动把float类型的变量舍去小数并赋值给int类型的变量。 int num1; float pi=3.14159; num1=pi; //赋值错误]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcss%2Fstyle.css</url>
    <content type="text"><![CDATA[@import url(https://fonts.googleapis.com/css?family=Gilda+Display); html { background-color: black; color: white; overflow: hidden; height: 100%; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; font-size: medium; } .error { text-align: center; font-family: 'Gilda Display', serif; text-align: center; width: 100%; height: 120px; margin: auto; position: absolute; top: 0; bottom: 0; left: -60px; right: 0; -webkit-animation: noise-3 1s linear infinite; animation: noise-3 1s linear infinite; overflow: default; } body:after { content: 'error 404'; font-family: OCR-A; font-size: 100px; text-align: center; width: 550px; margin: auto; margin-top:-100px; position: absolute; top: 25%; bottom: 0; left: 0; right: 35%; opacity: 0; color: white; -webkit-animation: noise-1 .2s linear infinite; animation: noise-1 .2s linear infinite; } body:before { content: 'error 404'; font-family: OCR-A; font-size: 100px; text-align: center; width: 550px; margin: auto; position: absolute; top: 25%; bottom: 0; left: 0; right: 35%; opacity: 0; color: white; -webkit-animation: noise-2 .2s linear infinite; animation: noise-2 .2s linear infinite; } .info { text-align: center; width: 200px; height: 60px; margin: auto; position: absolute; top: 280px; bottom: 0; left: 20px; right: 0; -webkit-animation: noise-3 1s linear infinite; animation: noise-3 1s linear infinite; } .info:before { content: 'file not found'; font-family: OCR-A; font-size: 100px; text-align: center; width: 800px; margin: auto; position: absolute; top: 20px; bottom: 0; left: 40px; right: 100px; opacity: 0; color: white; -webkit-animation: noise-2 .2s linear infinite; animation: noise-2 .2s linear infinite; } .info:after { content: 'file not found'; font-family: OCR-A; font-size: 100px; text-align: center; width: 800px; margin: auto; position: absolute; top: 20px; bottom: 0; left: 40px; right: 0; opacity: 0; color: white; -webkit-animation: noise-1 .2s linear infinite; animation: noise-1 .2s linear infinite; } @-webkit-keyframes noise-1 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: -6px; } 80% { opacity: .3; } 100% { opacity: .6; left: 2px; } } @keyframes noise-1 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: -6px; } 80% { opacity: .3; } 100% { opacity: .6; left: 2px; } } @-webkit-keyframes noise-2 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: 6px; } 80% { opacity: .3; } 100% { opacity: .6; left: -2px; } } @keyframes noise-2 { 0%, 20%, 40%, 60%, 70%, 90% { opacity: 0; } 10% { opacity: .1; } 50% { opacity: .5; left: 6px; } 80% { opacity: .3; } 100% { opacity: .6; left: -2px; } } @-webkit-keyframes noise { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(1.7); transform: scaleY(1.7); } 43% { opacity: 1; -webkit-transform: scaleX(1.5); transform: scaleX(1.5); } } @keyframes noise { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(1.7); transform: scaleY(1.7); } 43% { opacity: 1; -webkit-transform: scaleX(1.5); transform: scaleX(1.5); } } @-webkit-keyframes noise-3 { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(4); transform: scaleY(4); } 43% { opacity: 1; -webkit-transform: scaleX(10) rotate(60deg); transform: scaleX(10) rotate(60deg); } } @keyframes noise-3 { 0%, 3%, 5%, 42%, 44%, 100% { opacity: 1; -webkit-transform: scaleY(1); transform: scaleY(1); } 4.3% { opacity: 1; -webkit-transform: scaleY(4); transform: scaleY(4); } 43% { opacity: 1; -webkit-transform: scaleX(10) rotate(60deg); transform: scaleX(10) rotate(60deg); } } .wrap { top: 30%; left: 25%; height: 200px; margin-top: -100px; padding-top: -100px; position: absolute; } code { color: white; } span.blue { color: #48beef; } span.comment { color: #7f8c8d; } span.orange { color: #f39c12; } span.green { color: #33cc33; } .viewFull { font-family: OCR-A; color: orange; /*text-decoration:;*/ } @font-face { font-family: OCR-A; src: url('data:font/woff;base64,') format('woff'); } @media only screen and (min-height: 500px) { .viewFull { display: none; } } @-webkit-keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } @-moz-keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } @keyframes cursor-blink { 0% { opacity: 0; } 50% { opacity: 1; } 100% { opacity: 0; } } body { background-color: black; } .four-oh-four { position: relative; top: 0; left: 0; min-height: 100vh; min-width: 100vw; z-index: 2; background-color: black; transition: opacity 300ms ease-out; background-position: center center; background-repeat: no-repeat; } .four-oh-four .dJAX_internal { opacity: 0.0; } .four-oh-four form, .four-oh-four input { position: fixed; top: 0; left: 0; opacity: 0; background-color: black; } .terminal { position: relative; padding: 0.2rem; padding-top: 12rem; line-height: 0em; } .terminal .prompt { color: #ffffff; display: block; font-family: 'DejaVu Sans Mono', monospace; /*font-weight: bold;*/ font-size: 0.9em; letter-spacing: 0.15em; white-space: pre-wrap; text-shadow: 0 0 2px rgba(255, 255, 255,0.75); line-height: 0.2em; margin-bottom: 0.5em; } .terminal .prompt:before { content: '> '; display: inline-block; } .terminal .new-output { display: inline-block; } .terminal .new-output:after { display: inline-block; vertical-align: -0.15em; width: 0.5em; height: 0.5em; margin-left: 5px; background: #ffffff; box-shadow: 1px 1px 1px rgba(255, 255, 255, 0.65), -1px -1px 1px rgba(255, 255, 255, 0.65), 1px -1px 1px rgba(255, 255, 255, 0.65), -1px 1px 1px rgba(255, 255, 255, 0.65); -webkit-animation: cursor-blink 1.25s steps(1) infinite; -moz-animation: cursor-blink 1.25s steps(1) infinite; animation: cursor-blink 1.25s steps(1) infinite; content: ''; } .kittens p { letter-spacing: 0; opacity: 0; line-height: 0.5rem; } .four-oh-four-form { opacity: 0; position: fixed; top: 0; left: 0; }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fjs%2Findex.js</url>
    <content type="text"><![CDATA[var inputReady = true; var input = $('.404-input'); input.focus(); $('.container').on('click', function (e) { input.focus(); }); input.on('keyup', function (e) { $('.new-output').text(input.val()); // console.log(inputReady); }); $('.four-oh-four-form').on('submit', function (e) { e.preventDefault(); var val=$('.404-input').val().toLowerCase(); var href; if (val === 'back') { showKittens(); } else if(val === 'game'){ window.location.href="game.html"; } else { resetForm(); } }); function resetForm(withKittens) { var message = "Sorry that command is not recognized." var input = $('.404-input'); $('.new-output').removeClass('new-output'); input.val(''); $('.terminal').append('' + message + ''); $('.new-output').velocity( 'scroll' ), {duration: 100} } function showKittens() { var parent = document.body; var part1 = document.getElementById("part1"); parent.removeChild(part1); document.styleSheets[0].insertRule('body:before{content:""}',21); document.styleSheets[0].insertRule('body:after{content:""}',22); if(history.length>2) { history.back(); }else{ window.location.href="https://blog.safeandsound.cn"; } } function textEffect(line) { var alpha = [';', '.', ',', ':', ';', '~', '`']; var animationSpeed = 10; var index = 0; var string = line.text(); var splitString = string.split(""); var copyString = splitString.slice(0); var emptyString = copyString.map(function (el) { return [alpha[Math.floor(Math.random() * (alpha.length))], index++]; }) emptyString = shuffle(emptyString); $.each(copyString, function (i, el) { var newChar = emptyString[i]; toUnderscore(copyString, line, newChar); setTimeout(function () { fromUnderscore(copyString, splitString, newChar, line); }, i * animationSpeed); }) } function toUnderscore(copyString, line, newChar) { copyString[newChar[1]] = newChar[0]; line.text(copyString.join('')); } function fromUnderscore(copyString, splitString, newChar, line) { copyString[newChar[1]] = splitString[newChar[1]]; line.text(copyString.join("")); } function shuffle(o) { for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x); return o; }; console.log("%cW%ce%cl%cc%co%cm%ce %cto 👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇%c\n \n \n `'#+, \n ,#######+ ##; #### \n ,###;:;###: ;## ##### \n ##; +## ##' ##+ \n ##, +#; .## `##: \n #######+#; `#####; ##+ :########' ;##### ##+ '#: +#### `##: \n `########: :######## ##+ ##########' +#######` `### '######### `##: \n .,:+### `### :##+ ##+ ####` .##' `##: #' +###. '##+ '## `##: \n ;#; +## +## ##+ ,##+ .##' .## ##### '## ;## `##: \n +####, ### .##. ##+ '##. .##' `###` :##;##` '## :##+ `##: \n #######. ### `##: ##+ ;##. .##' +##### ##; ##+ '#######; `##: \n ##+ '## ### `##: ##+ `### .##' #####. .## +## '###': `##: \n ##, `## ### :##. ##+ ;##########' `### ### `##; '## `##: \n ##; .## ;##. ### ##+ ;########' '## `##. ### :##` `##: \n `####: ,### ###; `###: ##+ ####:::;##' ##. ,### +## :##, ###` '##` `##: \n .######### #######' ##+ +##` .##' ####### # ##' ### :####### `##: \n .###: .###' ##+ ### .##' .###: .#: :## :##` `###+ `##: \n ##+ ### .##' ;#' \n ##+ ###` .##' +## :+ \n ##+ '##########' +## :### \n ##+ +#########' +## '### \n ##+ .'######' +## ##` \n \n \n%c👉👉👉Love %clife&tech. %cIf %cyou do too, %cwe are %cfriends %cnow.👈👈👈\n%c👻🙉🙊🐷🐗🐭🐰🦁😹🦒🐼🐨😼🐔🐴🦍🦌🐘🦔🐇🐬🐳🐙🐤🐞🐝🦈", "color: red;font-size:200%","color: orange;font-size:200%","color: #E3E301;font-size:200%","color: green;font-size:200%", "color: indigo;font-size:200%", "color: blue;font-size:200%","color: purple;font-size:200%","color: gray;font-size:200%","color: black", "color: red;font-size:200%","color: orange;font-size:200%","color: #E3E301;font-size:200%","color: green;font-size:200%", "color: indigo;font-size:200%", "color: blue;font-size:200%","color: purple;font-size:200%","font-size: 200%")]]></content>
  </entry>
  <entry>
    <title><![CDATA[备忘录]]></title>
    <url>%2Fmemo%2Findex.html</url>
    <content type="text"><![CDATA[🚩2019 年🏳️‍🌈3 月 2019-03-31pandas读取数据如果是数字前面有0的格式（如00001，00002），那么被以int方式读取后可能会被删掉前面的0，可以在读取的时候用converters指定指定读取形式，以读取excel文件为例pd.read_excel(&#39;csr.xlsx&#39;, converters={&quot;firmid&quot;: str})，即以str形式读取firmid字段的数据，pandas会以object的类型读取该列数据。 2019-03-30想要将本地的一个项目作为子项目添加到一个主项目中可以使用git的submodule或subtree操作。二者的区别比较微妙，但也很明显，这里不详细讨论，提一点值得注意的是，如果添加的是远程项目而非本地，那么使用submodule在git push上传的时候会只上传引用（使用submodule的时候会在项目根路径下生成.gitmodules文件，引用远程项目，上传后你到主项目的远程项目上去看，点击子项目目录会直接跳转到子项目的远程项目url），而subtree则不管什么时候都是直接上传内容。这里以subtree为例实现： # 添加本地子项目到主项目中 git remote add 项目名(任取) 子项目地址 # 拉去commits git fetch # 为子项目创建分支 git checkout -b sub_branch sub/master # 切换到master分支 git checkout master # 将子项目作为子目录合并到主项目中 git read-tree --prefix=合并后子项目存放的目录名 -u sub_branch 2019-03-29推荐Mac安装QLMarkdown来增加原生预览（QuickLook）对markdown文件的支持。使用brew cask install qlmarkdown即可安装。另，该网站上有许多拓展预览的插件。 2019-03-28pandas处理excel文件，保存后出现乱码问题，可以使用XlsxWriter引擎创建writer来进行保存处理，参考stackoverflow上回答 # 使用XlsxWriter引擎创建一个Pandas Excel writer writer = pd.ExcelWriter(&#39;test.xlsx&#39;, engine=&#39;xlsxwriter&#39;) # 将pandas的dataframe转换到XlsxWriter对象中 data.to_excel(writer, sheet_name=&#39;Sheet1&#39;) # 保存XlsxWriter对象中的数据 writer.save() 2019-03-27发现github上markdown文件的预览引入css无效果（无论是&lt;link rel&gt;还是&lt;style&gt;），应该是考虑到安全因素（像钓鱼之类的）所以对此进行了屏蔽。 2019-03-26建议使用Conda来安装TF：Stop Installing Tensorflow using pip for performance sake!。 2019-03-23推荐在线查词定义和同义词的网站https://www.dictionary.com，以及它的姊妹网站https://www.thesaurus.com。 2019-03-22使用osascript -e &#39;id of app &quot;AppName&quot;&#39;查看App的Bundle Id。 2019-03-21关于MacOS中使用defaults命令修改的app属性，一般存储在类似~/Library/Preferences/,~/Library/Containers/com.apple.mail/Data/Library/Preferences/或~/Library/Preferences/ByHost/的文件夹中。想要修改的话可以使用plutil -convert xml1 filename命令将其转换成XML文件后再编辑。参考stackexchange上回答。 2019-03-18在sublime中想使用快捷键快速在finder中显示当前编辑文件可以在Key Bindings中如此配置： [ { &quot;keys&quot;: [&quot;command+shift+r&quot;], &quot;command&quot;: &quot;open_dir&quot;, &quot;args&quot;: {&quot;dir&quot;: &quot;$file_path&quot;, &quot;file&quot;: &quot;$file_name&quot;} } ] 2019-03-16在MacOS中AirDrop.app的位置在目录/System/Library/CoreServices/Finder.app/Contents/Applications/下，可以将其拖到Dock的话便于使用。 2019-03-13设置MacOS长按Command+Q才退出应用，可安装SlowQuitApps👇 brew tap dteoh/sqa brew cask install slowquitapps 2019-03-02推荐Sublime下的一款英文单词自动补全插件👉DictionaryAutoComplete 2019-03-01iTerm和Terminal可使用的主题配色，其中terminal文件夹中的配置文件是Terminal可用的，直接双击即可导入。 🏳️‍🌈2 月 2019-02-27GCP上对外网开放服务的时候需要在NETWORKING➡VPC network➡防火墙规则中开放相应端口, 切记❗ 2019-02-26mac上想取消spotlight搜索结果中的开发者一类，如果未安装Xcode，在设置中是看不到开发者复选框的（故无法取消），这种情况下只需要在/Application文件夹中创建文件Xcode.app即可，重新打开设置即可看到开发者复选框。 2019-02-25邮箱客户端登陆Gmail（异常）失败时，可以尝试使用应用专用密码进行登录，而非通过google账户验证登录。使用的前提是账户已启用两步验证。 2019-02-09TX2安装tensorflow可以如此👉tensorflow for jetson tx2，安装keras之前可能需要依赖libblas-dev，liblapack-dev，gfortran 🏳️‍🌈1 月 2019-01-06git commit的时候信息写错，可以在SourceTree中在前一次commit上使用Rebase children of...，然后进行修改，完成后不要进行merge操作，直接push -f即可。 2019-01-03关于arXiv的用法推荐一文 👉 免费知识哪里来——Arxiv使用指南 2019-01-01markdown文档中的链接，如果出现()可能会导致出错，分别使用%28代替(和%29代替)即可。 🚩2018 年🏳️‍🌈12 月 2018-12-31对于MNIST(Mixed National Institute of Standards and Technology database)的官方定义。还有数据集CIFAR-10(Canadian Institute For Advanced Research), 发音同”see far”。 2018-12-25通过命令defaults write com.apple.dock autohide-delay -int 秒数可以调整macOS中dock打开的速度。 2018-12-05遇到了一个比较有趣的shell启动动画，可以参考一下➡️ zsh Loading的命令行动画 🏳️‍🌈10 月 2018-10-30Linux安装sqlplus: 去Oracle官网下载合适版本的基础包和sqlplus安装包, 如oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm和oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm, 然后使用命令进行安装，如centos：rpm -ivh oracle-instantclient*.rpm，最后将/usr/lib/oracle/12.2/client64/lib和/usr/lib/oracle/12.2/client64/bin路径加入到环境变量即可。 2018-10-24Alien是一款可以将Linux下.rpm和.deb两种格式的软件包互转的非常好用的软件。 2018-10-16使用echo &quot;Set-Location D:\&quot; &gt; $Profile命令可以修改PowerShell打开后的默认工作路径。 2018-10-15启动盘的文件系统格式最好还是使用FAT32，因为很多时候linux可能会不识别NTFS文件系统。 2018-10-10推荐一篇关于反思代码执行效率的文章。 2018-10-02使用Git提交指定时间的commit: 例👇 $ export GIT_COMMITTER_DATE=&quot;2018-10-02T10:40:00+08:00&quot; $ export GIT_AUTHOR_DATE=&quot;2018-10-02T10:40:00+08:00&quot; $ git add . $ git commit -m &quot;test&quot; $ git push 如果已经提交了的话就使用类似如下的命令修改指定commit hash的提交即可:GIT_COMMITTER_DATE=&quot;2018-10-02T10:40:00+08:00&quot; git commit --amend -C 6d9d3120fdcb9e9a685853cfb42c4431a42e623a 🏳️‍🌈9 月 2018-09-07想要在启动spring项目的时候再指定项目的配置文件, 可以采用指定Program参数的方法, 如: java -jar test.jar --spring.config.location=filepath; 另一种方法就是对启动类使用@PropertySource注解进行配置, 可以参考该文 2018-09-01今天推博客源码的时候, appveyor构建失败, 显示npm报错npm ERR! request to https://registry.npmjs.org/npm failed, reason: Hostname/IP doesn&#39;t match certificate&#39;s altnames: &quot;Host: registry.npmjs.org. is not in the cert&#39;s altnames: DNS:a.sni.fastly.net, DNS:a.sni.global-ssl.fastly.net&quot;, 乍一看是因为证书的问题, SSL? 查了一下, 配置npm禁用掉https即可 👉 npm config set strict-ssl false 🏳️‍🌈8 月 2018-08-26Dijkstra关于goto语句有害的论文见此 👉 Go To Statement Considered Harmful 2018-08-21关于旧版本的jdbc驱动在连接mysql时候报错Public Key Retrieval is not allowed, 链接加上allowPublicKeyRetrieval=true参数选项即可. 包括之前的caching_sha2_password问题和Unknown system variable &#39;query_cache_size&#39;问题, 都是因为驱动版本不匹配导致的, 我这里是因为使用的mysql8,而驱动版本用的是5, 所以导致出各种异常, 改为使用8的驱动就可以了. 2018-08-20关于在spring项目中使用@Value注解从项目配置文件中获取数据结果为null的问题: 首先, 你要确定相应的配置没有出错; 然后你要保证该类已经使用@Component/@Service/@Controller等容器注解, 这样框架才能自动帮你管理相关Bean; 三者, 你要保证该类在使用的时候是使用@Autowired注解进行自动注入, 而不能使用new操作来新建对象; 四者, 变量不能是static或final类型; 如果你是在测试的话, 请保证是在spring的框架下进行, 而不是直接使用junit单写一个测试类就开始run, 这样是没有项目环境的, 也就获取不到值;对于静态变量使用@Value注解进行赋值的时候, 只需要在其set方法上使用@Value进行注解即可, 应注意此时静态变量的set方法应为非静态函数, 即前面不应加static关键字, 例如名为test的类中设置静态变量NAME的值👇 private static String NAME; @Value(&quot;${email.username}&quot;) public void setNAME(String NAME) { test.NAME = NAME; } 2018-08-18关于mysql八小时主动关闭连接的问题, 在springboot中可以加上这样配置 👇 spring: datasource: test-while-idle: true # 当连接空闲的时候进行测试 validation-query: SELECT 1 # 用来验证连接有效性的sql语句 2018-08-13Spring Jpa中, 如果hibernate的命名规则使用的是update,在运行的时候报没有表的错, 你可以将规则改为create, 再试试, 应该会报sql的格式错误, 这时候应该首先怀疑该表的实体类是否有问题, 尤其要注意是否有字段与关键字冲突这里贴一下mysql8保留关键字的列表 👉 MySQL 8.0 :: Keywords and Reserved Words 2018-08-08偶然发现了GitHub上关于时区的一个问题, 即显示的git commit的时间与contributions绿色小格子的时间的参照标准是不一致的. 以我的博客为例, 我推更新到源码库后, appveyor自动拉取并生成静态页面文件自动提交到git pages库中, 如果我在凌晨一点更新, 那么我使用自己的电脑推送更新, 本地的git会使用我电脑的时区(即东八, 北京时间), 而appveyor平台上的虚拟机则使用的UTC时间, 所以它上面的git在推送到github的时候实际上是比我当前时间要晚8个小时的(也就是说我本地今天凌晨一点推送, 则appveyor的时间是昨天的下午五点), 所以对于appveyor的这次推送, contributions会把它算在昨天, 而非今天, 但是在本地电脑查看github的这次commit时间则会显示出正确的时间, 也就是凌晨一点的样子, 这大概是因为显示的commit的时间会自动根据你电脑的当前时区来动态变化, 而contributions的计算则是完全按照git提交时候Date字段的日期来计算的. 2018-08-07tmux中需要查看历史输出, 可以使用Ctrl+b然后再按[键, 即可进入copy mode, 此时再按上下键即可按行翻阅历史输出; 亦或是Ctrl+b后直接使用PgUp/PgDn键进行按页的翻阅. 可参见StackExchange上的高票回答 2018-08-05最近了解了jwt, 本想写一篇相关的文章, 但发现阮一峰老师七月份的一篇博客中写的已经比较详细, 相关部分自己搜索拓展一下即可 👉 文章见此. 🏳️‍🌈7 月 2018-07-31对于jdbc的java.sql.SQLException: Unknown system variable &#39;query_cache_size&#39;报错(本人的msyql版本是8.0, 使用的是springboot1.5.4相应的jdbc)是由于jdbc版本的问题, 版本改为5.1.44即可. 可参见StackOverflow相关回答 2018-07-29mysql8.0中由于默认使用新的密码插件验证方式 👉 caching_sha2_password, 但是以前的版本(如5.7)使用的是mysql_native_password, 这使得很多连接MySQL的工具或编程接口都失效了,会导致类似Unable to load authentication plugin &#39;caching_sha2_password&#39;的报错, 所以可以使用alter user &#39;username&#39;@&#39;host&#39; identified with mysql_native_password by &#39;password&#39;;修改密码验证方式.此外, msyql8中的授权给用户的方式也有所改变, 原来是grant all on database.table to &#39;username&#39;@&#39;host&#39; identified by &quot;password&quot;;, 但在8.0中, 不需要在后面添加密码, 即应该写成grant all on database.table to &#39;username&#39;@&#39;host&#39;;, 否则会报错. 2018-07-27IDEA中使用热部署可以不用添加devtools的maven依赖, 而直接使用JRebel for Intellij插件. 2018-07-21关于IDEA的项目中空包会被折叠连在一起(如security.config.controller, config与controller是两个包, 但是连续创建后由于都是空包, 所以会被自动折叠到一起, 这样再创建类时就会很麻烦)的问题, 可以在项目的Options里取消Hide Empty Middle Packages选项即可, 参见 👉 StackOverflow上的回答 2018-07-18IDEA的maven项目中, 如果使用maven导入的依赖包未能被项目识别或使用(表现为在project structure的Libraries中不存在maven导入的依赖), 则在项目下运行命令mvn clean install, 结束后再reimport整个项目的依赖即可. 🏳️‍🌈6 月 2018-06-16git mv -f oldfilename newfilename命令可用于重命名文件. 2018-06-15关于git, 需要强调的一点是: 关于.gitignore和.git/info/exclude文件, 它们生效的对象, 也就是添加进这两个后可以使git忽略追踪的对象, 仅限于从未被git记录过的文件, 也就是自该文件被创建以来, 从未被add和commit过, 否则就算你将该文件添加进.gitignore或.git/info/exclude, git还是会追踪该文件, 如果想要让git不追踪被记录过的文件, 使用命令git update-index --assume-unchanged FilePath即可, 以后想让git重新追踪该文件, 可以使用命令git update-index --no-assume-unchanged FilePath即可. 2018-06-02node.js中约定回调函数的第一个参数必须为错误对象err(如果没有错误则第一参数为null), 这是因为整个执行分为两段(回调函数作为第二段), 两段之间抛出的错误程序是无法捕捉的, 所以只能将其作为参数传入第二段回调函数里. 🏳️‍🌈5 月 2018-05-22对于apt有些使用情况下会报WARNING: apt does not have a stable CLI interface.的错, Ask Ubuntu社区上有很好的回答 2018-05-21ubunut下mysql开发相关的两个no such file解决办法:fatal error: my_global.h: No such file or directory 👉 apt install libmysqlclient-devfatal error: violite.h: No such file or directory 👉 apt install libmariadbclient-dev-compatCentos下可以参考, 肯定也是相关的dev库依赖的问题 2018-05-20注册表HKEY_CURRENT_USER/Console下各终端里, DWORD类型的CodePage键值可控制打开终端的编码方式, 十进制936为GBK编码, 65001为UTF-8 2018-05-19git项目中有时想要需要忽略.gitignore文件, 但.gitignore文件无法排除自身, 我们可以通过修改.git/info/exclude文件来忽略.gitignore, 相比之下, .git/info/exclude是在本地进行排除文件(因为.git文件夹是不会上传的嘛). 2018-05-10vmware下虚拟机中使用摄像头, 需要在菜单栏中VM -&gt; Removable Devices连接摄像头设备到虚拟机, 如果在虚拟机中能检测到摄像头设备, 但是打开摄像头后无法显示图像, 则应该尝试在Vm -&gt; Settings -&gt; USB Controller将USB兼容性调整一下(原来是2.0的话则换到3.0, 原来是3.0的话则尝试换到2.0), 然后再断开摄像头与虚拟机的连接, 再重新连接, 再开启摄像头试试. 2018-05-05推荐更纱黑体(原Inziu Iosevka字体), 一般用在终端(如xshell)和命令行(如powershell和IDE中的terminal)中, IDE中可以作为备选字体, 用来显示中文等非英语字体, 个人觉得很好看, 而且英文字符(如O和0, l和1等)区分明显, 对人眼识别友好.直接下载github仓库中的release最新版, 解压后的文件夹中有很多字体安装包Sarasa是字体的名字, 后面的Gothic,,mono,monoT等是字体风格, j,cl,sc,tc分别是日文, classical(好像是?), 简体中文和繁体中文的缩写, 最后的regular,italic,bold等是字体样式, 常规, 斜体和加粗等.编程建议使用sarasa-mono-sc-regular 2018-05-01WSL的根目录在windows系统下的路径为C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\ 🏳️‍🌈4 月 2018-04-29用HTML写了个样式简洁的简历模板, 请见 👉 传送门. 2018-04-24推荐一款GitHub上开源的Windows下的任务栏流量监控软件 👉 TrafficMonitor, 非常好用. 2018-04-21powershell后台运行程序可以使用命令Start-Process 程序路径 -WindowStyle hidden, 如果是需要后台执行命令的话那就是Start-Process powershell &quot;command&quot; -WindowStyle hidden了, 如果是写入ps1脚本的话就是powershell -windowstyle hidden -command &quot;command&quot; 2018-04-18使用python -m py_compile file.py命令可以将py源文件编译成pyc文件, 可以起到简单保护源码的作用(可以反编译, 但是成本不低); 2018-04-14使用webstorm编写vue项目的时候如果没预先配置好可能会导致IDE的代码格式化后与ESlint的格式相冲突从而导致项目报错, 建议进行如下配置, 进入Settings: 1.Preferences -&gt; Languages &amp; Frameworks -&gt; Javascript -&gt; Code Quality Tools -&gt; Eslint选中Enable后填写Node和Eslint路径,然后选中Automatic search并Apply 2.Editor -&gt; Inspections取消勾选Javascript下的所有子选项, 然后再勾选上Javascript -&gt; Code quality tools -&gt; Eslint, 也就是只应用ESlint的检查, 然后Apply 3.Editor -&gt; Code Style -&gt; JavaScript将Tab size, Indent和Continuation indent全都修改为2, 然后Apply 4.Editor -&gt; Code Style取消勾选Detect and use existing file indents for editing和Enable EditorConfig support, 然后Apply并保存退出 当然了, 更简单的解决办法就是在生成webpack模板的时候不要选择ESlint. 2018-04-13可以利用OneDrive来同步JetBrains系列的IDE环境: (以Idea为例)修改相关IDEA安装目录中bin目录下的idea.properties文件中的idea.config.path值即可(默认是未设置的, 默认的配置所在目录是${user.home}/.IntelliJIdea/config), 例如: idea.config.path=C:/Users/jay/OneDrive/SettingsSync/JetBrains/IDEA/config 这就是我在OneDrive中的Idea配置同步目录注: 路径分隔符必须为/而不能为\, 否则IDE会无法识别, 导致配置目录设置在安装目录中的bin目录下. 软件更新后可能会导致idea.properties文件复原, 这时需要重新进入编写配置文件夹路径并重启软件即可. 2018-04-11powershell下使用命令gwmi –class win32_bios可以查看到本机的SN(Serial Number)码. 2018-04-11新装的gitbash启动奇慢, 在文件夹下右击想打开powershell时总是会误触, 没找到解决办法, 直接去注册表中删除相关表项即可 👉HKEY_CLASSES_ROOT\Directory\Background\shell 2018-04-09今天在PowerShell中使用virtualenv为django工程搭建python虚拟环境的过程中在执行activate脚本进行激活时发生错误: .\proVirtualEnv\Scripts\activate : 无法加载文件 C:\Users\jay\Documents\Code\django\proVirtualEnv\Scripts\activate.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。 原因是: PS的现用执行策略是 Restricted（默认设置）, 而Restricted策略为了系统安全不允许任何脚本运行, 执行命令set-executionpolicy remotesigned将PS执行策略修改为系统可以运行编写的未签名脚本和来自其他用户的签名脚本即可(需使用有管理员权限的PS, 选择A后回车). 🏳️‍🌈3 月 2018-03-28推荐cli版的图片压缩工具nie4月10日更新: 发现在最新的node版本下并不支持. windows下推荐一款gui版的压缩工具antelope, 免费无广告体积还小, 挺好用的. 2018-03-27关于在linux与windows下查看环境变量的不同:查看所有环境变量的名称和值：👇Linux下：exportWindows下：set根据名称查该环境变量的值：👇Linux下：echo $环境变量名Windows下：set 环境变量名 2018-03-26CSS否定选择器:not()不能嵌套使用, 但是可以并列使用, 形如: :not():not()。例如我要选择所有p元素下的非(类a和类b)的元素, 则可以写作: p:not(.a):not(.b)。 2018-03-25今天发现了一个关于算法复杂度大O表示法的cheat sheet, 非常清晰的展示了算法时间复杂度之间的区别. 2018-03-16很多时候我们在新建的docker镜像里面查找配置文件的时候会很麻烦, 使用locate命令会提示没有此命令, 这是我们可以安装mlocate软件, 这样updatedb和locate命令就都可以使用了. 2018-03-14win10的MS store以及在上面下载的app都是运行在沙箱中的, 其网络流量收到了系统的限制而从本地走, 所以像其他exe程序一样直接使用系统代理, 我们可以通过设置来进行修改, 具体可以参照该知乎专栏. 2018-03-06关于各种开源协议的不同, 推荐阮一峰老师一篇博文中的一张图,一看就懂. 2018-03-05win下使用power /energy命令后,正常使用电脑一分钟可以得到电脑的能源效率分析报告.使用power /batteryreport命令后,可以得到一份本机电池的报告,包含电池损耗等信息. 🏳️‍🌈2 月 2018-02-26安装系统时提示硬盘格式不符, 需转换成GPT/MBR时,可在安装界面使用Shift+F10快捷键调出cmd, 使用命令进行转换 list disk：显示本机安装的硬盘，编号为0、1、2…… select disk X：选择上面列出的硬盘 clean：清空选中硬盘原有分区信息 convert gpt/mbr：将分区格式转换为GPT/MBR list partition：显示已有分区 2018-02-02cmd下输入ipconfig /flushdns, 回车, 即可刷新hosts文件 🏳️‍🌈1 月 2018-01-10今天centos上在安装软件之后手动将软件命令文件所在的bin目录加入/etc/environment, 因为我个人喜欢在该文件中配置环境变量, 但是centos7下好像该文件默认为空, 于是我手动添加PATH=/usr/local/freeradius/bin, 结果source之后发现其他的环境变量里的命令都找不到了, 如使用vi会提示command not found, 要使用/bin/vi才行, 于是到现在才发现这样引入环境变量是清空重新引入的过程, 并非是简单的添加, 所以最好还是这样写PATH=/usr/local/freeradius/bin:$PATH, 但是有个劣势就是如果多次source的话会让PATH变量中包含多个/usr/local/freeradius/bin路径. 2018-01-07JUnit4中测试中几种常用的注解(主要是@AfterClass,@BeforeClass,@after,@before的区别):@Before：初始化方法,对于每一个测试方法都要执行一次@After：释放资源,对于每一个测试方法都要执行一次@Test：测试方法，在这里可以测试期望异常和超时时间, 如: @Test(expected=ArithmeticException.class)检查被测方法是否抛出ArithmeticException异常@Ignore：忽略的测试方法@BeforeClass：针对所有测试，只执行一次，且必须为static void@AfterClass：针对所有测试，只执行一次，且必须为static void一个JUnit4的单元测试用例执行顺序为：@BeforeClass -&gt; @Before -&gt; @Test -&gt; @After -&gt; @AfterClass每一个测试方法的调用顺序为：@Before -&gt; @Test -&gt; @After 2018-01-06今天在Atom的Sync Settings插件中用到了github的gist服务, 该服务专门用来存放代码片段, 相当于小的git仓库. 特点是用户可以无限制创建私有gist, 也可以不登陆直接匿名创建gist, 其唯一识别是gist ID, 只要知道id就可以查看内容, 无论其是public || secret, 且与用户无关.在Gist URL后加上.pibb后缀, 可以得到一个纯HTML的版本, 如:https://gist.github.com/anonymous/cc370d24d7f4be3363ec2f09ad1e0628.pibb, 这样就可以直接复制粘贴到其他地方了, 如论坛之类.这方面的使用感觉和nhttps://paste.ubuntu.com有点像. 2018-01-05可以使用如下语句在shell脚本中进行大段注释; :&lt;&lt;BLOCK 这里 全部是 注释 BLOCK 2018-01-03从GitHub下载单个文件 👉 https://raw.githubusercontent.com/username/repository/branch(一般就是master)/filename 🚩2017 年🏳️‍🌈12 月 2017-12-24从阮一峰老师的博客学习了一下git commit的写法,在这里摘抄一下:commit message包括三个部分:header,Body和footer, 形如: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; // 空一行 &lt;body&gt; // 空一行 &lt;footer&gt; 其中header是必须的,body和footer可以省略.Headerheader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。(1)typetype用于说明 commit 的类别，只允许使用下面7个标识。feat：新功能（feature）fix：修补bugdocs：文档（documentation）style： 格式（不影响代码运行的变动）refactor：重构（即不是新增功能，也不是修改bug的代码变动）test：增加测试chore：构建过程或辅助工具的变动如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。(2)scopescope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。(3)subjectsubject是 commit 目的的简短描述，不超过50个字符。以动词开头，使用第一人称现在时，比如change，而不是changed或changes第一个字母小写结尾不加句号（.）BodyBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。More detailed explanatory text, if necessary. Wrap it toabout 72 characters or so.Further paragraphs come after blank lines.-Bullet points are okay, too-Use a hanging indent有两个注意点。（1）使用第一人称现在时，比如使用change而不是changed或changes。（2）应该说明代码变动的动机，以及与以前行为的对比。FooterFooter 部分只用于两种情况。(1)不兼容变动如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。 BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: { myAttr: 'attribute', } After: scope: { myAttr: '@', } The removed inject wasn't generaly useful for directives so there should be no code using it. (2)关闭 Issue如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。 Closes #234也可以一次关闭多个 issue 。Closes #123, #245, #992Revert还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。 revert: feat(pencil): add ‘graphiteWidth’ optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。 2017-12-21在使用maven命令操作项目的时候, 很多命令在运行时都会进行自动测试（如install、package），如果我们需要临时跳过测试, 可以加上-DskipTests=true参数来跳过单元测试的运行, 或者-Dmaven.test.skip=true参数来同时跳过单元测试的运行和测试代码的编译。如果是在IDEA上有直接可使用的maven工具插件在项目右侧栏, 其工具栏有一个带闪电的小球, 可触发”skipTests”模式 . 2017-12-17USTC的ubuntu源文件自动生成器 2017-12-09有时候需要在当前文件夹开一个临时的端口来访问一下看看效果可以使用http-server.需要使用npm全局安装http-sever: npm install -g http-server使用http-server在本地开一个临时的server: http-server -a 127.0.0.1 -p [端口号]根目录默认为当前目录,也可以直接在http-server后面指定目录地址(相对/绝对都可以),如果不加-a参数的话则会默认在本地的几个网卡地址上都进行设置(如:你有一个10.10.10.1的虚拟网卡,如果你有一台虚拟机使用的是这个网卡,则虚拟机也可以访问当前设置的地址) 2017-12-06有些同学不会下载离线完整版的chrome,方法是:google搜索关键词”chrome 帮助”,会得到结果”Google Chrome帮助 - Google Support”,下面的小标题有”下载和安装Google Chrome”,点进去,在”在 Windows 设备上安装 Chrome”下方会有小标题”离线安装 Chrome”,点击展开,会出现链接备用 Chrome 安装程序,点击后可以看到打开的页面URL最后有属性standalone=1,在该页面下载的chrome即是离线版的. 2017-12-01从浏览器复制网站地址后粘贴到别处,如果地址中有中文,往往发现地址里的中文被转码成了URL编码,如https://zh.wikipedia.org/wiki/维基百科被转成了https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91,其实使用剪切而非复制就不会出现这种尴尬的问题. 🏳️‍🌈11 月 2017-11-29今天在使用服务器做ss代理的时候一直提示ERROR: unable to resolve……，很奇怪，这个配置已经用过很多遍都没出问题，而且明明服务器配置了多个DNS，却显示无法解析域名。在GitHub该issue中找到了解决办法，在配置文件里加了&quot;nameserver&quot;: &quot;8.8.8.8&quot;(也就是google的一个DNS)这个字段，问题就解决了，开发者说并不确定问题的根源,但ss是默认从/etc/resolv.conf获取默认DNS服务器的。然后，在使用proxifier时突然报错 [11.29 16:56:25] Error: Windows network (Winsock) is not properly configured to work with Proxifier. [11.29 16:56:25] Proxifier or some of its parts may work incorrectly. [11.29 16:56:25] It is highly recommended that you run SysSettings tool to address this problem. 一脸懵逼，之前用还好好的，估计可能是前几天一次win10版本大更新导致的，根据提示中的SysSettings，用everything查找了一下系统，发现是proxifier自带的一个设置程序，就在proxifier的安装目录下，进去之后先运行了64位的“SysSettings64.exe”，显示proxifier module is not installed，当然是点击install了，安装后重启proxifier，并没什么用（挠头），索性运行了32位的“SysSettings32.exe”，也安装了下，重启，成了。应该是更新时系统把proxifier的部分模块给删了导致的问题。 2017-11-29Tiny Core，仅10+M的linux，因为轻量而被追捧，网上的教程也不少。进入系统后输入命令，tce可以进入Tiny Core Extension，即CLI应用浏览器，按s进入搜索模式，输入需要的软件/库名即可，系统会列出相关的选择。关于Tiny Core Plus，是带GUI的版本，稍大，100+M，在vmware直接从IOS启动时只有选择”Boot Core with only X/GUI (TinyCore)”及以下的启动项才能正常启动，原因未知。 2017-11-27发现curl v4.ifconfig.co命令获取本机ip地址的速度比curl ifconfig.co来的快得多，好用。注：适用于虚拟机、云服务器之类使用NAT转换、使用ifconfig命令无法直接获取公网地址的主机。 2017-11-20今天更新kali后发现shadowsocks无法使用，运行后报错： AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup 看错误应该是加密方面的问题，因为ss依赖openssl，那就应该是openssl的问题了，上网搜了下，解决办法在此 2017-11-09Get full version of StarUML startUML获取证书，V2.8.0亲测可用. 2017-11-05之前的ssl证书都是在七牛上获取的trustasia颁发的免费证书，但是过程比较繁琐，需要先申请然后用dns或文件的方式验证，一般一天后通过验证，然后要把证书下载下来传到服务器，再配置nginx……发现lnmp现在自带了有ssl添加功能，试了下，报错： Traceback (most recent call last): File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 2363, in &lt;module&gt; main() File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 719, in main symlink=options.symlink) File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 988, in create_environment download=download, File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 918, in install_wheel call_subprocess(cmd, show_stdout=False, extra_env=env, stdin=SCRIPT) File &quot;/usr/lib/python3/dist-packages/virtualenv.py&quot;, line 812, in call_subprocess % (cmd_desc, proc.returncode)) OSError: Command /opt/eff.org/certbot/venv/bin/python2.7 - setuptools pkg_resources pip wheel failed with error code 2 Let&#39;s Encrypt SSL Certificate create failed! 在此找到解决办法，最终是用@knowThis小伙伴的办法解决的： $ apt-get purge python-virtualenv python3-virtualenv virtualenv $ pip install --upgrade pip $ pip install virtualenv $ vim /bin/lnmp #将&quot;/bin/certbot certonly&quot;替换成&quot;/bin/certbot --no-bootstrap certonly&quot;。仅一处。 使用lnmp自带的添加ssl功能有个好处就是它会配置默认将http流量直接转发到https;直接使用lnmp 生成ssl后，vhost站点的配置文件在/usr/local/nginx/conf/vhost，需要进行配置的话可以进去修改，80端口的server是http的配置，443端口的是https，以下举例：1. 需要启用404页面，当资源访问错误时跳转到指定页面：取消error_page的注释，将其修改为error_page 404 403 500 502 503 504 = /404.html;注意：/404.html文件的路径是相对于配置中的root字段的值，所以如果root字段的值为/home/wwwroot/default,那么404.html在系统中的绝对路径为/home/wwwroot/default/404.html。其次，http和https的配置是分开的，所以如果只配置了http的404页面，那么在https协议访问发生资源错误时是不会跳转到http配置中设置的404页面的。2. http访问配置好的404页面发现不会自动跳转到https。需要我们手动把http流量强制转发到https，在http配置中添加rewrite ^ https://$server_name$request_uri? permanent;3. 修改配置文件后需要重启nginx服务才能生效。如果无法重启，首先使用nginx -t命令检测配置文件，如果报错说明是配置文件的错；如果没有报错，使用netstat -anp|grep :80查看80端口是否被占，如果被占则需要kill掉使用80端口的进程；如果没有被占，使用journalctl -xe查看启动服务时的报错日志进行调试解决。 2017-11-01最近配置nginx时总是遇到nginx -t测试配置文件时没问题，但是restart服务却一直失败，重启一下吧又好了，突然想起来会不会是端口被占了，查一下： # netstat -anp|grep &quot;:80&quot; tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 8205/nginx.conf tcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN 1356/java 端口果然被占用了，kill掉这个进程即可。 🏳️‍🌈10 月 2017-10-27强推一款跨平台的终端连接工具：Termius，尤其是在IOS上，好用又良心。在此之前我在手机上使用的SSH连接工具是Shelly，它仅支持SSH，而且不购买专业版的话就无法保存密码，每次都要重新输入，简直是要逼死使用长密码的人，在我准备购买专业版时发现当前下载的shelly是使用之前的一个Apple ID获取的，购买的话就需要使用现在的账号重新获取，于是删除了shelly后我到App store中搜索了ssh，出现的第一个结果就是Termius，五星的好评让我尝试了一下它，结果就没再安装shelly。 2017-10-21之前linux下查命令参数总是用man配合字符匹配，突然发现有tldr这种利器，赶紧推一下, npm install tldr 2017-10-18推荐一款linux下递归搜索文件内容的软件：ag，安装步骤： git clone https://github.com/ggreer/the_silver_searcher.git sudo apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev ./build sudo make install 体验还不错，在linux子系统下运行效果图 2017-10-13发现IOS下的Workflow可以提取网页的json数据，这样就能访问有些网站提供的API直接拿数据了，简直就是一只小爬虫，自己做了一个根据书名从豆瓣拉取图书相关信息的workflow 👉 豆瓣读书 👈，感觉查书什么的挺好用的 2017-10-05推荐一款cli下的mysql客户端，mycli，支持语法高亮和命令补全，linux下直接install就有，效果相当棒。 🏳️‍🌈9 月 2017-09-21ES6的暂时性死区//(1). ES6中的let命令不像var那样具有“变量提升”现象。 console.log(foo);//ReferenceError let foo=2; //(2). ES6中只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域而不受外部的影响。 var tmp=123; if (true) { tmp=&quot;abc&quot;;//ReferenceError let tmp; } //ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。 //总之在代码块内，在let命令声明变量之前，该变量都是不可用的， //这在语法上成为“暂时性死区”(TDZ,temporal dead zone)。 //再来一个例子: if(true) { //TDZ开始 tmp=&quot;abc&quot;;//ReferenceError console.log(tmp);//ReferenceError let tmp;//TDZ结束 console.log(tmp);//undefined tmp=&quot;abc&quot;; console.log(tmp);//123 } 🏳️‍🌈8 月 2017-08-10今天发现在文件夹下按住shift+鼠标右击打开的cmd/powershell窗口无法获取到在该次登录系统后添加的环境变量. 也就是说你刚添加了环境变量, 但是使用这种方法, 或者在IDE中,如idea里面打开cmd/powershell窗口后却无法使用该环境变量, 需要注销后重新登录系统才会加载, 但是使用传统办法(如run)打开的是可以直接使用的. 🏳️‍🌈7 月 2017-07-21powershell启动加速。参见该官方博文,将以下命令粘贴到powershell，等待执行完毕。 Set-Alias ngen @( dir (join-path ${env:\windir} “Microsoft.NET\Framework”) ngen.exe -recurse | sort -descending lastwritetime )[0].fullName [appdomain]::currentdomain.getassemblies() | %{ngen $_.location} 2017-07-20windows下在资源管理器右键打开powershell /cmd。进regedit，定位到HKEY_CLASSES_ROOT\Directory\Background\shell\cmd\command表项，对右侧的字符串项的值进行修改： #用powershell打开则改为： powershell.exe -NoExit Set-Location “%V” #用cmd打开则改为： cmd.exe /s /k pushd &quot;%V&quot; 确定保存即可 2017-07-05如果删除一个很多层文件夹嵌套的文件夹(也就是文件与子文件夹众多, 且深度很深), 可能会导致读取文件夹信息错误(显示的大小与实际大小不一致)甚至删除的时候无法删除的情况, linux与windows均有这种情况, 当使用rm命令进行删除时, 会报fts_read failed: No such file ordirectory的错, 我在Redhat的bug报告论坛上见到了类似的情况, 见链接Red Hat Bugzilla – Bug 1395161 2017-07-03Ubuntu安装中文并将系统语言设置为中文 👇 1. 第一步，安装中文包：sudo apt-get install language-pack-zh-hant language-pack-zh-hans 2. 第二步，配置相关环境变量：sudo vim /etc/environment, 并在文件内容末尾另起一行增加语言和编码的设置：LANG=&quot;zh_CN.UTF-8&quot; LANGUAGE=&quot;zh_CN:zh:en_US:en&quot; 3.第三步，重新设置本地配置：sudo dpkg-reconfigure locales, 选项都选择zh_CN.UTF-8 4.保存重启即可]]></content>
  </entry>
  <entry>
    <title><![CDATA[算力打赏]]></title>
    <url>%2Freward%2Findex.html</url>
    <content type="text"><![CDATA[.content { background:rgba(248,248,248,0) none repeat scroll !important; } .header{ background:rgba(248,248,248,0) none repeat scroll !important; } .footer{ display:none; } 👉你可以贡献电脑cpu的算力来打赏本站，点击下面的热气球进行跳转后点击”START MINING”按钮即可协助本站挖掘数字货币(请保持页面打开)，挖掘过程中你无需支付任何费用，将仅占用cpu资源，你也可以调节”SPEED”速度参数来控制挖掘速度以保证挖掘过程中不会影响你的正常使用。在此表示感谢🤝]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Freward%2Fstyle.css</url>
    <content type="text"><![CDATA[#statement { font-size: 120%; } .emoji { font-size: 120%; } .ballaozin { width: 180px; height: 180px; background-image: url("https://cdn.safeandsound.cn/image/reward/ionic-balloon.png"); background-size: 50%; background-repeat: no-repeat; position: absolute; animation: voavoa 4s ease-in-out infinite, vaisproslado 80s ease-in-out infinite; } @keyframes voavoa { 0% {transform: translateY(0);} 50% {transform: translateY(100px);} 100% {transform: translateY(0);} } @keyframes vaisproslado { 0% { left: 0%; } 20% { left: 20%; } 50% { left: 80%; } 70% { left: 40%; } 100% { left: 0%; } }]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
